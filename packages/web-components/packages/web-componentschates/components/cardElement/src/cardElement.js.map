{"version":3,"sources":["components/cardElement/src/cardElement.ts","components/cardElement/src/cardElement.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","state","styles","cardElement","constructor","fileTypes","_cardData","_isAudioPlaying","firstUpdated","_getTheme","_buildCard","updated","changedProperties","has","_translateHexToRGB","hexString","rawHex","replace","red","parseInt","substring","green","blue","join","parentElement","HTMLElement","parentStyle","getComputedStyle","backgroundColor","getPropertyValue","rgbColor","style","setProperty","cardElements","type","_getFileData","content","_getAudioData","loading","_getSitePreviewData","fileType","_getFileType","link","requestUpdate","_getShortenedURL","url","host","URL","error","_getSiteName","urlObject","domain","hostname","split","slice","formattedName","charAt","toUpperCase","path","pathname","pieces","longestTitle","sort","a","b","pop","candidateTitle","RegExp","_getVideoFileName","videoFileName","_getVideoTitle","videoTitle","fileName","foundType","indexOf","preview","title","shortenedUrl","description","_updateAudioDuration","_updateAudioProgress","_toggleAudio","_a","audioElement","shadowRoot","querySelector","paused","play","pause","_audioDuration","duration","_audioProgress","currentTime","_formatAudioTime","time","minutes","Math","floor","minutesString","toString","seconds","secondsString","apiUrl","_previewData","imageUrl","backUpName","API_URL","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","reply","message","failed","attribute","reflect","prototype","String","Boolean"],"mappings":"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","file":"cardElement.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n\n// @ts-ignore\nimport styles from './cardElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class cardElement extends LitElement {\n  static styles = styles;\n  /**\n   * Array of subelements parsed from API reply\n   */\n  @property({ type: Object, attribute: 'card-elements', reflect: true })\n  cardElements;\n\n  /**\n   * file types with icons available\n   */\n  @state()\n  fileTypes = [\n    'csv',\n    'mp3',\n    'mp4',\n    'png',\n    'pdf',\n    'ppt',\n    'svg',\n    'xls',\n    'zip',\n    'wmv',\n    'txt',\n    'tsv',\n    'mov',\n    'jpg',\n    'gif',\n  ];\n\n  /**\n   * url content from parent\n   */\n  @property({ type: String, attribute: 'content', reflect: true })\n  content;\n\n  /**\n   * api to fetch link/video previews\n   */\n  @property({ type: String, attribute: 'api-url', reflect: true })\n  apiUrl; // = 'http://localhost:5001/get_preview';\n\n  /**\n   * card type to differentiate between url and videos\n   */\n  @property({ type: String, attribute: 'type', reflect: true })\n  type;\n\n  /**\n   * card type to differentiate between url and videos\n   */\n  @property({ type: String, attribute: 'file-type', reflect: true })\n  fileType;\n\n  /**\n   * loading attribute to delay card url generation\n   */\n  @property({ type: Boolean, attribute: 'loading', reflect: true })\n  loading;\n\n  /**\n   * link preview object to be invoked when url object is rendered\n   */\n  @state()\n  _cardData: any = null;\n\n  @state()\n  _isAudioPlaying = false;\n\n  @state()\n  _audioProgress;\n\n  @state()\n  _audioDuration;\n\n  @state()\n  _audioRatio;\n\n  /** detect when component is rendered to process rawtext\n   */\n  firstUpdated() {\n    this._getTheme();\n    this._buildCard();\n  }\n\n  /**\n   * updated - check changed properties\n   * @param {object} changedProperties - LIT object denoting changed attributes\n   */\n  updated(changedProperties) {\n    if (changedProperties.has('content')) {\n      this._buildCard();\n    }\n  }\n\n  /**\n   * _translateHexToRGB - convert bg color to rgb string to create a rgba fade\n   * @param {string} hexString - CSS hex color\n   */\n  _translateHexToRGB(hexString) {\n    const rawHex = hexString.replace(/^#/, '');\n    const red = parseInt(rawHex.substring(0, 2), 16);\n    const green = parseInt(rawHex.substring(2, 4), 16);\n    const blue = parseInt(rawHex.substring(4, 6), 16);\n    return [red, green, blue].join(',');\n  }\n\n  /**\n   * _getTheme - find current theme by checking parent background color\n   */\n  _getTheme() {\n    if (this.parentElement instanceof HTMLElement) {\n      const parentStyle = getComputedStyle(this.parentElement);\n      const backgroundColor = parentStyle.getPropertyValue('--cds-background');\n      /*const darkMode =\n        backgroundColor.startsWith('#') &&\n        parseInt(backgroundColor.replace('#', ''), 16) < 0xffffff / 2;*/\n\n      const rgbColor = this._translateHexToRGB(backgroundColor);\n      this.style.setProperty(\n        '--chat-card-theme-bottom',\n        ' rgba(' + rgbColor + ', 0)'\n      );\n      this.style.setProperty(\n        '--chat-card-theme-top',\n        ' rgba(' + rgbColor + ', 1)'\n      );\n    }\n  }\n\n  /**\n   * _buildCard - generates data to display in card if not specified\n   */\n  _buildCard() {\n    if (this.cardElements == null) {\n      if (this.type === 'file') {\n        this._getFileData(this.content);\n      } else if (this.type === 'audio') {\n        this._getAudioData(this.content);\n      } else {\n        if (!this.loading) {\n          this._getSitePreviewData(this.content);\n        }\n      }\n    } else {\n      this._cardData = this.cardElements;\n      if (this.fileType == null && this.type !== 'url') {\n        this.fileType = this._getFileType(this.cardElements.link);\n      }\n      this.requestUpdate();\n    }\n  }\n\n  //URL FUNCTIONS\n\n  /** _formatURL - helper function to display a URL's name without\n   * @param {string} url - url text that needs to be trimmed for display in the card object\n   */\n  _getShortenedURL(url) {\n    try {\n      const host = new URL(url).host;\n      return host;\n    } catch (error) {\n      return '';\n    }\n  }\n\n  /** _formatURL - helper function to display a URL's name without\n   * @param {string} url - url text that needs to be trimmed for display in the card object\n   */\n  _getSiteName(url) {\n    try {\n      const urlObject = new URL(url);\n      const domain = urlObject.hostname\n        .replace(/^www\\./, '')\n        .split('.')\n        .slice(-2, -1)[0];\n      const formattedName = domain.charAt(0).toUpperCase() + domain.slice(1);\n\n      const path = urlObject.pathname;\n      const pieces = path.split('/');\n      const longestTitle: string | undefined = pieces\n        .sort((a, b) => b.length - a.length)\n        .pop();\n      const candidateTitle = longestTitle\n        ? longestTitle.replace(new RegExp('[-_]+', 'g'), ' ')\n        : '';\n\n      if (candidateTitle !== '') {\n        return (\n          formattedName +\n          ': ' +\n          candidateTitle.charAt(0).toUpperCase() +\n          candidateTitle.slice(1)\n        );\n      } else {\n        return formattedName;\n      }\n    } catch (error) {\n      return '';\n    }\n  }\n\n  //VIDEO FUNCTIONS\n\n  /** _getVideoFileName - helper function to display a URL's name without\n   * @param {string} url - url text that needs to be trimmed for description display in the card object\n   */\n  _getVideoFileName(url) {\n    try {\n      const videoFileName = url.split('/').slice(-1);\n      return videoFileName[0];\n    } catch (error) {\n      return '';\n    }\n  }\n\n  /** _getVideoTitle - helper function to display a URL's name without\n   * @param {string} url - url text that needs to be trimmed for title display in the card object\n   */\n  _getVideoTitle(url) {\n    try {\n      const videoFileName = url.split('/').slice(-1);\n      const videoTitle = videoFileName[0].split('.')[0];\n      return videoTitle.replace(/_/g, ' ');\n    } catch (error) {\n      return '';\n    }\n  }\n\n  //FILE FUNCTIONS\n\n  /** _getFileType - if no type type given find it\n   * @param {string} fileName -file name to be analyzed\n   */\n  _getFileType(fileName) {\n    const pieces: string[] = fileName.split('.');\n    let foundType: string = pieces[pieces.length - 1];\n    if (this.fileTypes.indexOf(foundType) < 0) {\n      foundType = 'unknown';\n    }\n    return foundType;\n  }\n\n  /** extract inforamtion for url to auto-generate title, url preview and link\n   * @param {string} url -  desired URL for preview\n   */\n  _getFileData(url) {\n    const preview: any = {};\n    preview.title = url.split('/').slice(-1);\n    preview.shortenedUrl = this._getShortenedURL(url);\n    preview.link = url;\n    this.fileType = this._getFileType(url);\n    preview.description = this.fileType + ' file from: ' + url;\n    this._cardData = preview;\n    this.requestUpdate();\n  }\n\n  /** extract inforamtion for audio file to auto-generate title, url preview and link\n   * @param {string} url -  desired URL for preview\n   */\n  _getAudioData(url) {\n    const preview: any = {};\n    preview.title = this._getVideoTitle(url);\n    preview.shortenedUrl = this._getShortenedURL(url);\n    preview.link = url;\n    this.fileType = this._getFileType(url);\n    preview.description =\n      this.fileType !== 'unknown'\n        ? this.fileType.toUpperCase()\n        : '' + ' file from: ' + url;\n    this._cardData = preview;\n    this._updateAudioDuration();\n    this._updateAudioProgress();\n    this.requestUpdate();\n  }\n\n  //AUDIO FUNCTIONS\n\n  /**\n   * _toggleAudio - triggered when play/pause in audio controls is selected\n   */\n  _toggleAudio() {\n    const audioElement = this.shadowRoot?.querySelector('audio');\n    if (audioElement instanceof HTMLElement) {\n      if (audioElement.paused) {\n        audioElement.play();\n        this._isAudioPlaying = true;\n      } else {\n        audioElement.pause();\n        this._isAudioPlaying = false;\n      }\n    }\n  }\n\n  /**\n   * _updateAudioDuration - sets _audioDuration value when audio element is loaded\n   */\n  _updateAudioDuration() {\n    const audioElement = this.shadowRoot?.querySelector('audio');\n    if (audioElement instanceof HTMLElement) {\n      this._audioDuration = audioElement.duration;\n    }\n    this._updateAudioProgress();\n  }\n\n  /**\n   * _updateAudioProgress - sets progress in time throught the audio file\n   */\n  _updateAudioProgress() {\n    const audioElement = this.shadowRoot?.querySelector('audio');\n    if (audioElement instanceof HTMLElement) {\n      this._audioProgress = audioElement.currentTime;\n    }\n  }\n\n  /**\n   * converts time values from HTML element into displayable strings such as 01:34\n   * @param {number} time - time value in seconds\n   **/\n  _formatAudioTime(time) {\n    if (!time) {\n      return '00:00';\n    }\n    const minutes = Math.floor(time / 60);\n    let minutesString = minutes.toString();\n    if (minutes < 10) {\n      minutesString = '0' + minutesString;\n    }\n    const seconds = Math.floor(time % 60);\n    let secondsString = seconds.toString();\n    if (seconds < 10) {\n      secondsString = '0' + secondsString;\n    }\n    return minutesString + ':' + secondsString;\n  }\n\n  /** get url preview with title, desciption and og:image to preview site card object\n   * @param {string} url -  desired URL for preview\n   */\n  async _getSitePreviewData(url) {\n    try {\n      let preview: any = {};\n\n      if (this.apiUrl) {\n        preview = await this._previewData(url);\n      }\n\n      if (\n        !preview ||\n        (!preview.title && !preview.imageUrl && !preview.description)\n      ) {\n        if (this.type === 'video') {\n          preview.title = this._getVideoTitle(url);\n          //preview.description = this._getVideoFileName(url);\n        } else {\n          preview.title = this._getSiteName(url);\n          preview.description = url;\n        }\n      }\n\n      if (!preview.title) {\n        preview.title = this._getSiteName(url);\n      }\n      if (!preview.link) {\n        preview.link = url;\n      }\n      preview.shortenedUrl = this._getShortenedURL(url);\n      this._cardData = preview;\n      this.requestUpdate();\n    } catch (error) {\n      const backUpName = this._getSiteName(url);\n      this._cardData = {\n        title: backUpName,\n        imageUrl: null,\n        description: url,\n        link: url,\n      };\n      this.requestUpdate();\n    }\n  }\n\n  /** conditional url fetchn function\n   * @param {string} url - url to fetch\n   */\n  async _previewData(url) {\n    const API_URL = this.apiUrl;\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ url: url }),\n    };\n\n    try {\n      return await fetch(API_URL, requestOptions)\n        .then((response) => response.json())\n        .then((response) => {\n          return response;\n        });\n    } catch (error: any) {\n      return {\n        reply: 'Error reaching: ' + API_URL + ' Details: ' + error.message,\n        failed: true,\n      };\n    }\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n// @ts-ignore\nimport styles from './cardElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass cardElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * file types with icons available\n         */\n        this.fileTypes = [\n            'csv',\n            'mp3',\n            'mp4',\n            'png',\n            'pdf',\n            'ppt',\n            'svg',\n            'xls',\n            'zip',\n            'wmv',\n            'txt',\n            'tsv',\n            'mov',\n            'jpg',\n            'gif',\n        ];\n        /**\n         * link preview object to be invoked when url object is rendered\n         */\n        this._cardData = null;\n        this._isAudioPlaying = false;\n    }\n    /** detect when component is rendered to process rawtext\n     */\n    firstUpdated() {\n        this._getTheme();\n        this._buildCard();\n    }\n    /**\n     * updated - check changed properties\n     * @param {object} changedProperties - LIT object denoting changed attributes\n     */\n    updated(changedProperties) {\n        if (changedProperties.has('content')) {\n            this._buildCard();\n        }\n    }\n    /**\n     * _translateHexToRGB - convert bg color to rgb string to create a rgba fade\n     * @param {string} hexString - CSS hex color\n     */\n    _translateHexToRGB(hexString) {\n        const rawHex = hexString.replace(/^#/, '');\n        const red = parseInt(rawHex.substring(0, 2), 16);\n        const green = parseInt(rawHex.substring(2, 4), 16);\n        const blue = parseInt(rawHex.substring(4, 6), 16);\n        return [red, green, blue].join(',');\n    }\n    /**\n     * _getTheme - find current theme by checking parent background color\n     */\n    _getTheme() {\n        if (this.parentElement instanceof HTMLElement) {\n            const parentStyle = getComputedStyle(this.parentElement);\n            const backgroundColor = parentStyle.getPropertyValue('--cds-background');\n            /*const darkMode =\n              backgroundColor.startsWith('#') &&\n              parseInt(backgroundColor.replace('#', ''), 16) < 0xffffff / 2;*/\n            const rgbColor = this._translateHexToRGB(backgroundColor);\n            this.style.setProperty('--chat-card-theme-bottom', ' rgba(' + rgbColor + ', 0)');\n            this.style.setProperty('--chat-card-theme-top', ' rgba(' + rgbColor + ', 1)');\n        }\n    }\n    /**\n     * _buildCard - generates data to display in card if not specified\n     */\n    _buildCard() {\n        if (this.cardElements == null) {\n            if (this.type === 'file') {\n                this._getFileData(this.content);\n            }\n            else if (this.type === 'audio') {\n                this._getAudioData(this.content);\n            }\n            else {\n                if (!this.loading) {\n                    this._getSitePreviewData(this.content);\n                }\n            }\n        }\n        else {\n            this._cardData = this.cardElements;\n            if (this.fileType == null && this.type !== 'url') {\n                this.fileType = this._getFileType(this.cardElements.link);\n            }\n            this.requestUpdate();\n        }\n    }\n    //URL FUNCTIONS\n    /** _formatURL - helper function to display a URL's name without\n     * @param {string} url - url text that needs to be trimmed for display in the card object\n     */\n    _getShortenedURL(url) {\n        try {\n            const host = new URL(url).host;\n            return host;\n        }\n        catch (error) {\n            return '';\n        }\n    }\n    /** _formatURL - helper function to display a URL's name without\n     * @param {string} url - url text that needs to be trimmed for display in the card object\n     */\n    _getSiteName(url) {\n        try {\n            const urlObject = new URL(url);\n            const domain = urlObject.hostname\n                .replace(/^www\\./, '')\n                .split('.')\n                .slice(-2, -1)[0];\n            const formattedName = domain.charAt(0).toUpperCase() + domain.slice(1);\n            const path = urlObject.pathname;\n            const pieces = path.split('/');\n            const longestTitle = pieces\n                .sort((a, b) => b.length - a.length)\n                .pop();\n            const candidateTitle = longestTitle\n                ? longestTitle.replace(new RegExp('[-_]+', 'g'), ' ')\n                : '';\n            if (candidateTitle !== '') {\n                return (formattedName +\n                    ': ' +\n                    candidateTitle.charAt(0).toUpperCase() +\n                    candidateTitle.slice(1));\n            }\n            else {\n                return formattedName;\n            }\n        }\n        catch (error) {\n            return '';\n        }\n    }\n    //VIDEO FUNCTIONS\n    /** _getVideoFileName - helper function to display a URL's name without\n     * @param {string} url - url text that needs to be trimmed for description display in the card object\n     */\n    _getVideoFileName(url) {\n        try {\n            const videoFileName = url.split('/').slice(-1);\n            return videoFileName[0];\n        }\n        catch (error) {\n            return '';\n        }\n    }\n    /** _getVideoTitle - helper function to display a URL's name without\n     * @param {string} url - url text that needs to be trimmed for title display in the card object\n     */\n    _getVideoTitle(url) {\n        try {\n            const videoFileName = url.split('/').slice(-1);\n            const videoTitle = videoFileName[0].split('.')[0];\n            return videoTitle.replace(/_/g, ' ');\n        }\n        catch (error) {\n            return '';\n        }\n    }\n    //FILE FUNCTIONS\n    /** _getFileType - if no type type given find it\n     * @param {string} fileName -file name to be analyzed\n     */\n    _getFileType(fileName) {\n        const pieces = fileName.split('.');\n        let foundType = pieces[pieces.length - 1];\n        if (this.fileTypes.indexOf(foundType) < 0) {\n            foundType = 'unknown';\n        }\n        return foundType;\n    }\n    /** extract inforamtion for url to auto-generate title, url preview and link\n     * @param {string} url -  desired URL for preview\n     */\n    _getFileData(url) {\n        const preview = {};\n        preview.title = url.split('/').slice(-1);\n        preview.shortenedUrl = this._getShortenedURL(url);\n        preview.link = url;\n        this.fileType = this._getFileType(url);\n        preview.description = this.fileType + ' file from: ' + url;\n        this._cardData = preview;\n        this.requestUpdate();\n    }\n    /** extract inforamtion for audio file to auto-generate title, url preview and link\n     * @param {string} url -  desired URL for preview\n     */\n    _getAudioData(url) {\n        const preview = {};\n        preview.title = this._getVideoTitle(url);\n        preview.shortenedUrl = this._getShortenedURL(url);\n        preview.link = url;\n        this.fileType = this._getFileType(url);\n        preview.description =\n            this.fileType !== 'unknown'\n                ? this.fileType.toUpperCase()\n                : '' + ' file from: ' + url;\n        this._cardData = preview;\n        this._updateAudioDuration();\n        this._updateAudioProgress();\n        this.requestUpdate();\n    }\n    //AUDIO FUNCTIONS\n    /**\n     * _toggleAudio - triggered when play/pause in audio controls is selected\n     */\n    _toggleAudio() {\n        var _a;\n        const audioElement = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('audio');\n        if (audioElement instanceof HTMLElement) {\n            if (audioElement.paused) {\n                audioElement.play();\n                this._isAudioPlaying = true;\n            }\n            else {\n                audioElement.pause();\n                this._isAudioPlaying = false;\n            }\n        }\n    }\n    /**\n     * _updateAudioDuration - sets _audioDuration value when audio element is loaded\n     */\n    _updateAudioDuration() {\n        var _a;\n        const audioElement = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('audio');\n        if (audioElement instanceof HTMLElement) {\n            this._audioDuration = audioElement.duration;\n        }\n        this._updateAudioProgress();\n    }\n    /**\n     * _updateAudioProgress - sets progress in time throught the audio file\n     */\n    _updateAudioProgress() {\n        var _a;\n        const audioElement = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('audio');\n        if (audioElement instanceof HTMLElement) {\n            this._audioProgress = audioElement.currentTime;\n        }\n    }\n    /**\n     * converts time values from HTML element into displayable strings such as 01:34\n     * @param {number} time - time value in seconds\n     **/\n    _formatAudioTime(time) {\n        if (!time) {\n            return '00:00';\n        }\n        const minutes = Math.floor(time / 60);\n        let minutesString = minutes.toString();\n        if (minutes < 10) {\n            minutesString = '0' + minutesString;\n        }\n        const seconds = Math.floor(time % 60);\n        let secondsString = seconds.toString();\n        if (seconds < 10) {\n            secondsString = '0' + secondsString;\n        }\n        return minutesString + ':' + secondsString;\n    }\n    /** get url preview with title, desciption and og:image to preview site card object\n     * @param {string} url -  desired URL for preview\n     */\n    async _getSitePreviewData(url) {\n        try {\n            let preview = {};\n            if (this.apiUrl) {\n                preview = await this._previewData(url);\n            }\n            if (!preview ||\n                (!preview.title && !preview.imageUrl && !preview.description)) {\n                if (this.type === 'video') {\n                    preview.title = this._getVideoTitle(url);\n                    //preview.description = this._getVideoFileName(url);\n                }\n                else {\n                    preview.title = this._getSiteName(url);\n                    preview.description = url;\n                }\n            }\n            if (!preview.title) {\n                preview.title = this._getSiteName(url);\n            }\n            if (!preview.link) {\n                preview.link = url;\n            }\n            preview.shortenedUrl = this._getShortenedURL(url);\n            this._cardData = preview;\n            this.requestUpdate();\n        }\n        catch (error) {\n            const backUpName = this._getSiteName(url);\n            this._cardData = {\n                title: backUpName,\n                imageUrl: null,\n                description: url,\n                link: url,\n            };\n            this.requestUpdate();\n        }\n    }\n    /** conditional url fetchn function\n     * @param {string} url - url to fetch\n     */\n    async _previewData(url) {\n        const API_URL = this.apiUrl;\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ url: url }),\n        };\n        try {\n            return await fetch(API_URL, requestOptions)\n                .then((response) => response.json())\n                .then((response) => {\n                return response;\n            });\n        }\n        catch (error) {\n            return {\n                reply: 'Error reaching: ' + API_URL + ' Details: ' + error.message,\n                failed: true,\n            };\n        }\n    }\n}\ncardElement.styles = styles;\nexport default cardElement;\n__decorate([\n    property({ type: Object, attribute: 'card-elements', reflect: true })\n], cardElement.prototype, \"cardElements\", void 0);\n__decorate([\n    state()\n], cardElement.prototype, \"fileTypes\", void 0);\n__decorate([\n    property({ type: String, attribute: 'content', reflect: true })\n], cardElement.prototype, \"content\", void 0);\n__decorate([\n    property({ type: String, attribute: 'api-url', reflect: true })\n], cardElement.prototype, \"apiUrl\", void 0);\n__decorate([\n    property({ type: String, attribute: 'type', reflect: true })\n], cardElement.prototype, \"type\", void 0);\n__decorate([\n    property({ type: String, attribute: 'file-type', reflect: true })\n], cardElement.prototype, \"fileType\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'loading', reflect: true })\n], cardElement.prototype, \"loading\", void 0);\n__decorate([\n    state()\n], cardElement.prototype, \"_cardData\", void 0);\n__decorate([\n    state()\n], cardElement.prototype, \"_isAudioPlaying\", void 0);\n__decorate([\n    state()\n], cardElement.prototype, \"_audioProgress\", void 0);\n__decorate([\n    state()\n], cardElement.prototype, \"_audioDuration\", void 0);\n__decorate([\n    state()\n], cardElement.prototype, \"_audioRatio\", void 0);\n"]}