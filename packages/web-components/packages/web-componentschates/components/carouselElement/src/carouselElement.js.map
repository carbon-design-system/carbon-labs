{"version":3,"sources":["components/carouselElement/src/carouselElement.ts","components/carouselElement/src/carouselElement.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","state","styles","carouselElement","constructor","selectedSlide","contentWidth","contentHeight","_itemsPerSlide","_slideCounter","_slideGapSize","_maxSlideCounter","_renderedSlideCounter","firstUpdated","hasAttribute","_checkElements","_updateCarousel","_buildCarousel","resizeObserver","ResizeObserver","observe","updated","changedProperties","has","_carouselContent","_handleSlideSelection","parentElement","HTMLElement","parentWidth","clientWidth","Math","max","floor","maxSlides","min","style","setProperty","ceil","currentSlide","elements","map","item","content","type","_checkURLType","urlObject","imageRegex","RegExp","videoRegex","fileRegex","audioRegex","test","contentArray","JSON","parse","url","error","endsWith","fixedArray","slice","incompleteArray","console","log","_handleNextSlide","_scrollSlideContainer","_notifyIndexChange","_handlePreviousSlide","indexUpdateEvent","CustomEvent","detail","action","currentIndex","bubbles","composed","dispatchEvent","_a","slidesDiv","shadowRoot","querySelector","scrollPosition","setTimeout","scrollTo","left","behavior","String","attribute","reflect","prototype","Number"],"mappings":"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","file":"carouselElement.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n\n// @ts-ignore\nimport styles from './carouselElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class carouselElement extends LitElement {\n  static styles = styles;\n\n  /**\n   * resizeObserver - resize watcher of parent\n   **/\n  private resizeObserver;\n\n  /**\n   * Text array of elements urls\n   */\n  @property({ type: String, attribute: 'content', reflect: true })\n  content;\n\n  /**\n   * Text array of elements urls\n   */\n  @property({ type: Object, attribute: 'elements', reflect: true })\n  elements;\n\n  /**\n   * Maximum number of slides to display\n   */\n  @property({ type: Number, attribute: 'max-slides' })\n  maxSlides;\n\n  /**\n   * Current slide defined by the attribute\n   */\n  @property({ type: Number, attribute: 'selected-slide' })\n  selectedSlide = 0;\n\n  /**\n   * Predefined width for carousel container\n   */\n  @property({ type: String, attribute: 'content-width', reflect: true })\n  contentWidth = 248;\n\n  /**\n   * Predefined height for carousel container\n   */\n  @property({ type: String, attribute: 'content-height', reflect: true })\n  contentHeight = 248;\n\n  /**\n   * Parsed array of urls\n   */\n  @state()\n  _carouselContent;\n\n  /**\n   * Items per slide calculated given parent width\n   */\n  @state()\n  _itemsPerSlide = 1;\n\n  /**\n   * Parsed array of urls\n   */\n  @state()\n  _slideCounter = 0;\n\n  /**\n   * gap size in px between slides\n   */\n  @state()\n  _slideGapSize = 16;\n\n  /**\n   * maximum slide counter calculated based on items per slide and item count\n   */\n  @state()\n  _maxSlideCounter = 0;\n\n  /**\n   * Cut and parsed number to display in html\n   */\n  @state()\n  _renderedSlideCounter = 0;\n\n  /** detect when component is rendered to process carousel object\n   */\n  firstUpdated() {\n    if (this.hasAttribute('elements')) {\n      this._checkElements();\n      this._updateCarousel();\n    } else if (this.hasAttribute('content')) {\n      this._buildCarousel();\n      //this._updateCarousel();\n    }\n\n    if (this.hasAttribute('_carouselContent')) {\n      this._updateCarousel();\n    }\n\n    this.resizeObserver = new ResizeObserver(async () => {\n      this._updateCarousel();\n    });\n\n    this.resizeObserver.observe(this);\n  }\n\n  /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has('content')) {\n      this._buildCarousel();\n    }\n    if (changedProperties.has('elements')) {\n      this._checkElements();\n    }\n    if (changedProperties.has('contentWidth')) {\n      this._buildCarousel();\n    }\n    if (changedProperties.has('_carouselContent')) {\n      this._updateCarousel();\n    }\n    if (changedProperties.has('selectedSlide')) {\n      if (this._carouselContent) {\n        this._handleSlideSelection();\n      }\n    }\n  }\n\n  /**\n   * _updateCarousel - regenerate carousel cell sizes based on parent height/width\n   */\n  _updateCarousel() {\n    if (this._carouselContent) {\n      if (this.parentElement instanceof HTMLElement) {\n        const parentWidth = this.clientWidth;\n        this._itemsPerSlide = Math.max(\n          Math.floor(parentWidth / (this.contentWidth + this._slideGapSize)),\n          1\n        );\n        if (this.maxSlides) {\n          this._itemsPerSlide = Math.min(this._itemsPerSlide, this.maxSlides);\n        }\n        this.style.setProperty(\n          '--chat-carousel-slides-width',\n          this._itemsPerSlide * (this.contentWidth + this._slideGapSize) + 'px'\n        );\n      } else {\n        this.style.setProperty(\n          '--chat-carousel-slides-width',\n          this.contentWidth + 'px'\n        );\n      }\n\n      this._maxSlideCounter =\n        Math.ceil(this._carouselContent.length / this._itemsPerSlide) - 1;\n\n      let currentSlide =\n        Math.floor(this._slideCounter / this._itemsPerSlide) *\n        this._itemsPerSlide;\n      currentSlide = Math.min(\n        currentSlide,\n        this._carouselContent.length - this._itemsPerSlide\n      );\n\n      this._renderedSlideCounter =\n        Math.ceil(currentSlide / this._itemsPerSlide) + 1;\n    }\n  }\n\n  /**\n   * _checkElements - analyze each type of object in array to properly render the right Card subelement\n   */\n  _checkElements() {\n    this._carouselContent = this.elements.map((item) => ({\n      content: item.content,\n      type: item.type ? item.type : this._checkURLType(item.content),\n    }));\n  }\n\n  /** _checkURLType - check what category of URL is provided\n   * @param {string} urlObject - url text block to be checked\n   */\n  _checkURLType(urlObject) {\n    const imageRegex = new RegExp(\n      '\\\\.(png|jpg|jpeg|gif|svg|bmp|webp|ico|tiff|tif)$',\n      'i'\n    );\n    const videoRegex = new RegExp(\n      '\\\\.(mp4|avi|flv|mkv|mov|webm|m4v|ogv)$',\n      'i'\n    );\n    const fileRegex = new RegExp(\n      '\\\\.(pdf|doc|docx|csv|xls|xlsx|ppt|pptx|txt|rtf|xml|odt|zip|rar|tar|gz)$',\n      'i'\n    );\n    const audioRegex = new RegExp('\\\\.(mp3|flac|wav|mpa|wma|midi|ogg)$', 'i');\n\n    if (imageRegex.test(urlObject)) {\n      return 'img';\n    }\n    if (videoRegex.test(urlObject)) {\n      return 'video';\n    }\n    if (audioRegex.test(urlObject)) {\n      return 'audio';\n    }\n    if (fileRegex.test(urlObject)) {\n      return 'file';\n    }\n    return 'url';\n  }\n\n  /**\n   * _buildCarousel - map and identify URL types from content array or attempt to generates one from\n   */\n  _buildCarousel() {\n    try {\n      const contentArray = JSON.parse(this.content);\n      this._carouselContent = contentArray.map((url) => ({\n        content: url,\n        type: this._checkURLType(url),\n      }));\n    } catch (error) {\n      if (this.content.endsWith(',')) {\n        const fixedArray = this.content.slice(0, -1) + ']';\n        try {\n          const incompleteArray = JSON.parse(fixedArray);\n          if (!this._carouselContent) {\n            this._carouselContent = [];\n          }\n          if (incompleteArray.length > this._carouselContent.length) {\n            const url = incompleteArray[incompleteArray.length - 1];\n            this._carouselContent = [\n              { content: url, type: this._checkURLType(url) },\n              ...this._carouselContent,\n            ];\n          }\n        } catch (error) {\n          console.log(\n            'Carousel: failed to parse:' + (this.content.slice(0, -1) + ']')\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * trigger next slide shift\n   */\n  _handleNextSlide() {\n    if (\n      this._slideCounter + this._itemsPerSlide <\n      this._carouselContent.length\n    ) {\n      this._slideCounter += this._itemsPerSlide;\n    }\n\n    this._maxSlideCounter =\n      Math.ceil(this._carouselContent.length / this._itemsPerSlide) - 1;\n    this._renderedSlideCounter =\n      Math.floor(this._slideCounter / this._itemsPerSlide) + 1;\n    this._scrollSlideContainer();\n    this._notifyIndexChange();\n  }\n\n  /**\n   * trigger previous slide shift\n   */\n  _handlePreviousSlide() {\n    if (this._slideCounter - this._itemsPerSlide >= 0) {\n      this._slideCounter -= this._itemsPerSlide;\n    }\n    this._maxSlideCounter =\n      Math.ceil(this._carouselContent.length / this._itemsPerSlide) - 1;\n    this._renderedSlideCounter =\n      Math.floor(this._slideCounter / this._itemsPerSlide) + 1;\n    this._scrollSlideContainer();\n    this._notifyIndexChange();\n  }\n\n  /**\n   * handle external slide selection\n   */\n  _handleSlideSelection() {\n    if (\n      this.selectedSlide >= 0 &&\n      this.selectedSlide <= this._carouselContent.length\n    ) {\n      this._slideCounter = this.selectedSlide;\n    }\n    this._renderedSlideCounter =\n      Math.floor(this._slideCounter / this._itemsPerSlide) + 1;\n    this._scrollSlideContainer();\n  }\n\n  /**\n   * _notifyIndexChange - send an event that the slide index has changed\n   */\n  _notifyIndexChange() {\n    const indexUpdateEvent = new CustomEvent('on-carousel-index-change', {\n      detail: {\n        action: 'CAROUSEL: user changed the current slide',\n        currentIndex: this._slideCounter,\n      },\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(indexUpdateEvent);\n  }\n\n  /**\n   * _scrollSlideContainer - force sidescroll of container to view next slide\n   */\n  _scrollSlideContainer() {\n    const slidesDiv = this.shadowRoot?.querySelector(\n      '.clabs--chat-carousel-slides'\n    );\n    //const scrollPosition = Math.round((this._slideCounter/this._carouselContent.length) * slidesDiv?.scrollWidth + 8)\n    const scrollPosition =\n      this._slideCounter *\n      (this.contentWidth + this._slideGapSize) *\n      this._itemsPerSlide;\n    setTimeout(function () {\n      slidesDiv?.scrollTo({\n        left: scrollPosition,\n        behavior: 'smooth',\n      });\n    }, 100);\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n// @ts-ignore\nimport styles from './carouselElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass carouselElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Current slide defined by the attribute\n         */\n        this.selectedSlide = 0;\n        /**\n         * Predefined width for carousel container\n         */\n        this.contentWidth = 248;\n        /**\n         * Predefined height for carousel container\n         */\n        this.contentHeight = 248;\n        /**\n         * Items per slide calculated given parent width\n         */\n        this._itemsPerSlide = 1;\n        /**\n         * Parsed array of urls\n         */\n        this._slideCounter = 0;\n        /**\n         * gap size in px between slides\n         */\n        this._slideGapSize = 16;\n        /**\n         * maximum slide counter calculated based on items per slide and item count\n         */\n        this._maxSlideCounter = 0;\n        /**\n         * Cut and parsed number to display in html\n         */\n        this._renderedSlideCounter = 0;\n    }\n    /** detect when component is rendered to process carousel object\n     */\n    firstUpdated() {\n        if (this.hasAttribute('elements')) {\n            this._checkElements();\n            this._updateCarousel();\n        }\n        else if (this.hasAttribute('content')) {\n            this._buildCarousel();\n            //this._updateCarousel();\n        }\n        if (this.hasAttribute('_carouselContent')) {\n            this._updateCarousel();\n        }\n        this.resizeObserver = new ResizeObserver(async () => {\n            this._updateCarousel();\n        });\n        this.resizeObserver.observe(this);\n    }\n    /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('content')) {\n            this._buildCarousel();\n        }\n        if (changedProperties.has('elements')) {\n            this._checkElements();\n        }\n        if (changedProperties.has('contentWidth')) {\n            this._buildCarousel();\n        }\n        if (changedProperties.has('_carouselContent')) {\n            this._updateCarousel();\n        }\n        if (changedProperties.has('selectedSlide')) {\n            if (this._carouselContent) {\n                this._handleSlideSelection();\n            }\n        }\n    }\n    /**\n     * _updateCarousel - regenerate carousel cell sizes based on parent height/width\n     */\n    _updateCarousel() {\n        if (this._carouselContent) {\n            if (this.parentElement instanceof HTMLElement) {\n                const parentWidth = this.clientWidth;\n                this._itemsPerSlide = Math.max(Math.floor(parentWidth / (this.contentWidth + this._slideGapSize)), 1);\n                if (this.maxSlides) {\n                    this._itemsPerSlide = Math.min(this._itemsPerSlide, this.maxSlides);\n                }\n                this.style.setProperty('--chat-carousel-slides-width', this._itemsPerSlide * (this.contentWidth + this._slideGapSize) + 'px');\n            }\n            else {\n                this.style.setProperty('--chat-carousel-slides-width', this.contentWidth + 'px');\n            }\n            this._maxSlideCounter =\n                Math.ceil(this._carouselContent.length / this._itemsPerSlide) - 1;\n            let currentSlide = Math.floor(this._slideCounter / this._itemsPerSlide) *\n                this._itemsPerSlide;\n            currentSlide = Math.min(currentSlide, this._carouselContent.length - this._itemsPerSlide);\n            this._renderedSlideCounter =\n                Math.ceil(currentSlide / this._itemsPerSlide) + 1;\n        }\n    }\n    /**\n     * _checkElements - analyze each type of object in array to properly render the right Card subelement\n     */\n    _checkElements() {\n        this._carouselContent = this.elements.map((item) => ({\n            content: item.content,\n            type: item.type ? item.type : this._checkURLType(item.content),\n        }));\n    }\n    /** _checkURLType - check what category of URL is provided\n     * @param {string} urlObject - url text block to be checked\n     */\n    _checkURLType(urlObject) {\n        const imageRegex = new RegExp('\\\\.(png|jpg|jpeg|gif|svg|bmp|webp|ico|tiff|tif)$', 'i');\n        const videoRegex = new RegExp('\\\\.(mp4|avi|flv|mkv|mov|webm|m4v|ogv)$', 'i');\n        const fileRegex = new RegExp('\\\\.(pdf|doc|docx|csv|xls|xlsx|ppt|pptx|txt|rtf|xml|odt|zip|rar|tar|gz)$', 'i');\n        const audioRegex = new RegExp('\\\\.(mp3|flac|wav|mpa|wma|midi|ogg)$', 'i');\n        if (imageRegex.test(urlObject)) {\n            return 'img';\n        }\n        if (videoRegex.test(urlObject)) {\n            return 'video';\n        }\n        if (audioRegex.test(urlObject)) {\n            return 'audio';\n        }\n        if (fileRegex.test(urlObject)) {\n            return 'file';\n        }\n        return 'url';\n    }\n    /**\n     * _buildCarousel - map and identify URL types from content array or attempt to generates one from\n     */\n    _buildCarousel() {\n        try {\n            const contentArray = JSON.parse(this.content);\n            this._carouselContent = contentArray.map((url) => ({\n                content: url,\n                type: this._checkURLType(url),\n            }));\n        }\n        catch (error) {\n            if (this.content.endsWith(',')) {\n                const fixedArray = this.content.slice(0, -1) + ']';\n                try {\n                    const incompleteArray = JSON.parse(fixedArray);\n                    if (!this._carouselContent) {\n                        this._carouselContent = [];\n                    }\n                    if (incompleteArray.length > this._carouselContent.length) {\n                        const url = incompleteArray[incompleteArray.length - 1];\n                        this._carouselContent = [\n                            { content: url, type: this._checkURLType(url) },\n                            ...this._carouselContent,\n                        ];\n                    }\n                }\n                catch (error) {\n                    console.log('Carousel: failed to parse:' + (this.content.slice(0, -1) + ']'));\n                }\n            }\n        }\n    }\n    /**\n     * trigger next slide shift\n     */\n    _handleNextSlide() {\n        if (this._slideCounter + this._itemsPerSlide <\n            this._carouselContent.length) {\n            this._slideCounter += this._itemsPerSlide;\n        }\n        this._maxSlideCounter =\n            Math.ceil(this._carouselContent.length / this._itemsPerSlide) - 1;\n        this._renderedSlideCounter =\n            Math.floor(this._slideCounter / this._itemsPerSlide) + 1;\n        this._scrollSlideContainer();\n        this._notifyIndexChange();\n    }\n    /**\n     * trigger previous slide shift\n     */\n    _handlePreviousSlide() {\n        if (this._slideCounter - this._itemsPerSlide >= 0) {\n            this._slideCounter -= this._itemsPerSlide;\n        }\n        this._maxSlideCounter =\n            Math.ceil(this._carouselContent.length / this._itemsPerSlide) - 1;\n        this._renderedSlideCounter =\n            Math.floor(this._slideCounter / this._itemsPerSlide) + 1;\n        this._scrollSlideContainer();\n        this._notifyIndexChange();\n    }\n    /**\n     * handle external slide selection\n     */\n    _handleSlideSelection() {\n        if (this.selectedSlide >= 0 &&\n            this.selectedSlide <= this._carouselContent.length) {\n            this._slideCounter = this.selectedSlide;\n        }\n        this._renderedSlideCounter =\n            Math.floor(this._slideCounter / this._itemsPerSlide) + 1;\n        this._scrollSlideContainer();\n    }\n    /**\n     * _notifyIndexChange - send an event that the slide index has changed\n     */\n    _notifyIndexChange() {\n        const indexUpdateEvent = new CustomEvent('on-carousel-index-change', {\n            detail: {\n                action: 'CAROUSEL: user changed the current slide',\n                currentIndex: this._slideCounter,\n            },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(indexUpdateEvent);\n    }\n    /**\n     * _scrollSlideContainer - force sidescroll of container to view next slide\n     */\n    _scrollSlideContainer() {\n        var _a;\n        const slidesDiv = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.clabs--chat-carousel-slides');\n        //const scrollPosition = Math.round((this._slideCounter/this._carouselContent.length) * slidesDiv?.scrollWidth + 8)\n        const scrollPosition = this._slideCounter *\n            (this.contentWidth + this._slideGapSize) *\n            this._itemsPerSlide;\n        setTimeout(function () {\n            slidesDiv === null || slidesDiv === void 0 ? void 0 : slidesDiv.scrollTo({\n                left: scrollPosition,\n                behavior: 'smooth',\n            });\n        }, 100);\n    }\n}\ncarouselElement.styles = styles;\nexport default carouselElement;\n__decorate([\n    property({ type: String, attribute: 'content', reflect: true })\n], carouselElement.prototype, \"content\", void 0);\n__decorate([\n    property({ type: Object, attribute: 'elements', reflect: true })\n], carouselElement.prototype, \"elements\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'max-slides' })\n], carouselElement.prototype, \"maxSlides\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'selected-slide' })\n], carouselElement.prototype, \"selectedSlide\", void 0);\n__decorate([\n    property({ type: String, attribute: 'content-width', reflect: true })\n], carouselElement.prototype, \"contentWidth\", void 0);\n__decorate([\n    property({ type: String, attribute: 'content-height', reflect: true })\n], carouselElement.prototype, \"contentHeight\", void 0);\n__decorate([\n    state()\n], carouselElement.prototype, \"_carouselContent\", void 0);\n__decorate([\n    state()\n], carouselElement.prototype, \"_itemsPerSlide\", void 0);\n__decorate([\n    state()\n], carouselElement.prototype, \"_slideCounter\", void 0);\n__decorate([\n    state()\n], carouselElement.prototype, \"_slideGapSize\", void 0);\n__decorate([\n    state()\n], carouselElement.prototype, \"_maxSlideCounter\", void 0);\n__decorate([\n    state()\n], carouselElement.prototype, \"_renderedSlideCounter\", void 0);\n"]}