{"version":3,"sources":["components/chartElement/src/chartElement.ts","components/chartElement/src/chartElement.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","state","settings","VegaEmbed","stablePrefix","clabsPrefix","styles","chartElement","constructor","debugMode","containerHeight","containerWidth","carbonify","renderMethod","theme","enableTooltip","enableMultiSelections","_authorizeMultiSelection","enableSingleSelections","_authorizeSingleSelection","chartLoading","showModal","editOriginalSpecification","chartResizing","isHovered","firstUpdated","generateUniqueId","_getTheme","thumbNail","disableCodeInspector","disableEditor","addEventListener","_hideTooltip","intersectionObserver","IntersectionObserver","_displayVisualization","observe","resizeObserver","ResizeObserver","_resizeTimeout","clearTimeout","setTimeout","_handleResize","hasAttribute","style","setProperty","content","_editedContent","_prepareVisualization","parentElement","HTMLElement","parentStyle","getComputedStyle","backgroundColor","getPropertyValue","darkMode","startsWith","parseInt","replace","_reRenderVisualization","updateSpecification","_findStructuralChanges","originalJSON","updatedJSON","userEdits","changes","_recursiveComparison","path","firstElement","secondElement","push","previousValue","updatedValue","keys","Set","nextPath","changeObject","actions","updated","changedProperties","has","_errorMessage","_errorLevel","streaming","_visualizationSpec","specificationFinalizedEvent","CustomEvent","detail","action","uniqueID","_uniqueID","originalSpec","finalizedSpec","bubbles","composed","dispatchEvent","renderErrorEvent","level","message","parsedSpec","randomString","Math","random","toString","substr","_buildLoader","cells","Array","fill","join","_a","targetID","_getTargetRenderCanvasId","_editedSpec","targetDiv","shadowRoot","querySelector","chosenSpec","modalMode","height","width","autosize","resize","renderMode","default","hover","tooltip","formatTooltip","value","sanitize","_toolTipBuilder","renderer","then","view","_previousSpec","addSignalListener","_","_singleDataSelected","selectError","_warningMessage","brush","_multiDataSelected","brushError","_generateImage","catch","error","_latestError","_brokenSpec","JSON","parse","stringify","data","singleSelectionEvent","selection","_chartClicked","clickEvent","console","log","_appendToContext","contextEvent","_checkIfDate","intervalValue","date","isNaN","abs","Date","toFixed","getTime","toLocaleDateString","_formatMultiSelection","tooltipString","domain","values","startDate","endDate","field","slice","selectionPayload","selectionSummary","multiSelectionEvent","dataEvent","selections","selectionTextArray","document","innerHTML","_sanitize","textColor","defaultFont","gridColor","color","border","padding","borderRadius","background","fontFamily","toolTipHTML","sectionBorder","entrySize","entryCount","dataValue","entries","_resolveLayerConfigs","config","layerMode","resolveValues","_replaceInObject","object","_openEditorView","vegaURL","openNewWindow","window","open","specPayload","payload","spec","mode","postMessage","_openFullscreenView","closeModal","_exportToImage","_exportSvgToImage","_b","_c","_d","_e","container","canvasDiv","imageUrl","toDataURL","canvasDownloadLink","createElement","exportedFileName","title","text","trim","download","href","click","exportedImageURL","_handleLiveRawEditorChange","event","newLineText","previousData","newSpec","_prepareSpecification","_handleLiveCarbonEditorChange","_handleCarbonEditorValidation","specificationEditedEvent","_handleOriginalEditorValidation","_openCodeView","_handleFullScreenScroll","preventDefault","stopPropagation","_showCarbonSpec","_showOriginalSpec","_handleMouseOut","_handleMouseOver","svgDiv","SVGElement","svgData","XMLSerializer","serializeToString","tempCanvas","context","getContext","svgSize","getBoundingClientRect","tempImage","Image","onload","drawImage","imageData","src","btoa","_lightenSpec","specification","newSpecification","premadeSpec","e","layeredSpec","repeatedSpec","plainSpec","subChartWidth","subChartHeight","_specType","currentContainerWidth","clientWidth","currentContainerHeight","clientHeight","rowCount","columnCount","isArray","columns","ceil","legendHeight","paddingOffset","vertical","horizontal","gapSize","finalSpec","editMarks","addConfig","layerIndex","_f","_g","_h","_j","_k","ordinalColors","quantitativeColors","darkOrdinalColors","lightOrdinalColors","sequentialScales","colorGradients","labelColor","axisColor","titleFont","gradientColorBottom","gradientColorTop","defaultColor","colorScale","chartType","mark","type","titleOffset","defaultPadding","description","disableOptions","encoding","size","legend","y","axis","label","left","right","top","bottom","font","domainColor","grid","titleFontSize","labelFontSize","labelFont","axisX","labelAngle","axisBottom","titleColor","tickColor","titlePadding","titleFontWeight","axisTop","axisLeft","axisRight","stroke","anchor","fontWeight","fontSize","offset","dx","range","heatmap","ramp","category","ordinal","symbolType","orient","symbolOpacity","direction","labelOffset","rowPadding","strokeWidth","symbolBaseFillColor","gradientLength","gradientThickness","gradientLabelOffset","titleLimit","isOrdinal","bar","discreteBandSize","fillOpacity","strokeOpacity","line","interpolate","box","median","outliers","rule","ticks","sequential","scheme","align","baseline","arc","scale","_addInteractions","_addToEncoding","appendedValues","currentData","preExistingCondition","condition","checkArray","mergeConditions","params","paramCombinations","hoverInteraction","name","select","on","clear","param","empty","selectInteraction","toggle","brushInteraction","enableLegendFiltering","fieldName","legendInteraction","fields","String","attribute","reflect","prototype","Boolean"],"mappings":"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","file":"chartElement.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nimport * as VegaEmbed from 'vega-embed';\nconst { stablePrefix: clabsPrefix } = settings;\n\n// @ts-ignore\nimport styles from './chartElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class chartElement extends LitElement {\n  static styles = styles;\n  /**\n   * Stringified JSON object defining a Vega-lite V5 chart specification. Specifications must contain $schema, data and encoding\n   */\n  @property({ type: String, attribute: 'content', reflect: true })\n  content;\n\n  /**\n   * Enable debugger to inspect spec and show error messages in the component\n   */\n  @property({ type: Boolean, attribute: 'debug-mode' })\n  debugMode = true;\n\n  /**\n   * Event listener to check if parent visibility changed\n   */\n  private intersectionObserver;\n\n  /**\n   * Event listener to check if parent visibility changed\n   */\n  private resizeObserver;\n\n  /**\n   * Valid CSS string to define chart height, applied to chart container while specification is automatically set to height=\"container\" to fill the parent container height\n   */\n  @property({ type: String, attribute: 'container-height', reflect: true })\n  containerHeight = '246px';\n\n  /**\n   * Same as container-height, a CSS string to define the width, applied to chart container\n   */\n  @property({ type: String, attribute: 'container-width', reflect: true })\n  containerWidth = '100%';\n\n  /**\n   * Extensively redefine the \"config\" field of the specification to apply Carbon Chart styling to chart defined in the specification (may override user-defined color/gradient/scale selections)\n   */\n  @property({ type: Boolean, attribute: 'carbonify', reflect: true })\n  carbonify = true;\n\n  /**\n   * Render using \"svg\" (easier to inspect in the DOM) or \"canvas\" (better performance)\n   */\n  @property({ type: String, attribute: 'render-method' })\n  renderMethod = 'canvas';\n\n  /**\n   * This value is either \"dark\" or \"light\" and displays the chart using Carbon Chart theme colors\n   */\n  @property({ type: String, attribute: 'theme' })\n  theme = 'g100';\n\n  /**\n   * Disable all chart option buttons, supercedes all other individual button options\n   */\n  @property({ type: Boolean, attribute: 'disable-options' })\n  disableOptions;\n\n  /**\n   * Disable recontext button to make chart current\n   */\n  @property({ type: Boolean, attribute: 'enable-context' })\n  enableContext;\n\n  /**\n   * Disable fullscreen button\n   */\n  @property({ type: Boolean, attribute: 'disable-fullscreen' })\n  disableFullscreen;\n\n  /**\n   * Disable image export button\n   */\n  @property({ type: Boolean, attribute: 'disable-export' })\n  disableExport;\n\n  /**\n   * Disable code inspector button\n   */\n  @property({ type: Boolean, attribute: 'disable-code-inspector' })\n  disableCodeInspector;\n\n  /**\n   * Disable editor button\n   */\n  @property({ type: Boolean, attribute: 'disable-editor' })\n  disableEditor;\n\n  /**\n   * Thumbnail mode\n   */\n  @property({ type: Boolean, attribute: 'thumbnail' })\n  thumbNail;\n\n  /**\n   * thumbnail image dataurl\n   */\n  @state()\n  exportedImageURL;\n\n  /**\n   * Enable tooltip in the chart component\n   */\n  @state()\n  enableTooltip = true;\n\n  /**\n   * Enable user-zooming in the chart component\n   */\n  @property({ type: Boolean, attribute: 'enable-zooming' })\n  enableZooming;\n\n  /**\n   * Enable filtering of data points when clicking legend\n   */\n  @property({ type: Boolean, attribute: 'enable-legend-filtering' })\n  enableLegendFiltering;\n\n  /**\n   * Enable user-brush selection to fetch groups of elements to make targeted query\n   */\n  @property({ type: Boolean, attribute: 'enable-multi-selections' })\n  enableMultiSelections = true;\n\n  /**\n   * internal brush selection value\n   */\n  @state()\n  _authorizeMultiSelection = false;\n\n  /**\n   * Enable user-brush selection to fetch groups of elements to make targeted query\n   */\n  @property({ type: Boolean, attribute: 'enable-single-selections' })\n  enableSingleSelections = true;\n\n  /**\n   * internal hover/click selection value\n   */\n  @state()\n  _authorizeSingleSelection = true;\n\n  /**\n   * errorMessage - specifies error when debugging\n   */\n  @state()\n  _errorMessage;\n\n  /**\n   * _errorLevel - specifies at which level the error occured\n   */\n  @state()\n  _errorLevel;\n\n  /**\n   * warningMessage - underlying warning to be appended to error\n   */\n  @state()\n  _warningMessage;\n\n  /**\n   * uniqueID - unique ID egenrated in this component to target correct div when rendering\n   */\n  @state()\n  _uniqueID;\n\n  /**\n   * Show a loading animation that fills the container. When providing a complete string, the chart will auto-render and this will be set to false. If streaming: raw json text data will be incrementally displayed here until complete and validated, then the chart is rendered\n   */\n  @property({ type: Boolean, attribute: 'loading' })\n  chartLoading = true;\n\n  /**\n   * _previousSpec -  original parsed Specification from content\n   */\n  @state()\n  _previousSpec;\n\n  /**\n   * _visualizationSpec -  parsed object from content string\n   */\n  @state()\n  _visualizationSpec;\n\n  /**\n   * _brokenSpec -  specification causing errors\n   */\n  @state()\n  _brokenSpec;\n\n  /**\n   * _editedSpec -  temporary spec for editing mode\n   */\n  @state()\n  _editedSpec;\n\n  /**\n   * _editedContent - temporary string spec in editing mode\n   */\n  @state()\n  _editedContent;\n\n  /**\n   * boolean to display fullscreen chart and code\n   */\n  @state()\n  showModal = false;\n\n  /**\n   * modal mode value \"code\" or \"fullscreen\" to properly seperate HTML content rendered\n   */\n  @state()\n  modalMode;\n\n  /**\n   * tooltip value from tooltip event that targets the custom div in the component\n   */\n  @state()\n  toolTipValues;\n\n  /**\n   * streaming - flag to denote streaming is enabled\n   */\n  @property({ type: Boolean, attribute: 'streaming' })\n  streaming;\n\n  /**\n   * editOriginalSpecification - choose whether to edit the inserted spec or the edited sped\n   */\n  @state()\n  editOriginalSpecification = false;\n\n  /**\n   * chartResizing - flag to notify when chart is resizing\n   */\n  @state()\n  chartResizing = false;\n\n  /**\n   * _resizeTimeout - timeout signature for resize calls\n   */\n  @state()\n  _resizeTimeout;\n\n  /**\n   * isHovered - state to detect when core chart is hovered upon\n   */\n  @state()\n  isHovered = false;\n\n  /**\n   * _latestError -  Vega erro message to display\n   */\n  @state()\n  _latestError;\n\n  /**\n   * spec type\n   */\n  @state()\n  _specType;\n\n  /** detect when component is rendered to process visualization specification object\n   */\n  firstUpdated() {\n    this.generateUniqueId();\n    this._getTheme();\n\n    if (this.thumbNail) {\n      this.disableCodeInspector = true;\n      this.disableEditor = true;\n    }\n\n    if (this.renderMethod !== 'svg' && this.renderMethod !== 'canvas') {\n      this.renderMethod = 'canvas';\n    }\n\n    this.addEventListener('wheel', this._hideTooltip);\n\n    this.intersectionObserver = new IntersectionObserver(async () => {\n      if (!this.chartLoading) {\n        await this._displayVisualization();\n      }\n    });\n    this.intersectionObserver.observe(this);\n\n    this.resizeObserver = new ResizeObserver(async () => {\n      if (this._resizeTimeout) {\n        clearTimeout(this._resizeTimeout);\n      }\n      this._resizeTimeout = await setTimeout(async () => {\n        await this._handleResize();\n      }, 200);\n    });\n\n    /*this.resizeObserver = new ResizeObserver(async () => {\n      if(!this.chartResizing){\n      clearTimeout(this._resizeTimeout);\n      this.chartResizing = true;\n      this._resizeTimeout = await setTimeout(async () => {\n        await this._handleResize();\n      }, 200);\n      }\n    });*/\n\n    this.resizeObserver.observe(this);\n\n    if (this.hasAttribute('container-width')) {\n      this.style.setProperty('--chat-chart-element-width', this.containerWidth);\n    }\n\n    if (this.hasAttribute('container-height')) {\n      this.style.setProperty(\n        '--chat-chart-element-height',\n        this.containerHeight\n      );\n    }\n\n    if (this.content) {\n      this._editedContent = this.content;\n      this._prepareVisualization();\n    }\n  }\n\n  /**\n   * _handleResize - target resize on component itself\n   */\n  async _handleResize() {\n    this.chartResizing = false;\n    this.chartLoading = true;\n    await this._displayVisualization();\n  }\n\n  /**\n   * _getTheme - find current theme by checking parent background color\n   */\n  _getTheme() {\n    if (this.parentElement instanceof HTMLElement) {\n      const parentStyle = getComputedStyle(this.parentElement);\n      const backgroundColor = parentStyle.getPropertyValue('--cds-background');\n      const darkMode =\n        backgroundColor.startsWith('#') &&\n        parseInt(backgroundColor.replace('#', ''), 16) < 0xffffff / 2;\n      this.theme = darkMode ? 'g100' : 'white';\n    }\n  }\n\n  /**\n   * Render visualization again when resizing or parameters updates\n   * @param {Boolean} updateSpecification - flag to check if specification needs to be reprepared\n   */\n  async _reRenderVisualization(updateSpecification) {\n    if (updateSpecification) {\n      this._prepareVisualization();\n    }\n  }\n\n  /** _findStructuralChanges - return all JSON changes as edit actions strings\n   * @param {Object} originalJSON - source JSON pre-edit\n   * @param {Object} updatedJSON - new spec post-edit\n   */\n  _findStructuralChanges(originalJSON, updatedJSON) {\n    const userEdits: { path: string; previousValue: any; updatedValue: any }[] =\n      [];\n    const changes = {};\n\n    /** _recursiveComparison\n     * @param {string} path - current json path\n     * @param {object} firstElement - subleaf to compare\n     * @param {object} secondElement - next subleaf to compare\n     */\n    function _recursiveComparison(path, firstElement, secondElement) {\n      if (firstElement === secondElement) {\n        return;\n      }\n      if (\n        firstElement === null ||\n        secondElement === null ||\n        typeof firstElement !== 'object' ||\n        typeof secondElement !== 'object'\n      ) {\n        changes[path] = secondElement;\n        userEdits.push({\n          path: path,\n          previousValue: firstElement,\n          updatedValue: secondElement,\n        });\n        return;\n      }\n      const keys = new Set([\n        ...Object.keys(firstElement),\n        ...Object.keys(secondElement),\n      ]);\n      for (const key of keys) {\n        const nextPath = path ? path + '.' + key : key;\n        _recursiveComparison(nextPath, firstElement[key], secondElement[key]);\n      }\n    }\n    _recursiveComparison('', originalJSON, updatedJSON);\n\n    return { changeObject: changes, actions: userEdits };\n  }\n\n  /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  async updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has('content')) {\n      this._editedContent = this.content;\n      this._errorMessage = null;\n      this._errorLevel = null;\n      this.chartLoading = true;\n      if (!this.streaming) {\n        this._prepareVisualization();\n      }\n    }\n\n    if (changedProperties.has('containerWidth')) {\n      this.style.setProperty('--chat-chart-element-width', this.containerWidth);\n      if (!this.chartLoading && this._visualizationSpec) {\n        await this._displayVisualization();\n      }\n    }\n\n    if (changedProperties.has('containerHeight')) {\n      this.style.setProperty(\n        '--chat-chart-element-height',\n        this.containerHeight\n      );\n      if (!this.chartLoading && this._visualizationSpec) {\n        await this._displayVisualization();\n      }\n    }\n\n    if (changedProperties.has('_visualizationSpec')) {\n      this._errorMessage = null;\n      this._errorLevel = null;\n      const specificationFinalizedEvent = new CustomEvent(\n        'on-chart-specification-ready',\n        {\n          detail: {\n            action: 'CHART: rendering successful',\n            uniqueID: this._uniqueID,\n            originalSpec: this.content,\n            finalizedSpec: this._visualizationSpec,\n          },\n          bubbles: true,\n          composed: true,\n        }\n      );\n      this.dispatchEvent(specificationFinalizedEvent);\n      await this._displayVisualization();\n    }\n\n    if (changedProperties.has('_errorMessage')) {\n      if (this._errorMessage !== '') {\n        const renderErrorEvent = new CustomEvent('on-chart-error', {\n          detail: {\n            action: 'CHART: error detected',\n            level: this._errorLevel,\n            uniqueID: this._uniqueID,\n            message: this._errorMessage,\n            content: this.content || 'unavailable',\n            parsedSpec: this._visualizationSpec || 'unavailable',\n          },\n          bubbles: true,\n          composed: true,\n        });\n        this.dispatchEvent(renderErrorEvent);\n      }\n    }\n\n    if (!this.chartLoading) {\n      if (\n        //changedProperties.has('containerHeight') ||\n        //changedProperties.has('containerWidth') ||\n        changedProperties.has('carbonify') ||\n        changedProperties.has('theme') ||\n        changedProperties.has('enableTooltip') ||\n        changedProperties.has('enableZooming') ||\n        changedProperties.has('enableMultiSelections') ||\n        changedProperties.has('enableLegendFiltering')\n      ) {\n        this._prepareVisualization();\n      }\n    }\n  }\n\n  /**\n   * generateUniqueId - create random string to give the target visualization div\n   */\n  generateUniqueId() {\n    const randomString: string = Math.random().toString(36).substr(2, 9);\n    this._uniqueID = randomString;\n  }\n\n  /**\n   * _buildLoader -  create html grid with fixed cell count for chart loader\n   */\n  _buildLoader() {\n    const cells = new Array(100).fill(\n      '<div class=\"' + clabsPrefix + '--chat-chart-loading-grid-cell\"></div>'\n    );\n    return cells.join('');\n  }\n\n  /**\n   * _displayVisualization - get unique tag and generate vega lite\n   * @param {string} predefinedTarget - target div to initialize chart in\n   */\n  async _displayVisualization() {\n    const targetID = this._getTargetRenderCanvasId();\n    if (!this._editedSpec) {\n      this._editedSpec = this._visualizationSpec;\n    }\n\n    const targetDiv = this.shadowRoot?.querySelector(targetID);\n    const chosenSpec =\n      this.modalMode !== 'edit' ? this._visualizationSpec : this._editedSpec;\n    if (targetDiv instanceof HTMLElement) {\n      /*const padding = chosenSpec.padding;\n      chosenSpec.height = this.shadowRoot.host.clientHeight- (padding.top + padding.bottom)*2-32;\n      chosenSpec.width = this.shadowRoot.host.clientWidth- (padding.right + padding.left)*2-32;*/\n\n      //const padding = chosenSpec.padding;\n      //chosenSpec.height = 'container'; //currentHeight;// - (padding.top + padding.bottom)*2;\n      //chosenSpec.width = 'container'; // - (padding.right + padding.left)*2;\n\n      chosenSpec.height = 'container';\n      chosenSpec.width = 'container';\n\n      chosenSpec.autosize = { resize: false };\n      if (this.thumbNail) {\n        chosenSpec.width = 400;\n        chosenSpec.height = 300;\n      }\n\n      //chosenSpec.height = currentHeight - (padding.top + padding.bottom)*2;\n      //chosenSpec.width =  currentWidth - (padding.right + padding.left)*2;\n      //console.log(\"post: h - \"+chosenSpec.height+\", w - \"+chosenSpec.width)\n\n      try {\n        let renderMode = 'svg';\n        if (this.renderMethod === 'canvas') {\n          renderMode = 'canvas';\n        }\n        await VegaEmbed.default(targetDiv, chosenSpec, {\n          actions: false,\n          hover: this.enableTooltip,\n          tooltip: {\n            /**\n             * custom tooltip renderer for vega\n             * @param {object} value - object containing speech result\n             * @param {function} sanitize - sanitize html to present malicious attacks\n             */\n            formatTooltip: (value, sanitize) => {\n              return this._toolTipBuilder(value, sanitize);\n            },\n          },\n          renderer: renderMode as 'canvas' | 'svg',\n        })\n          .then(({ view }) => {\n            this._previousSpec = this._visualizationSpec;\n            if (this._authorizeSingleSelection) {\n              try {\n                view.addSignalListener('picker', (_, value) => {\n                  this._singleDataSelected(value);\n                });\n              } catch (selectError) {\n                this._warningMessage = selectError;\n              }\n            }\n            if (this._authorizeMultiSelection) {\n              try {\n                view.addSignalListener('brush', (_, brush) => {\n                  this._multiDataSelected(brush);\n                });\n              } catch (brushError) {\n                this._warningMessage = brushError;\n              }\n            }\n            if (this.thumbNail) {\n              setTimeout(() => {\n                this._generateImage();\n              }, 200);\n            }\n          })\n          .catch(async (error) => {\n            this._latestError = error.message;\n            this._brokenSpec = this._visualizationSpec;\n            this._visualizationSpec = null;\n            //this._errorMessage = 'RENDER ERROR: ' + error.message;\n            if (this._previousSpec) {\n              this.chartLoading = true;\n              this._errorMessage = '';\n              this._errorLevel = null;\n              this._visualizationSpec = JSON.parse(\n                JSON.stringify(this._previousSpec)\n              );\n              //await this._displayVisualization(mode);\n            } else {\n              this.chartLoading = false;\n              this._errorMessage = error.message;\n              this._errorLevel = 'RENDERING';\n            }\n          });\n        this.chartLoading = false;\n      } catch (error) {\n        this._errorMessage = 'RENDER ERROR: failed to render';\n        this._errorLevel = 'RENDERING';\n      }\n    } else {\n      if (!this._latestError) {\n        this._errorLevel = 'WEB-COMPONENT';\n        this._errorMessage =\n          'CHART COMPONENT ERROR: Failed to retrieve chart container id: ' +\n          targetID;\n      } else {\n        this._errorLevel = 'WEB-COMPONENT';\n        this._errorMessage =\n          'CHART COMPONENT ERROR: [Vega]: ' + this._latestError;\n      }\n    }\n  }\n\n  /**\n   * single data selection event to send to parent for processing\n   * @param {object} data - selected points from view event\n   */\n  _singleDataSelected(data) {\n    const singleSelectionEvent = new CustomEvent('on-chart-single-selection', {\n      detail: {\n        uniqueID: this._uniqueID,\n        action: 'CHART: single data point selected',\n        selection: [data],\n      },\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(singleSelectionEvent);\n  }\n\n  /**\n   * _chartClicked - chart selection event\n   */\n  _chartClicked() {\n    const clickEvent = new CustomEvent('on-chart-clicked', {\n      detail: {\n        action: 'CHART: click event registered',\n      },\n      bubbles: true,\n      composed: true,\n    });\n    console.log(clickEvent);\n    this.dispatchEvent(clickEvent);\n  }\n\n  /**\n   * _appendToContext - send context button click event to parent\n   */\n  _appendToContext() {\n    const contextEvent = new CustomEvent('on-chart-append-context', {\n      detail: {\n        action: 'CHART: context event registered',\n      },\n      bubbles: true,\n      composed: true,\n    });\n\n    this.dispatchEvent(contextEvent);\n  }\n\n  /**\n   * _checkIfDate - check if date\n   * @param {object} intervalValue - domain to check\n   */\n  _checkIfDate(intervalValue: string | number): string | null {\n    let date: Date;\n\n    if (typeof intervalValue === 'number') {\n      if (!isNaN(intervalValue)) {\n        if (Math.abs(intervalValue) > 1000000) {\n          date = new Date(intervalValue);\n        } else if (intervalValue % 1 !== 0) {\n          return intervalValue.toFixed(3);\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else if (typeof intervalValue === 'string' && intervalValue.length > 8) {\n      date = new Date(intervalValue);\n      if (isNaN(date.getTime())) {\n        return null;\n      }\n    } else {\n      return null;\n    }\n\n    if (date instanceof Date && !isNaN(date.getTime())) {\n      return date.toLocaleDateString();\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * _formatMultiSelection - convert any selection into a readable text format\n   * @param {object} selection - dict of axis names and domains\n   */\n  _formatMultiSelection(selection) {\n    const tooltipString: string[] = [];\n    for (const domain of selection) {\n      const values = domain.values;\n      if (values.length === 2 && this._checkIfDate(values[0])) {\n        const startDate = this._checkIfDate(values[0]);\n        const endDate = this._checkIfDate(values[1]);\n        if (startDate && endDate) {\n          tooltipString.push(\n            domain.field + ': ' + startDate + ' to ' + endDate\n          );\n        } else {\n          tooltipString.push(\n            domain.field + ': ' + values[0] + ' to ' + values[1]\n          );\n        }\n      } else {\n        tooltipString.push(\n          domain.field +\n            ': ' +\n            values.slice(0, 5).join(', ') +\n            (values.length - 5 > 0\n              ? ' and ' + (values.length - 5) + ' more'\n              : '')\n        );\n      }\n    }\n    return tooltipString;\n  }\n\n  /**\n   * multi data selection event from brush to send to parent for processing\n   * @param {object} data - selected points from view event\n   */\n  _multiDataSelected(data) {\n    const selectionPayload: { field: string; values: object }[] = [];\n    for (const field in data) {\n      const selection: { field: string; values: object } = {\n        field: field,\n        values: data[field],\n      };\n      selectionPayload.push(selection);\n    }\n\n    const selectionSummary = this._formatMultiSelection(selectionPayload);\n\n    const multiSelectionEvent = new CustomEvent('on-chart-multi-selection', {\n      detail: {\n        uniqueID: this._uniqueID,\n        action: 'CHART: multiple data points selected',\n        dataEvent: data,\n        selections: selectionPayload,\n        selectionTextArray: selectionSummary,\n        selectionSummary: selectionSummary.join('\\n'),\n      },\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(multiSelectionEvent);\n  }\n\n  /**\n   * _hideTooltip - remove tooltip when scrolling\n   */\n  _hideTooltip() {\n    const tooltip = document.querySelector('#vg-tooltip-element');\n    if (tooltip instanceof HTMLElement) {\n      tooltip.innerHTML = '';\n    }\n  }\n\n  /**\n   * internal vega tooltip dom generator\n   * @param {object} value - column/value dictionary inside hovered data point\n   * @param {function} _sanitize - santization function to previous mailicious HTML\n   */\n  _toolTipBuilder(value, _sanitize) {\n    const tooltip = document.querySelector('#vg-tooltip-element');\n    if (tooltip instanceof HTMLElement) {\n      let backgroundColor = '#161616';\n      let textColor = '#f4f4f4';\n      //let titleFont = 'IBM Plex Sans, sans-serif';\n      const defaultFont = 'IBM Plex Sans Condensed, Arial, sans-serif';\n      let gridColor = '#3d3d3d';\n      if (this.theme === 'white') {\n        backgroundColor = '#ffffff';\n        textColor = '#161616';\n        //labelColor = '#777677';\n        gridColor = '#e0e0e0';\n      }\n\n      tooltip.style.color = textColor;\n      //tooltip.style.border = '1px solid '+gridColor;\n      tooltip.style.border = 'none';\n      tooltip.style.padding = '0px';\n      tooltip.style.borderRadius = '0px';\n      tooltip.style.background = backgroundColor;\n      tooltip.style.fontFamily = defaultFont;\n      //tooltip.style.height = 'auto';\n\n      let toolTipHTML =\n        '<div style=\"background:' +\n        backgroundColor +\n        '; display: flex; flex-direction: column; align-items: start; height:auto; width:100%;\">';\n      let sectionBorder = '1px solid ' + gridColor;\n      const entrySize = Object.keys(value).length;\n      let entryCount = 0;\n      for (const [key, dataValue] of Object.entries(value)) {\n        if (entryCount >= entrySize - 1) {\n          sectionBorder = 'none';\n        }\n        toolTipHTML +=\n          '<div style=\"display: flex; justify-content: space-between; align-items: center; width:100%; border-bottom: ' +\n          sectionBorder +\n          '; padding:6px; box-sizing: border-box;\">';\n        toolTipHTML +=\n          '<span style=\"text-align: left; flex:1;font-size:10px; white-space: nowrap;\">' +\n          key +\n          '</span>';\n        toolTipHTML +=\n          '<span style=\"text-align: right; flex:1;font-size:12px; white-space: nowrap; padding-left:16px;\">' +\n          dataValue +\n          '</span>';\n        toolTipHTML += '</div>';\n        entryCount++;\n      }\n      toolTipHTML += '</div>';\n      return toolTipHTML;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * _resolveLayerConfigs - search through config and apply 'share' value to force sublayers into adopting core styles\n   * @param {Object} config - vegalite styling object to be edited\n   * @param {string} layerMode - mode to assign, whether to inherit or share configs from the parent\n   **/\n  _resolveLayerConfigs(config, layerMode) {\n    let resolveValues: any = {};\n    resolveValues = this._replaceInObject(config, layerMode);\n    return resolveValues;\n  }\n\n  /**\n   * _replaceInObject - subroutine of resolvelayers, searches through leafs of config JSON and edits values inside\n   * @param {Object} object - child to be scanned and edited\n   * @param {string} value - from parent to be sent in\n   */\n  _replaceInObject(object, value) {\n    for (const key in object) {\n      if (typeof object[key] === 'object' && object[key] !== null) {\n        this._replaceInObject(object[key], value);\n      } else {\n        object[key] = value;\n      }\n    }\n  }\n\n  /**\n   * _openEditorView -\n   */\n  _openEditorView() {\n    this.showModal = true;\n    const vegaURL = 'https://vega.github.io/editor/';\n    const openNewWindow = window?.open(vegaURL, '_blank');\n    if (openNewWindow) {\n      setTimeout(() => {\n        const specPayload = this._visualizationSpec\n          ? this._visualizationSpec\n          : this._brokenSpec;\n        const payload = {\n          spec: JSON.stringify(specPayload, null, '\\t'),\n          mode: 'vega-lite',\n        };\n\n        openNewWindow.postMessage(payload, '*');\n      }, 500);\n    } else {\n      console.log('window is undefined');\n    }\n  }\n\n  /**\n   * _openFullscreenView -\n   */\n  _openFullscreenView() {\n    this.showModal = true;\n    this.modalMode = 'fullscreen';\n    this._displayVisualization();\n  }\n\n  /**\n   * closeModal - invoked by modal subcomponent when close button is clicked inside\n   */\n  closeModal() {\n    this.showModal = false;\n    this.modalMode = null;\n    this._displayVisualization();\n  }\n\n  /**\n   * _exportToImage - if canvas, get image object from data url and auto-download\n   */\n  _exportToImage() {\n    if (this.renderMethod === 'svg') {\n      this._exportSvgToImage();\n    } else {\n      window.setTimeout(async () => {\n        const targetID = this._getTargetRenderCanvasId();\n        const container = this.shadowRoot?.querySelector(targetID);\n\n        if (container instanceof HTMLElement) {\n          const canvasDiv = container?.querySelector('canvas');\n          if (canvasDiv instanceof HTMLElement) {\n            const imageUrl = canvasDiv.toDataURL('image/png');\n            const canvasDownloadLink = document.createElement('a');\n            let exportedFileName = 'chart';\n            if (this._visualizationSpec?.title?.text.trim()) {\n              exportedFileName = this._visualizationSpec?.title?.text;\n            }\n            canvasDownloadLink.download = exportedFileName + '.png';\n            canvasDownloadLink.href = imageUrl;\n            canvasDownloadLink.click();\n          }\n        }\n      }, 200);\n    }\n  }\n\n  /**\n   * _getTargetRenderCanvasId\n   */\n  _getTargetRenderCanvasId() {\n    let targetID =\n      '#' + clabsPrefix + '--chat-chart-embed-vis-' + this._uniqueID;\n\n    if (this.modalMode === 'edit') {\n      targetID =\n        '#' + clabsPrefix + '--chat-chart-editor-embed-vis-' + this._uniqueID;\n    }\n    if (this.modalMode === 'fullscreen') {\n      targetID =\n        '#' +\n        clabsPrefix +\n        '--chat-chart-fullscreen-embed-vis-' +\n        this._uniqueID;\n    }\n    return targetID;\n  }\n\n  /**\n   * _generateImage - if canvas, get image object from data url and create img tag\n   */\n  _generateImage() {\n    if (this.renderMethod === 'svg') {\n      //this._exportSvgToImage()\n    } else {\n      window.setTimeout(async () => {\n        const targetID = this._getTargetRenderCanvasId();\n        const container = this.shadowRoot?.querySelector(targetID);\n\n        if (container instanceof HTMLElement) {\n          const canvasDiv = container?.querySelector('canvas');\n          if (canvasDiv instanceof HTMLElement) {\n            this.exportedImageURL = canvasDiv.toDataURL('image/png');\n          }\n        }\n      }, 200);\n    }\n  }\n\n  /**\n   * _handleLiveRawEditorChange - handle live changes coming from code subelement being edited\n   * @param {event} event - custom codelement live change event\n   */\n  _handleLiveRawEditorChange(event) {\n    if (event?.detail?.newLineText) {\n      const previousData = this._visualizationSpec.data;\n\n      try {\n        this.chartLoading = false;\n        this._errorMessage = '';\n        this._errorLevel = null;\n        const newSpec: any = JSON.parse(event.detail.newLineText);\n        newSpec.data = previousData;\n        this.chartLoading = false;\n        this._errorMessage = '';\n        this._errorLevel = null;\n\n        //this.content = JSON.stringify(newSpec);\n        this.carbonify = false;\n        //this._prepareVisualization(newSpec)\n        this._prepareSpecification(newSpec, false, true, 0);\n        this._editedSpec = newSpec;\n        window.setTimeout(async () => {\n          await this._displayVisualization();\n        }, 200);\n      } catch (error) {\n        console.error(error);\n        this.chartLoading = true;\n        this._errorMessage = 'CHART COMPONENT ERROR: edited spec is invalid';\n        this._errorLevel = 'USER-EDIT';\n      }\n    }\n  }\n\n  /**\n   * _handleLiveCarbonEditorChange - handle live changes coming from code subelement being edited\n   * @param {event} event - custom codelement live change event\n   */\n  _handleLiveCarbonEditorChange(event) {\n    if (event?.detail?.newLineText) {\n      const previousData = this._visualizationSpec.data;\n\n      try {\n        const newSpec: any = JSON.parse(event.detail.newLineText);\n        newSpec['data'] = previousData;\n        this.chartLoading = false;\n        this._errorMessage = '';\n        this._errorLevel = null;\n        this.carbonify = false;\n\n        //this.content = JSON.stringify(newSpec);\n        //this._prepareVisualization(newSpec)\n        this._prepareSpecification(newSpec, false, true, 0);\n        //this._prepareVisualization(newSpec);\n        this._editedSpec = newSpec;\n\n        window.setTimeout(async () => {\n          await this._displayVisualization();\n        }, 200);\n      } catch (error) {\n        console.error(error);\n        this.chartLoading = true;\n        this._errorMessage = 'CHART COMPONENT ERROR: edited spec is invalid';\n        this._errorLevel = 'USER-EDIT';\n      }\n    }\n  }\n\n  /**\n   * _handleModelEditorValidation -  event from code subcomponent\n   * @param {event} event - custom event from chat code component\n   */\n  _handleCarbonEditorValidation(event) {\n    if (event?.detail?.newLineText) {\n      this._errorMessage = '';\n      this._errorLevel = null;\n      const previousData = this._visualizationSpec.data;\n      try {\n        this.modalMode = null;\n        this.showModal = false;\n        //this._visualizationSpec = JSON.parse(event.detail.newLineText);\n        //this._visualizationSpec.data = previousData;\n\n        const newSpec: any = JSON.parse(event.detail.newLineText);\n        newSpec.data = previousData;\n\n        const changes = this._findStructuralChanges(\n          this._visualizationSpec,\n          newSpec\n        );\n\n        const specificationEditedEvent = new CustomEvent(\n          'on-chart-specification-edit-validation',\n          {\n            detail: {\n              action: 'CHART: rendering successful',\n              changes: changes,\n              originalSpec: this._visualizationSpec,\n              newSpec: newSpec,\n            },\n            bubbles: true,\n            composed: true,\n          }\n        );\n\n        this._visualizationSpec = newSpec;\n        this.chartLoading = false;\n        this._errorMessage = '';\n        this._errorLevel = null;\n\n        this.dispatchEvent(specificationEditedEvent);\n\n        window.setTimeout(async () => {\n          await this._displayVisualization();\n        }, 200);\n      } catch (error) {\n        console.error(error);\n        this._errorMessage = 'CHART COMPONENT ERROR: edited spec is invalid';\n        this._errorLevel = 'WEB-COMPONENT';\n      }\n    }\n  }\n\n  /**\n   * _handleModelEditorValidation -  event from code subcomponent\n   * @param {event} event - custom event from chat code component\n   */\n  _handleOriginalEditorValidation(event) {\n    if (event?.detail?.newLineText) {\n      const previousData = this._visualizationSpec.data;\n      try {\n        const newSpec: any = JSON.parse(event.detail.newLineText);\n        newSpec.data = previousData;\n        this._editedSpec = newSpec;\n\n        this._prepareSpecification(JSON.stringify(newSpec), true, true, 0);\n\n        window.setTimeout(async () => {\n          await this._displayVisualization();\n        }, 200);\n      } catch (error) {\n        console.error(error);\n        this._errorMessage = 'CHART COMPONENT ERROR: edited spec is invalid';\n        this._errorLevel = 'USER-EDIT';\n      }\n    }\n  }\n\n  /**\n   * _openCodeView - open editor modal\n   */\n  _openCodeView() {\n    this.modalMode = 'edit';\n    this.showModal = true;\n    this._displayVisualization();\n  }\n\n  /**\n   * _handleFullScreenScroll - block scrolling beyond fullscreen\n   * @param {event} event - scroll/wheel event\n   */\n  _handleFullScreenScroll(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /**\n   * _showCarbonSpec - Code editor toggling to show post-hoc spec\n   */\n  _showCarbonSpec() {\n    this.editOriginalSpecification = false;\n  }\n\n  /**\n   * _showOriginalSpec - Code editor toggling to show original valid spec\n   */\n  _showOriginalSpec() {\n    this.editOriginalSpecification = true;\n  }\n\n  /**\n   * _handleMouseOut - see if component lost mouse content\n   */\n  _handleMouseOut() {\n    this.isHovered = false;\n  }\n\n  /**\n   * _handleMouseOut - see if component lost mouse content\n   */\n  _handleMouseOver() {\n    this.isHovered = true;\n  }\n\n  /**\n   * _exportSvgToImage - if svg, get image object from svg and auto-download\n   */\n  _exportSvgToImage() {\n    window.setTimeout(async () => {\n      const targetID = this._getTargetRenderCanvasId();\n      const container = this.shadowRoot?.querySelector(targetID);\n      if (container instanceof HTMLElement) {\n        const svgDiv = container?.querySelector('svg');\n        if (svgDiv instanceof SVGElement) {\n          const svgData = new XMLSerializer().serializeToString(svgDiv);\n          const tempCanvas = document.createElement('canvas');\n          const context = tempCanvas.getContext('2d');\n          const svgSize = svgDiv.getBoundingClientRect();\n          tempCanvas.height = svgSize.height;\n          tempCanvas.width = svgSize.width;\n\n          const tempImage = new Image();\n          /**\n           * handles the onload event when image is done rendering\n           */\n          tempImage.onload = () => {\n            context?.drawImage(tempImage, 0, 0);\n            const imageData = tempCanvas.toDataURL('image/png');\n            const canvasDownloadLink = document.createElement('a');\n            let exportedFileName = 'chart';\n            if (this._visualizationSpec?.title?.text.trim()) {\n              exportedFileName = this._visualizationSpec?.title?.text;\n            }\n            canvasDownloadLink.download = exportedFileName + '.png';\n            canvasDownloadLink.href = imageData;\n            canvasDownloadLink.click();\n          };\n          tempImage.src = 'data:image/svg+xml;base64,' + btoa(svgData);\n        }\n      }\n    }, 200);\n  }\n\n  /**\n   * _lightenSpec - remove any large data objects before rendering in code element\n   * @param {Object} specification - spec JSON to be check and lightened\n   */\n  _lightenSpec(specification) {\n    const newSpecification = JSON.parse(JSON.stringify(specification));\n    if (newSpecification?.data?.values?.length > 20) {\n      newSpecification.data = 'Dataset not rendered for performance';\n      return newSpecification;\n    } else {\n      return newSpecification;\n    }\n  }\n\n  /**\n   * prepareVisualization - Prepare and adapt Vega visualization spec to be more Carbon adjacent\n   * @param {object} premadeSpec - Vega specification sent in optionally when pre-parsed\n   */\n  _prepareVisualization(premadeSpec?: object) {\n    let spec: any = {};\n    if (!premadeSpec) {\n      try {\n        spec = JSON.parse(this.content);\n      } catch (e) {\n        this._errorMessage =\n          'CARBON CHART ERROR: JSON parse() failed, specification is not valid JSON';\n        this._errorLevel = 'JSON-PARSING';\n        return '';\n      }\n    } else {\n      spec = JSON.parse(JSON.stringify(premadeSpec));\n    }\n\n    if (!spec['$schema']) {\n      this._errorMessage =\n        'CHART COMPONENT ERROR: JSON is valid but not a valid schema, missing \"$schema\" field';\n      this._errorLevel = 'SPEC-VALIDATION';\n      return '';\n    }\n\n    if (!spec['repeat']) {\n      //spec.width = 'container';\n      //spec.height = 'container';\n    } else {\n      delete spec['height'];\n      delete spec['width'];\n    }\n\n    delete spec['height'];\n    delete spec['width'];\n    delete spec['autosize'];\n\n    let layeredSpec;\n    let repeatedSpec;\n    let plainSpec;\n    let subChartWidth;\n    let subChartHeight;\n    if ('layer' in spec) {\n      this._specType = 'layered';\n      layeredSpec = this._prepareSpecification(spec, false, true, 0);\n      /*for (const [index, subSpec] of spec['layer'].entries()) {\n        const tempSubSpec = this._prepareSpecification(JSON.parse(JSON.stringify(subSpec)), true, false, index+1);\n        delete tempSubSpec['background'];\n        delete tempSubSpec['padding'];\n        layeredSpec['layer'][index] = tempSubSpec;\n      }*/\n    } else if (spec['repeat']) {\n      this._specType = 'repeated';\n      const currentContainerWidth = this.clientWidth;\n      const currentContainerHeight = this.clientHeight;\n      repeatedSpec = this._prepareSpecification(\n        JSON.parse(JSON.stringify(spec)),\n        false,\n        true,\n        0\n      );\n      repeatedSpec['spec'] = this._prepareSpecification(\n        repeatedSpec['spec'],\n        true,\n        false,\n        0\n      );\n      if (currentContainerWidth) {\n        let rowCount;\n        let columnCount;\n        if (Array.isArray(repeatedSpec['repeat'])) {\n          columnCount = repeatedSpec.columns ? repeatedSpec.columns : 1;\n          rowCount = Math.ceil(repeatedSpec['repeat'].length / columnCount);\n        } else {\n          if (repeatedSpec['repeat']['row']) {\n            rowCount = repeatedSpec['repeat']['row'].length;\n          }\n          if (repeatedSpec['repeat']['column']) {\n            columnCount = repeatedSpec['repeat']['column'].length;\n          }\n        }\n\n        const legendHeight = 16 * 3;\n\n        const paddingOffset = { vertical: 0, horizontal: 0 };\n\n        if (repeatedSpec['padding']) {\n          paddingOffset['vertical'] =\n            repeatedSpec['padding']['top'] + repeatedSpec['padding']['bottom'];\n          paddingOffset['horizontal'] =\n            repeatedSpec['padding']['left'] + repeatedSpec['padding']['right'];\n        }\n\n        if (Array.isArray(repeatedSpec['repeat'])) {\n          //paddingOffset['horizontal']= paddingOffset['horizontal']columnCount;\n        }\n\n        //paddingOffset['horizontal'] = 120;\n        const gapSize = 17;\n\n        subChartWidth =\n          (currentContainerWidth - 48 - (columnCount + 1) * gapSize) /\n            columnCount -\n          42;\n        subChartHeight =\n          (currentContainerHeight -\n            48 -\n            legendHeight -\n            (rowCount + 1) * gapSize) /\n            rowCount -\n          42;\n      }\n\n      delete repeatedSpec['spec']['background'];\n      delete repeatedSpec['spec']['padding'];\n\n      if (subChartWidth) {\n        repeatedSpec['spec']['width'] = subChartWidth;\n      }\n      if (subChartHeight) {\n        repeatedSpec['spec']['height'] = subChartHeight;\n      }\n    } else {\n      this._specType = 'plain';\n      if (!spec['data']) {\n        plainSpec = {};\n      } else {\n        //spec, editMarks, addConfig, layerIndex\n        plainSpec = this._prepareSpecification(spec, true, true, 0);\n      }\n    }\n\n    let finalSpec;\n\n    if (spec['layer']) {\n      finalSpec = layeredSpec;\n      //finalSpec['resolve'] = this._resolveLayerConfigs(JSON.parse(JSON.stringify(finalSpec.config)), \"shared\");\n    } else if (spec['repeat']) {\n      finalSpec = repeatedSpec;\n    } else {\n      finalSpec = plainSpec;\n    }\n\n    this._visualizationSpec = finalSpec;\n    return '';\n  }\n\n  /**\n   * _prepareSpecification - edit Vega specific to change mark values and apply colors or rewrite config attribute\n   * @param {object} spec - vega sepcification JSON\n   * @param {boolean} editMarks - boolean to change mark values\n   * @param {boolean} addConfig - boolean to edit config attribute of spec with Carbon styles\n   * @param {number} layerIndex - index of layer, enabled to switch default colors and handle z-indexing\n   */\n  _prepareSpecification(spec, editMarks, addConfig, layerIndex) {\n    let ordinalColors: string[] = [];\n    let quantitativeColors: string[] = [];\n\n    const darkOrdinalColors = [\n      '#8a3ffc',\n      '#33b1ff',\n      '#007d79',\n      '#ff7eb6',\n      '#fa4d56',\n      '#fff1f1',\n      '#6fdc8c',\n      '#4589ff',\n      '#d12771',\n      '#d2a106',\n      '#08bdba',\n      '#bae6ff',\n      '#ba4e00',\n      '#d4bbff',\n    ];\n\n    const lightOrdinalColors = [\n      '#6929c4',\n      '#1192e8',\n      '#005d5d',\n      '#9f1853',\n      '#fa4d56',\n      '#570408',\n      '#198038',\n      '#002d9c',\n      '#ee538b',\n      '#b28600',\n      '#009d9a',\n      '#012749',\n      '#8a3800',\n      '#a56eff',\n    ];\n\n    const sequentialScales = [\n      [\n        '#edf5ff',\n        '#d0e2ff',\n        '#a6c8ff',\n        '#78a9ff',\n        '#4589ff',\n        '#0f62fe',\n        '#0043ce',\n        '#002d9c',\n        '#001d6c',\n        '#001141',\n      ],\n      [\n        '#f6f2ff',\n        '#e8daff',\n        '#d4bbff',\n        '#be95ff',\n        '#a56eff',\n        '#8a3ffc',\n        '#6929c4',\n        '#491d8b',\n        '#31135e',\n        '#1c0f30',\n      ],\n      [\n        '#d9fbfb',\n        '#9ef0f0',\n        '#3ddbd9',\n        '#08bdba',\n        '#009d9a',\n        '#007d79',\n        '#005d5d',\n        '#004144',\n        '#022b30',\n        '#081a1c',\n      ],\n    ];\n\n    const colorGradients = [\n      ['#001141', '#edf5ff'],\n      ['#1c0f30', '#f6f2ff'],\n      ['#1c0f30', '#e5f6ff'],\n      ['#081a1c', '#d9fbfb'],\n    ];\n\n    let backgroundColor = '#161616';\n    let gridColor = '#3d3d3d';\n    let textColor = '#f4f4f4';\n    let labelColor = '#c6c6c6';\n    let axisColor = '#6f6f6f';\n    let titleFont = 'IBM Plex Sans, sans-serif';\n    let defaultFont = 'IBM Plex Sans Condensed, Arial, sans-serif';\n    let gradientColorBottom = colorGradients[2][1];\n    let gradientColorTop = colorGradients[2][0];\n    let defaultColor = darkOrdinalColors[darkOrdinalColors.length - 1];\n\n    ordinalColors = darkOrdinalColors;\n    quantitativeColors = sequentialScales[1];\n\n    if (layerIndex) {\n      quantitativeColors = sequentialScales[2];\n      defaultColor =\n        darkOrdinalColors[\n          layerIndex < darkOrdinalColors.length\n            ? layerIndex\n            : layerIndex % darkOrdinalColors.length\n        ];\n    }\n\n    if (this.theme == 'white') {\n      backgroundColor = '#ffffff';\n      gridColor = '#e0e0e0';\n      textColor = '#161616';\n      labelColor = '#777677';\n      axisColor = '#8c8c8c';\n      titleFont = 'IBM Plex Sans, sans-serif';\n      defaultFont = 'IBM Plex Sans Condensed, Arial, sans-serif';\n      gradientColorBottom = colorGradients[1][1];\n      gradientColorTop = colorGradients[1][0];\n      defaultColor = lightOrdinalColors[lightOrdinalColors.length - 1];\n\n      ordinalColors = lightOrdinalColors;\n      quantitativeColors = sequentialScales[1];\n\n      if (layerIndex) {\n        quantitativeColors = sequentialScales[2];\n        defaultColor =\n          lightOrdinalColors[\n            layerIndex < lightOrdinalColors.length\n              ? layerIndex\n              : layerIndex % lightOrdinalColors.length\n          ];\n      }\n    }\n\n    if (this.carbonify) {\n      spec.background = backgroundColor;\n\n      let colorScale: any[] = [];\n\n      let chartType = '';\n      if (typeof spec.mark === 'string') {\n        chartType = spec.mark;\n        spec.mark = { type: chartType };\n      } else if (typeof spec.mark === 'object' && 'type' in spec.mark) {\n        chartType = spec.mark.type;\n      } else if (spec['spec']) {\n        if (typeof spec.spec?.mark === 'string') {\n          chartType = spec.spec?.mark;\n          spec['spec'].mark = { type: chartType };\n        } else {\n          if (\n            typeof spec['spec'].mark === 'object' &&\n            'type' in spec['spec'].mark\n          ) {\n            chartType = spec['spec'].mark.type;\n          }\n        }\n      }\n      let titleOffset = -8;\n      const defaultPadding = 16;\n\n      if (spec.description && !spec.title) {\n        spec.title = spec.description;\n        delete spec['description'];\n      }\n\n      if (spec.title) {\n        if (typeof spec.title === 'string') {\n          spec.title = { text: spec.title };\n        }\n      } else if (addConfig && !this.disableOptions) {\n        spec.title = { text: '   ' };\n      }\n\n      if (spec?.encoding?.size?.legend) {\n        spec.encoding.size.legend = null;\n      }\n\n      if (spec?.mark?.type === 'point') {\n        spec.mark.type = 'circle';\n      }\n\n      if (spec.encoding?.y?.axis?.label || spec.encoding?.y?.field) {\n        titleOffset = 2;\n        spec['padding'] = {\n          left: defaultPadding,\n          right: 24,\n          top: defaultPadding,\n          bottom: defaultPadding,\n        };\n      } else {\n        spec['padding'] = {\n          left: defaultPadding,\n          right: defaultPadding,\n          top: defaultPadding,\n          bottom: defaultPadding,\n        };\n      }\n\n      if (addConfig) {\n        spec['config'] = {\n          font: defaultFont,\n          axis: {\n            domainColor: gridColor,\n            grid: true,\n            gridColor: gridColor,\n            titleFontSize: 13,\n            labelFontSize: 11,\n            labelColor: labelColor,\n            labelFont: defaultFont,\n            titleFont: defaultFont,\n          },\n          axisX: {\n            labelAngle: 0,\n          },\n          mark: { tooltip: this.enableTooltip },\n          axisBottom: {\n            domainColor: axisColor,\n            labelColor: labelColor,\n            titleColor: textColor,\n            tickColor: backgroundColor,\n            titlePadding: 12,\n            titleFont: defaultFont,\n            titleFontWeight: 400,\n          },\n          axisTop: {\n            domainColor: gridColor,\n            labelColor: labelColor,\n            titleColor: textColor,\n            tickColor: backgroundColor,\n            titlePadding: 10,\n            titleFont: defaultFont,\n            titleFontWeight: 400,\n          },\n          axisLeft: {\n            domainColor: axisColor,\n            labelColor: labelColor,\n            titleColor: textColor,\n            tickColor: backgroundColor,\n            titlePadding: 4,\n            titleFont: defaultFont,\n            titleFontWeight: 400,\n          },\n          axisRight: {\n            domainColor: gridColor,\n            labelColor: labelColor,\n            titleColor: textColor,\n            tickColor: backgroundColor,\n            titlePadding: 10,\n            titleFont: defaultFont,\n            titleFontWeight: 400,\n          },\n          view: {\n            stroke: gridColor,\n          },\n          title: {\n            font: titleFont,\n            color: textColor,\n            anchor: 'start',\n            fontWeight: 500,\n            fontSize: 16,\n            offset: 16,\n            dx: titleOffset,\n          },\n          range: {\n            heatmap: [gradientColorBottom, gradientColorTop],\n            ramp: [gradientColorBottom, gradientColorTop],\n            category: ordinalColors,\n            ordinal: ordinalColors,\n          },\n          legend: {\n            title: null,\n            symbolType: 'square',\n            orient: 'bottom',\n            anchor: 'start',\n            symbolOpacity: 1,\n            direction: 'horizontal',\n            titleColor: textColor,\n            labelColor: labelColor,\n            titleFont: defaultFont,\n            labelFont: defaultFont,\n            labelOffset: 4,\n            rowPadding: 8,\n            titleFontSize: 11,\n            labelFontSize: 12, //fillOpacity: 1,\n            strokeWidth: 1, //fontWeight: 'bold',\n            offset: 20,\n            symbolBaseFillColor: null,\n            gradientLength: 246,\n            gradientThickness: 8,\n            gradientLabelOffset: 8,\n          },\n        };\n\n        spec['config'].axis.titleLimit = 100; //Math.min(spec.height,spec.width)\n      }\n\n      this._authorizeSingleSelection = false;\n      this._authorizeMultiSelection = false;\n      let isOrdinal: boolean;\n      switch (chartType) {\n        case 'bar':\n          isOrdinal = false;\n          if (spec.config) {\n            spec.config.bar = {\n              discreteBandSize: 12,\n            };\n          }\n          break;\n        case 'scatter':\n          isOrdinal = false;\n          break;\n        case 'circle':\n        case 'point':\n          isOrdinal = false;\n          if (spec['config']) {\n            spec['config'][chartType] = {\n              fillOpacity: 1.0,\n              size: 40,\n              strokeOpacity: 1.0,\n              strokeWidth: 1.0,\n            };\n          }\n          isOrdinal = false;\n          break;\n        case 'square':\n          isOrdinal = false;\n          this._authorizeMultiSelection = false;\n          break;\n        case 'tick':\n          isOrdinal = false;\n          this._authorizeMultiSelection = false;\n          break;\n        case 'line':\n          isOrdinal = false;\n          spec.config.line = { interpolate: 'monotone' };\n          break;\n        case 'text':\n          isOrdinal = false;\n          this._authorizeMultiSelection = false;\n          //spec['config']['text'] = { strokeColor: textColor };\n          break;\n        case 'boxplot':\n          isOrdinal = false;\n          spec.config['boxplot'] = {\n            box: {\n              fill: defaultColor,\n              fillOpacity: 0.3,\n              stroke: defaultColor,\n              strokeOpacity: 1,\n            },\n            median: {\n              stroke: defaultColor,\n              strokeWidth: 2,\n            },\n            outliers: {\n              fill: 'white',\n              fillOpacity: 1,\n              stroke: 'yellow',\n              strokeOpacity: 1,\n            },\n            rule: { stroke: defaultColor, strokeOpacity: 1, strokeWidth: 1 },\n            ticks: { stroke: defaultColor, strokeOpacity: 1, strokeWidth: 1 },\n          };\n          this._authorizeSingleSelection = false;\n          this._authorizeMultiSelection = false;\n          break;\n        case 'area':\n          isOrdinal = false;\n          break;\n        case 'rule':\n          isOrdinal = false;\n          this._authorizeMultiSelection = false;\n          break;\n        case 'geoshape':\n          isOrdinal = true;\n          spec['config']['axis']['grid'] = false;\n          spec.config.range = spec.config.range || {};\n          spec.config.range.sequential = spec.config.range.sequential || {};\n          spec.config.range.sequential.scheme = [\n            gradientColorBottom,\n            gradientColorTop,\n          ];\n          /*if(!spec['view']){\n            spec['view'] = {\"padding\":{}}\n          }\n          spec['view']['padding'] = {\n            top: 124,\n            bottom: 124,\n            left:0,\n            right:0\n          };*/\n          this._authorizeMultiSelection = false;\n          break;\n        case 'image':\n          isOrdinal = false;\n          this._authorizeMultiSelection = false;\n          break;\n        case 'trail':\n          isOrdinal = false;\n          this._authorizeMultiSelection = false;\n          break;\n        case 'rect':\n          isOrdinal = true;\n          spec['config']['axis']['grid'] = false;\n          spec['config']['rect'] = { stroke: backgroundColor };\n          break;\n        case 'arc':\n          if (spec['mark']) {\n            //spec['mark']['labels'] = true;\n            if (spec['mark']['innerRadius'] > 0) {\n              //spec['mark']['innerRadius'] = Math.round(this.clientHeight*0.6*0.7);\n              //spec['mark']['outerRadius'] = Math.round(this.clientHeight*0.6);\n              spec['mark']['outerRadius'] = spec['mark']['innerRadius'] * 1.2;\n            }\n          }\n          if (!spec['encoding']) {\n            spec['encoding'] = {};\n          }\n          if (!spec['encoding']['value']) {\n            spec['encoding']['value'] = {};\n          }\n          if (!spec['encoding']['value']['label']) {\n            spec['encoding']['value']['label'] = {\n              align: 'center',\n              baseline: 'middle',\n              fontSize: 12,\n            };\n          }\n          spec.config.arc = {\n            stroke: gridColor,\n            strokeWidth: 1,\n          };\n          isOrdinal = false;\n          this._authorizeMultiSelection = false;\n          break;\n        default:\n          isOrdinal = false;\n          this._authorizeMultiSelection = false;\n          break;\n      }\n\n      this._authorizeSingleSelection =\n        this._authorizeSingleSelection && this.enableSingleSelections;\n      this._authorizeMultiSelection =\n        this._authorizeMultiSelection && this.enableMultiSelections;\n\n      if (!isOrdinal) {\n        colorScale = ordinalColors;\n      } else {\n        colorScale = quantitativeColors;\n      }\n\n      if (editMarks) {\n        if (!spec.encoding) {\n          spec.encoding = {};\n        }\n\n        if (spec.encoding.color) {\n          if (spec.encoding.color.field) {\n            spec.encoding.color.scale = { range: colorScale };\n          } else if (spec.encoding.color.value) {\n            spec.encoding.color.value = defaultColor;\n          }\n        } else {\n          spec.encoding.color = {\n            scale: { range: colorScale },\n            value: defaultColor,\n          };\n        }\n        delete spec.encoding.color.legend;\n\n        this._addInteractions(spec, 'point');\n      }\n    }\n\n    return spec;\n  }\n  /**\n   * _addToEncoding - modify encoding values without calling an empty field or overwriting predefined values\n   * @param {object} spec - specification JSON to edit\n   * @param {string} field - encoding field name\n   * @param {object} appendedValues - new styling/behavior to append\n   */\n  _addToEncoding(spec, field, appendedValues) {\n    const currentData = spec.encoding[field] || {};\n    const preExistingCondition = currentData.condition;\n    const checkArray = Array.isArray(preExistingCondition);\n    const mergeConditions = preExistingCondition\n      ? checkArray\n        ? preExistingCondition\n        : [preExistingCondition]\n      : [];\n    spec.encoding[field] = {\n      ...currentData,\n      ...appendedValues,\n      condition: mergeConditions,\n    };\n  }\n\n  /**\n   * _addInteractions - modify encoding, selection and signals to apply interactions (zoom, filtering, brush, hover, click)\n   * @param {object} spec - specification JSON to edit\n   * @param {string} chartType - mark found in spec denoting chart type to dictate/remove custom behavior\n   */\n  _addInteractions(spec, chartType) {\n    if (!this.enableMultiSelections) {\n      this._authorizeMultiSelection = false;\n    }\n    const params: { name: string; select: object }[] = [];\n    const paramCombinations: {\n      param: string;\n      empty: boolean;\n      value: number;\n    }[] = [];\n\n    if (this._authorizeSingleSelection) {\n      const hoverInteraction: { name: string; select: object } = {\n        name: 'hover',\n        select: { type: chartType, on: 'mouseover', clear: 'mouseout' },\n      };\n      params.push(hoverInteraction);\n      paramCombinations.push({ param: 'hover', empty: false, value: 1 });\n\n      //this._addToEncoding(spec, \"opacity\", {condition: [{selection: \"hover\", value:1}]});\n      const selectInteraction: { name: string; select: object } = {\n        name: 'picker',\n        select: { type: chartType, toggle: true },\n      };\n      params.push(selectInteraction);\n      //this._addToEncoding(spec, \"color\", { condition: [{selection: \"picker\", value: \"red\"}]})\n      paramCombinations.push({ param: 'picker', empty: false, value: 1 });\n    }\n\n    if (this._authorizeMultiSelection) {\n      const brushInteraction: { name: string; select: object } = {\n        name: 'brush',\n        select: { type: 'interval' },\n      };\n      params.push(brushInteraction);\n      paramCombinations.push({ param: 'brush', empty: false, value: 1 });\n    }\n\n    if (this.enableLegendFiltering) {\n      if (spec.encoding?.color?.field) {\n        const fieldName = spec.encoding?.color?.field;\n        const legendInteraction: { name: string; select: object } = {\n          name: 'legendFilter',\n          //bind: { legend: 'color' },\n          select: { type: chartType, fields: [fieldName] },\n        };\n        params.push(legendInteraction);\n        //paramCombinations.push({param: \"legendFilter\", value:1})\n\n        //this._addToEncoding(spec, \"opacity\", {condition: [{selection: \"legendFilter\",value:1}]})\n      }\n    }\n\n    if (params.length > 0) {\n      spec.params = spec.params || [];\n      spec.params = [...spec.params, ...params];\n    }\n\n    //this._addToEncoding(spec, \"opacity\", {condition: conditions, value:0.3})\n\n    if (paramCombinations.length > 0) {\n      //const internalTesting = paramCombinations.map(param => `{\"test\": \"`+param.param+`_isActive\", \"value\": 1 }`).join(' || ')\n      //const internalTesting = paramCombinations.map(param => param.param+`_isActive`).join(' || ')\n      //console.log(interactionConditions)\n      /*const conditions =\n        (spec.encoding['opacity'] = {\n          condition: paramCombinations,\n          value: 0.6,\n        });*/\n      spec.encoding['opacity'] = {\n        condition: paramCombinations,\n        value: 0.85,\n      };\n      //this._addToEncoding(spec, \"opacity\", {condition: interactionConditions, value:0.3})\n    } else {\n      //spec.encoding[\"opacity\"] = {value:1.0}\n    }\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nimport * as VegaEmbed from 'vega-embed';\nconst { stablePrefix: clabsPrefix } = settings;\n// @ts-ignore\nimport styles from './chartElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass chartElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Enable debugger to inspect spec and show error messages in the component\n         */\n        this.debugMode = true;\n        /**\n         * Valid CSS string to define chart height, applied to chart container while specification is automatically set to height=\"container\" to fill the parent container height\n         */\n        this.containerHeight = '246px';\n        /**\n         * Same as container-height, a CSS string to define the width, applied to chart container\n         */\n        this.containerWidth = '100%';\n        /**\n         * Extensively redefine the \"config\" field of the specification to apply Carbon Chart styling to chart defined in the specification (may override user-defined color/gradient/scale selections)\n         */\n        this.carbonify = true;\n        /**\n         * Render using \"svg\" (easier to inspect in the DOM) or \"canvas\" (better performance)\n         */\n        this.renderMethod = 'canvas';\n        /**\n         * This value is either \"dark\" or \"light\" and displays the chart using Carbon Chart theme colors\n         */\n        this.theme = 'g100';\n        /**\n         * Enable tooltip in the chart component\n         */\n        this.enableTooltip = true;\n        /**\n         * Enable user-brush selection to fetch groups of elements to make targeted query\n         */\n        this.enableMultiSelections = true;\n        /**\n         * internal brush selection value\n         */\n        this._authorizeMultiSelection = false;\n        /**\n         * Enable user-brush selection to fetch groups of elements to make targeted query\n         */\n        this.enableSingleSelections = true;\n        /**\n         * internal hover/click selection value\n         */\n        this._authorizeSingleSelection = true;\n        /**\n         * Show a loading animation that fills the container. When providing a complete string, the chart will auto-render and this will be set to false. If streaming: raw json text data will be incrementally displayed here until complete and validated, then the chart is rendered\n         */\n        this.chartLoading = true;\n        /**\n         * boolean to display fullscreen chart and code\n         */\n        this.showModal = false;\n        /**\n         * editOriginalSpecification - choose whether to edit the inserted spec or the edited sped\n         */\n        this.editOriginalSpecification = false;\n        /**\n         * chartResizing - flag to notify when chart is resizing\n         */\n        this.chartResizing = false;\n        /**\n         * isHovered - state to detect when core chart is hovered upon\n         */\n        this.isHovered = false;\n    }\n    /** detect when component is rendered to process visualization specification object\n     */\n    firstUpdated() {\n        this.generateUniqueId();\n        this._getTheme();\n        if (this.thumbNail) {\n            this.disableCodeInspector = true;\n            this.disableEditor = true;\n        }\n        if (this.renderMethod !== 'svg' && this.renderMethod !== 'canvas') {\n            this.renderMethod = 'canvas';\n        }\n        this.addEventListener('wheel', this._hideTooltip);\n        this.intersectionObserver = new IntersectionObserver(async () => {\n            if (!this.chartLoading) {\n                await this._displayVisualization();\n            }\n        });\n        this.intersectionObserver.observe(this);\n        this.resizeObserver = new ResizeObserver(async () => {\n            if (this._resizeTimeout) {\n                clearTimeout(this._resizeTimeout);\n            }\n            this._resizeTimeout = await setTimeout(async () => {\n                await this._handleResize();\n            }, 200);\n        });\n        /*this.resizeObserver = new ResizeObserver(async () => {\n          if(!this.chartResizing){\n          clearTimeout(this._resizeTimeout);\n          this.chartResizing = true;\n          this._resizeTimeout = await setTimeout(async () => {\n            await this._handleResize();\n          }, 200);\n          }\n        });*/\n        this.resizeObserver.observe(this);\n        if (this.hasAttribute('container-width')) {\n            this.style.setProperty('--chat-chart-element-width', this.containerWidth);\n        }\n        if (this.hasAttribute('container-height')) {\n            this.style.setProperty('--chat-chart-element-height', this.containerHeight);\n        }\n        if (this.content) {\n            this._editedContent = this.content;\n            this._prepareVisualization();\n        }\n    }\n    /**\n     * _handleResize - target resize on component itself\n     */\n    async _handleResize() {\n        this.chartResizing = false;\n        this.chartLoading = true;\n        await this._displayVisualization();\n    }\n    /**\n     * _getTheme - find current theme by checking parent background color\n     */\n    _getTheme() {\n        if (this.parentElement instanceof HTMLElement) {\n            const parentStyle = getComputedStyle(this.parentElement);\n            const backgroundColor = parentStyle.getPropertyValue('--cds-background');\n            const darkMode = backgroundColor.startsWith('#') &&\n                parseInt(backgroundColor.replace('#', ''), 16) < 0xffffff / 2;\n            this.theme = darkMode ? 'g100' : 'white';\n        }\n    }\n    /**\n     * Render visualization again when resizing or parameters updates\n     * @param {Boolean} updateSpecification - flag to check if specification needs to be reprepared\n     */\n    async _reRenderVisualization(updateSpecification) {\n        if (updateSpecification) {\n            this._prepareVisualization();\n        }\n    }\n    /** _findStructuralChanges - return all JSON changes as edit actions strings\n     * @param {Object} originalJSON - source JSON pre-edit\n     * @param {Object} updatedJSON - new spec post-edit\n     */\n    _findStructuralChanges(originalJSON, updatedJSON) {\n        const userEdits = [];\n        const changes = {};\n        /** _recursiveComparison\n         * @param {string} path - current json path\n         * @param {object} firstElement - subleaf to compare\n         * @param {object} secondElement - next subleaf to compare\n         */\n        function _recursiveComparison(path, firstElement, secondElement) {\n            if (firstElement === secondElement) {\n                return;\n            }\n            if (firstElement === null ||\n                secondElement === null ||\n                typeof firstElement !== 'object' ||\n                typeof secondElement !== 'object') {\n                changes[path] = secondElement;\n                userEdits.push({\n                    path: path,\n                    previousValue: firstElement,\n                    updatedValue: secondElement,\n                });\n                return;\n            }\n            const keys = new Set([\n                ...Object.keys(firstElement),\n                ...Object.keys(secondElement),\n            ]);\n            for (const key of keys) {\n                const nextPath = path ? path + '.' + key : key;\n                _recursiveComparison(nextPath, firstElement[key], secondElement[key]);\n            }\n        }\n        _recursiveComparison('', originalJSON, updatedJSON);\n        return { changeObject: changes, actions: userEdits };\n    }\n    /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    async updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('content')) {\n            this._editedContent = this.content;\n            this._errorMessage = null;\n            this._errorLevel = null;\n            this.chartLoading = true;\n            if (!this.streaming) {\n                this._prepareVisualization();\n            }\n        }\n        if (changedProperties.has('containerWidth')) {\n            this.style.setProperty('--chat-chart-element-width', this.containerWidth);\n            if (!this.chartLoading && this._visualizationSpec) {\n                await this._displayVisualization();\n            }\n        }\n        if (changedProperties.has('containerHeight')) {\n            this.style.setProperty('--chat-chart-element-height', this.containerHeight);\n            if (!this.chartLoading && this._visualizationSpec) {\n                await this._displayVisualization();\n            }\n        }\n        if (changedProperties.has('_visualizationSpec')) {\n            this._errorMessage = null;\n            this._errorLevel = null;\n            const specificationFinalizedEvent = new CustomEvent('on-chart-specification-ready', {\n                detail: {\n                    action: 'CHART: rendering successful',\n                    uniqueID: this._uniqueID,\n                    originalSpec: this.content,\n                    finalizedSpec: this._visualizationSpec,\n                },\n                bubbles: true,\n                composed: true,\n            });\n            this.dispatchEvent(specificationFinalizedEvent);\n            await this._displayVisualization();\n        }\n        if (changedProperties.has('_errorMessage')) {\n            if (this._errorMessage !== '') {\n                const renderErrorEvent = new CustomEvent('on-chart-error', {\n                    detail: {\n                        action: 'CHART: error detected',\n                        level: this._errorLevel,\n                        uniqueID: this._uniqueID,\n                        message: this._errorMessage,\n                        content: this.content || 'unavailable',\n                        parsedSpec: this._visualizationSpec || 'unavailable',\n                    },\n                    bubbles: true,\n                    composed: true,\n                });\n                this.dispatchEvent(renderErrorEvent);\n            }\n        }\n        if (!this.chartLoading) {\n            if (\n            //changedProperties.has('containerHeight') ||\n            //changedProperties.has('containerWidth') ||\n            changedProperties.has('carbonify') ||\n                changedProperties.has('theme') ||\n                changedProperties.has('enableTooltip') ||\n                changedProperties.has('enableZooming') ||\n                changedProperties.has('enableMultiSelections') ||\n                changedProperties.has('enableLegendFiltering')) {\n                this._prepareVisualization();\n            }\n        }\n    }\n    /**\n     * generateUniqueId - create random string to give the target visualization div\n     */\n    generateUniqueId() {\n        const randomString = Math.random().toString(36).substr(2, 9);\n        this._uniqueID = randomString;\n    }\n    /**\n     * _buildLoader -  create html grid with fixed cell count for chart loader\n     */\n    _buildLoader() {\n        const cells = new Array(100).fill('<div class=\"' + clabsPrefix + '--chat-chart-loading-grid-cell\"></div>');\n        return cells.join('');\n    }\n    /**\n     * _displayVisualization - get unique tag and generate vega lite\n     * @param {string} predefinedTarget - target div to initialize chart in\n     */\n    async _displayVisualization() {\n        var _a;\n        const targetID = this._getTargetRenderCanvasId();\n        if (!this._editedSpec) {\n            this._editedSpec = this._visualizationSpec;\n        }\n        const targetDiv = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(targetID);\n        const chosenSpec = this.modalMode !== 'edit' ? this._visualizationSpec : this._editedSpec;\n        if (targetDiv instanceof HTMLElement) {\n            /*const padding = chosenSpec.padding;\n            chosenSpec.height = this.shadowRoot.host.clientHeight- (padding.top + padding.bottom)*2-32;\n            chosenSpec.width = this.shadowRoot.host.clientWidth- (padding.right + padding.left)*2-32;*/\n            //const padding = chosenSpec.padding;\n            //chosenSpec.height = 'container'; //currentHeight;// - (padding.top + padding.bottom)*2;\n            //chosenSpec.width = 'container'; // - (padding.right + padding.left)*2;\n            chosenSpec.height = 'container';\n            chosenSpec.width = 'container';\n            chosenSpec.autosize = { resize: false };\n            if (this.thumbNail) {\n                chosenSpec.width = 400;\n                chosenSpec.height = 300;\n            }\n            //chosenSpec.height = currentHeight - (padding.top + padding.bottom)*2;\n            //chosenSpec.width =  currentWidth - (padding.right + padding.left)*2;\n            //console.log(\"post: h - \"+chosenSpec.height+\", w - \"+chosenSpec.width)\n            try {\n                let renderMode = 'svg';\n                if (this.renderMethod === 'canvas') {\n                    renderMode = 'canvas';\n                }\n                await VegaEmbed.default(targetDiv, chosenSpec, {\n                    actions: false,\n                    hover: this.enableTooltip,\n                    tooltip: {\n                        /**\n                         * custom tooltip renderer for vega\n                         * @param {object} value - object containing speech result\n                         * @param {function} sanitize - sanitize html to present malicious attacks\n                         */\n                        formatTooltip: (value, sanitize) => {\n                            return this._toolTipBuilder(value, sanitize);\n                        },\n                    },\n                    renderer: renderMode,\n                })\n                    .then(({ view }) => {\n                    this._previousSpec = this._visualizationSpec;\n                    if (this._authorizeSingleSelection) {\n                        try {\n                            view.addSignalListener('picker', (_, value) => {\n                                this._singleDataSelected(value);\n                            });\n                        }\n                        catch (selectError) {\n                            this._warningMessage = selectError;\n                        }\n                    }\n                    if (this._authorizeMultiSelection) {\n                        try {\n                            view.addSignalListener('brush', (_, brush) => {\n                                this._multiDataSelected(brush);\n                            });\n                        }\n                        catch (brushError) {\n                            this._warningMessage = brushError;\n                        }\n                    }\n                    if (this.thumbNail) {\n                        setTimeout(() => {\n                            this._generateImage();\n                        }, 200);\n                    }\n                })\n                    .catch(async (error) => {\n                    this._latestError = error.message;\n                    this._brokenSpec = this._visualizationSpec;\n                    this._visualizationSpec = null;\n                    //this._errorMessage = 'RENDER ERROR: ' + error.message;\n                    if (this._previousSpec) {\n                        this.chartLoading = true;\n                        this._errorMessage = '';\n                        this._errorLevel = null;\n                        this._visualizationSpec = JSON.parse(JSON.stringify(this._previousSpec));\n                        //await this._displayVisualization(mode);\n                    }\n                    else {\n                        this.chartLoading = false;\n                        this._errorMessage = error.message;\n                        this._errorLevel = 'RENDERING';\n                    }\n                });\n                this.chartLoading = false;\n            }\n            catch (error) {\n                this._errorMessage = 'RENDER ERROR: failed to render';\n                this._errorLevel = 'RENDERING';\n            }\n        }\n        else {\n            if (!this._latestError) {\n                this._errorLevel = 'WEB-COMPONENT';\n                this._errorMessage =\n                    'CHART COMPONENT ERROR: Failed to retrieve chart container id: ' +\n                        targetID;\n            }\n            else {\n                this._errorLevel = 'WEB-COMPONENT';\n                this._errorMessage =\n                    'CHART COMPONENT ERROR: [Vega]: ' + this._latestError;\n            }\n        }\n    }\n    /**\n     * single data selection event to send to parent for processing\n     * @param {object} data - selected points from view event\n     */\n    _singleDataSelected(data) {\n        const singleSelectionEvent = new CustomEvent('on-chart-single-selection', {\n            detail: {\n                uniqueID: this._uniqueID,\n                action: 'CHART: single data point selected',\n                selection: [data],\n            },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(singleSelectionEvent);\n    }\n    /**\n     * _chartClicked - chart selection event\n     */\n    _chartClicked() {\n        const clickEvent = new CustomEvent('on-chart-clicked', {\n            detail: {\n                action: 'CHART: click event registered',\n            },\n            bubbles: true,\n            composed: true,\n        });\n        console.log(clickEvent);\n        this.dispatchEvent(clickEvent);\n    }\n    /**\n     * _appendToContext - send context button click event to parent\n     */\n    _appendToContext() {\n        const contextEvent = new CustomEvent('on-chart-append-context', {\n            detail: {\n                action: 'CHART: context event registered',\n            },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(contextEvent);\n    }\n    /**\n     * _checkIfDate - check if date\n     * @param {object} intervalValue - domain to check\n     */\n    _checkIfDate(intervalValue) {\n        let date;\n        if (typeof intervalValue === 'number') {\n            if (!isNaN(intervalValue)) {\n                if (Math.abs(intervalValue) > 1000000) {\n                    date = new Date(intervalValue);\n                }\n                else if (intervalValue % 1 !== 0) {\n                    return intervalValue.toFixed(3);\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        else if (typeof intervalValue === 'string' && intervalValue.length > 8) {\n            date = new Date(intervalValue);\n            if (isNaN(date.getTime())) {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n        if (date instanceof Date && !isNaN(date.getTime())) {\n            return date.toLocaleDateString();\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * _formatMultiSelection - convert any selection into a readable text format\n     * @param {object} selection - dict of axis names and domains\n     */\n    _formatMultiSelection(selection) {\n        const tooltipString = [];\n        for (const domain of selection) {\n            const values = domain.values;\n            if (values.length === 2 && this._checkIfDate(values[0])) {\n                const startDate = this._checkIfDate(values[0]);\n                const endDate = this._checkIfDate(values[1]);\n                if (startDate && endDate) {\n                    tooltipString.push(domain.field + ': ' + startDate + ' to ' + endDate);\n                }\n                else {\n                    tooltipString.push(domain.field + ': ' + values[0] + ' to ' + values[1]);\n                }\n            }\n            else {\n                tooltipString.push(domain.field +\n                    ': ' +\n                    values.slice(0, 5).join(', ') +\n                    (values.length - 5 > 0\n                        ? ' and ' + (values.length - 5) + ' more'\n                        : ''));\n            }\n        }\n        return tooltipString;\n    }\n    /**\n     * multi data selection event from brush to send to parent for processing\n     * @param {object} data - selected points from view event\n     */\n    _multiDataSelected(data) {\n        const selectionPayload = [];\n        for (const field in data) {\n            const selection = {\n                field: field,\n                values: data[field],\n            };\n            selectionPayload.push(selection);\n        }\n        const selectionSummary = this._formatMultiSelection(selectionPayload);\n        const multiSelectionEvent = new CustomEvent('on-chart-multi-selection', {\n            detail: {\n                uniqueID: this._uniqueID,\n                action: 'CHART: multiple data points selected',\n                dataEvent: data,\n                selections: selectionPayload,\n                selectionTextArray: selectionSummary,\n                selectionSummary: selectionSummary.join('\\n'),\n            },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(multiSelectionEvent);\n    }\n    /**\n     * _hideTooltip - remove tooltip when scrolling\n     */\n    _hideTooltip() {\n        const tooltip = document.querySelector('#vg-tooltip-element');\n        if (tooltip instanceof HTMLElement) {\n            tooltip.innerHTML = '';\n        }\n    }\n    /**\n     * internal vega tooltip dom generator\n     * @param {object} value - column/value dictionary inside hovered data point\n     * @param {function} _sanitize - santization function to previous mailicious HTML\n     */\n    _toolTipBuilder(value, _sanitize) {\n        const tooltip = document.querySelector('#vg-tooltip-element');\n        if (tooltip instanceof HTMLElement) {\n            let backgroundColor = '#161616';\n            let textColor = '#f4f4f4';\n            //let titleFont = 'IBM Plex Sans, sans-serif';\n            const defaultFont = 'IBM Plex Sans Condensed, Arial, sans-serif';\n            let gridColor = '#3d3d3d';\n            if (this.theme === 'white') {\n                backgroundColor = '#ffffff';\n                textColor = '#161616';\n                //labelColor = '#777677';\n                gridColor = '#e0e0e0';\n            }\n            tooltip.style.color = textColor;\n            //tooltip.style.border = '1px solid '+gridColor;\n            tooltip.style.border = 'none';\n            tooltip.style.padding = '0px';\n            tooltip.style.borderRadius = '0px';\n            tooltip.style.background = backgroundColor;\n            tooltip.style.fontFamily = defaultFont;\n            //tooltip.style.height = 'auto';\n            let toolTipHTML = '<div style=\"background:' +\n                backgroundColor +\n                '; display: flex; flex-direction: column; align-items: start; height:auto; width:100%;\">';\n            let sectionBorder = '1px solid ' + gridColor;\n            const entrySize = Object.keys(value).length;\n            let entryCount = 0;\n            for (const [key, dataValue] of Object.entries(value)) {\n                if (entryCount >= entrySize - 1) {\n                    sectionBorder = 'none';\n                }\n                toolTipHTML +=\n                    '<div style=\"display: flex; justify-content: space-between; align-items: center; width:100%; border-bottom: ' +\n                        sectionBorder +\n                        '; padding:6px; box-sizing: border-box;\">';\n                toolTipHTML +=\n                    '<span style=\"text-align: left; flex:1;font-size:10px; white-space: nowrap;\">' +\n                        key +\n                        '</span>';\n                toolTipHTML +=\n                    '<span style=\"text-align: right; flex:1;font-size:12px; white-space: nowrap; padding-left:16px;\">' +\n                        dataValue +\n                        '</span>';\n                toolTipHTML += '</div>';\n                entryCount++;\n            }\n            toolTipHTML += '</div>';\n            return toolTipHTML;\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     * _resolveLayerConfigs - search through config and apply 'share' value to force sublayers into adopting core styles\n     * @param {Object} config - vegalite styling object to be edited\n     * @param {string} layerMode - mode to assign, whether to inherit or share configs from the parent\n     **/\n    _resolveLayerConfigs(config, layerMode) {\n        let resolveValues = {};\n        resolveValues = this._replaceInObject(config, layerMode);\n        return resolveValues;\n    }\n    /**\n     * _replaceInObject - subroutine of resolvelayers, searches through leafs of config JSON and edits values inside\n     * @param {Object} object - child to be scanned and edited\n     * @param {string} value - from parent to be sent in\n     */\n    _replaceInObject(object, value) {\n        for (const key in object) {\n            if (typeof object[key] === 'object' && object[key] !== null) {\n                this._replaceInObject(object[key], value);\n            }\n            else {\n                object[key] = value;\n            }\n        }\n    }\n    /**\n     * _openEditorView -\n     */\n    _openEditorView() {\n        this.showModal = true;\n        const vegaURL = 'https://vega.github.io/editor/';\n        const openNewWindow = window === null || window === void 0 ? void 0 : window.open(vegaURL, '_blank');\n        if (openNewWindow) {\n            setTimeout(() => {\n                const specPayload = this._visualizationSpec\n                    ? this._visualizationSpec\n                    : this._brokenSpec;\n                const payload = {\n                    spec: JSON.stringify(specPayload, null, '\\t'),\n                    mode: 'vega-lite',\n                };\n                openNewWindow.postMessage(payload, '*');\n            }, 500);\n        }\n        else {\n            console.log('window is undefined');\n        }\n    }\n    /**\n     * _openFullscreenView -\n     */\n    _openFullscreenView() {\n        this.showModal = true;\n        this.modalMode = 'fullscreen';\n        this._displayVisualization();\n    }\n    /**\n     * closeModal - invoked by modal subcomponent when close button is clicked inside\n     */\n    closeModal() {\n        this.showModal = false;\n        this.modalMode = null;\n        this._displayVisualization();\n    }\n    /**\n     * _exportToImage - if canvas, get image object from data url and auto-download\n     */\n    _exportToImage() {\n        if (this.renderMethod === 'svg') {\n            this._exportSvgToImage();\n        }\n        else {\n            window.setTimeout(async () => {\n                var _a, _b, _c, _d, _e;\n                const targetID = this._getTargetRenderCanvasId();\n                const container = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(targetID);\n                if (container instanceof HTMLElement) {\n                    const canvasDiv = container === null || container === void 0 ? void 0 : container.querySelector('canvas');\n                    if (canvasDiv instanceof HTMLElement) {\n                        const imageUrl = canvasDiv.toDataURL('image/png');\n                        const canvasDownloadLink = document.createElement('a');\n                        let exportedFileName = 'chart';\n                        if ((_c = (_b = this._visualizationSpec) === null || _b === void 0 ? void 0 : _b.title) === null || _c === void 0 ? void 0 : _c.text.trim()) {\n                            exportedFileName = (_e = (_d = this._visualizationSpec) === null || _d === void 0 ? void 0 : _d.title) === null || _e === void 0 ? void 0 : _e.text;\n                        }\n                        canvasDownloadLink.download = exportedFileName + '.png';\n                        canvasDownloadLink.href = imageUrl;\n                        canvasDownloadLink.click();\n                    }\n                }\n            }, 200);\n        }\n    }\n    /**\n     * _getTargetRenderCanvasId\n     */\n    _getTargetRenderCanvasId() {\n        let targetID = '#' + clabsPrefix + '--chat-chart-embed-vis-' + this._uniqueID;\n        if (this.modalMode === 'edit') {\n            targetID =\n                '#' + clabsPrefix + '--chat-chart-editor-embed-vis-' + this._uniqueID;\n        }\n        if (this.modalMode === 'fullscreen') {\n            targetID =\n                '#' +\n                    clabsPrefix +\n                    '--chat-chart-fullscreen-embed-vis-' +\n                    this._uniqueID;\n        }\n        return targetID;\n    }\n    /**\n     * _generateImage - if canvas, get image object from data url and create img tag\n     */\n    _generateImage() {\n        if (this.renderMethod === 'svg') {\n            //this._exportSvgToImage()\n        }\n        else {\n            window.setTimeout(async () => {\n                var _a;\n                const targetID = this._getTargetRenderCanvasId();\n                const container = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(targetID);\n                if (container instanceof HTMLElement) {\n                    const canvasDiv = container === null || container === void 0 ? void 0 : container.querySelector('canvas');\n                    if (canvasDiv instanceof HTMLElement) {\n                        this.exportedImageURL = canvasDiv.toDataURL('image/png');\n                    }\n                }\n            }, 200);\n        }\n    }\n    /**\n     * _handleLiveRawEditorChange - handle live changes coming from code subelement being edited\n     * @param {event} event - custom codelement live change event\n     */\n    _handleLiveRawEditorChange(event) {\n        var _a;\n        if ((_a = event === null || event === void 0 ? void 0 : event.detail) === null || _a === void 0 ? void 0 : _a.newLineText) {\n            const previousData = this._visualizationSpec.data;\n            try {\n                this.chartLoading = false;\n                this._errorMessage = '';\n                this._errorLevel = null;\n                const newSpec = JSON.parse(event.detail.newLineText);\n                newSpec.data = previousData;\n                this.chartLoading = false;\n                this._errorMessage = '';\n                this._errorLevel = null;\n                //this.content = JSON.stringify(newSpec);\n                this.carbonify = false;\n                //this._prepareVisualization(newSpec)\n                this._prepareSpecification(newSpec, false, true, 0);\n                this._editedSpec = newSpec;\n                window.setTimeout(async () => {\n                    await this._displayVisualization();\n                }, 200);\n            }\n            catch (error) {\n                console.error(error);\n                this.chartLoading = true;\n                this._errorMessage = 'CHART COMPONENT ERROR: edited spec is invalid';\n                this._errorLevel = 'USER-EDIT';\n            }\n        }\n    }\n    /**\n     * _handleLiveCarbonEditorChange - handle live changes coming from code subelement being edited\n     * @param {event} event - custom codelement live change event\n     */\n    _handleLiveCarbonEditorChange(event) {\n        var _a;\n        if ((_a = event === null || event === void 0 ? void 0 : event.detail) === null || _a === void 0 ? void 0 : _a.newLineText) {\n            const previousData = this._visualizationSpec.data;\n            try {\n                const newSpec = JSON.parse(event.detail.newLineText);\n                newSpec['data'] = previousData;\n                this.chartLoading = false;\n                this._errorMessage = '';\n                this._errorLevel = null;\n                this.carbonify = false;\n                //this.content = JSON.stringify(newSpec);\n                //this._prepareVisualization(newSpec)\n                this._prepareSpecification(newSpec, false, true, 0);\n                //this._prepareVisualization(newSpec);\n                this._editedSpec = newSpec;\n                window.setTimeout(async () => {\n                    await this._displayVisualization();\n                }, 200);\n            }\n            catch (error) {\n                console.error(error);\n                this.chartLoading = true;\n                this._errorMessage = 'CHART COMPONENT ERROR: edited spec is invalid';\n                this._errorLevel = 'USER-EDIT';\n            }\n        }\n    }\n    /**\n     * _handleModelEditorValidation -  event from code subcomponent\n     * @param {event} event - custom event from chat code component\n     */\n    _handleCarbonEditorValidation(event) {\n        var _a;\n        if ((_a = event === null || event === void 0 ? void 0 : event.detail) === null || _a === void 0 ? void 0 : _a.newLineText) {\n            this._errorMessage = '';\n            this._errorLevel = null;\n            const previousData = this._visualizationSpec.data;\n            try {\n                this.modalMode = null;\n                this.showModal = false;\n                //this._visualizationSpec = JSON.parse(event.detail.newLineText);\n                //this._visualizationSpec.data = previousData;\n                const newSpec = JSON.parse(event.detail.newLineText);\n                newSpec.data = previousData;\n                const changes = this._findStructuralChanges(this._visualizationSpec, newSpec);\n                const specificationEditedEvent = new CustomEvent('on-chart-specification-edit-validation', {\n                    detail: {\n                        action: 'CHART: rendering successful',\n                        changes: changes,\n                        originalSpec: this._visualizationSpec,\n                        newSpec: newSpec,\n                    },\n                    bubbles: true,\n                    composed: true,\n                });\n                this._visualizationSpec = newSpec;\n                this.chartLoading = false;\n                this._errorMessage = '';\n                this._errorLevel = null;\n                this.dispatchEvent(specificationEditedEvent);\n                window.setTimeout(async () => {\n                    await this._displayVisualization();\n                }, 200);\n            }\n            catch (error) {\n                console.error(error);\n                this._errorMessage = 'CHART COMPONENT ERROR: edited spec is invalid';\n                this._errorLevel = 'WEB-COMPONENT';\n            }\n        }\n    }\n    /**\n     * _handleModelEditorValidation -  event from code subcomponent\n     * @param {event} event - custom event from chat code component\n     */\n    _handleOriginalEditorValidation(event) {\n        var _a;\n        if ((_a = event === null || event === void 0 ? void 0 : event.detail) === null || _a === void 0 ? void 0 : _a.newLineText) {\n            const previousData = this._visualizationSpec.data;\n            try {\n                const newSpec = JSON.parse(event.detail.newLineText);\n                newSpec.data = previousData;\n                this._editedSpec = newSpec;\n                this._prepareSpecification(JSON.stringify(newSpec), true, true, 0);\n                window.setTimeout(async () => {\n                    await this._displayVisualization();\n                }, 200);\n            }\n            catch (error) {\n                console.error(error);\n                this._errorMessage = 'CHART COMPONENT ERROR: edited spec is invalid';\n                this._errorLevel = 'USER-EDIT';\n            }\n        }\n    }\n    /**\n     * _openCodeView - open editor modal\n     */\n    _openCodeView() {\n        this.modalMode = 'edit';\n        this.showModal = true;\n        this._displayVisualization();\n    }\n    /**\n     * _handleFullScreenScroll - block scrolling beyond fullscreen\n     * @param {event} event - scroll/wheel event\n     */\n    _handleFullScreenScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * _showCarbonSpec - Code editor toggling to show post-hoc spec\n     */\n    _showCarbonSpec() {\n        this.editOriginalSpecification = false;\n    }\n    /**\n     * _showOriginalSpec - Code editor toggling to show original valid spec\n     */\n    _showOriginalSpec() {\n        this.editOriginalSpecification = true;\n    }\n    /**\n     * _handleMouseOut - see if component lost mouse content\n     */\n    _handleMouseOut() {\n        this.isHovered = false;\n    }\n    /**\n     * _handleMouseOut - see if component lost mouse content\n     */\n    _handleMouseOver() {\n        this.isHovered = true;\n    }\n    /**\n     * _exportSvgToImage - if svg, get image object from svg and auto-download\n     */\n    _exportSvgToImage() {\n        window.setTimeout(async () => {\n            var _a;\n            const targetID = this._getTargetRenderCanvasId();\n            const container = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(targetID);\n            if (container instanceof HTMLElement) {\n                const svgDiv = container === null || container === void 0 ? void 0 : container.querySelector('svg');\n                if (svgDiv instanceof SVGElement) {\n                    const svgData = new XMLSerializer().serializeToString(svgDiv);\n                    const tempCanvas = document.createElement('canvas');\n                    const context = tempCanvas.getContext('2d');\n                    const svgSize = svgDiv.getBoundingClientRect();\n                    tempCanvas.height = svgSize.height;\n                    tempCanvas.width = svgSize.width;\n                    const tempImage = new Image();\n                    /**\n                     * handles the onload event when image is done rendering\n                     */\n                    tempImage.onload = () => {\n                        var _a, _b, _c, _d;\n                        context === null || context === void 0 ? void 0 : context.drawImage(tempImage, 0, 0);\n                        const imageData = tempCanvas.toDataURL('image/png');\n                        const canvasDownloadLink = document.createElement('a');\n                        let exportedFileName = 'chart';\n                        if ((_b = (_a = this._visualizationSpec) === null || _a === void 0 ? void 0 : _a.title) === null || _b === void 0 ? void 0 : _b.text.trim()) {\n                            exportedFileName = (_d = (_c = this._visualizationSpec) === null || _c === void 0 ? void 0 : _c.title) === null || _d === void 0 ? void 0 : _d.text;\n                        }\n                        canvasDownloadLink.download = exportedFileName + '.png';\n                        canvasDownloadLink.href = imageData;\n                        canvasDownloadLink.click();\n                    };\n                    tempImage.src = 'data:image/svg+xml;base64,' + btoa(svgData);\n                }\n            }\n        }, 200);\n    }\n    /**\n     * _lightenSpec - remove any large data objects before rendering in code element\n     * @param {Object} specification - spec JSON to be check and lightened\n     */\n    _lightenSpec(specification) {\n        var _a, _b;\n        const newSpecification = JSON.parse(JSON.stringify(specification));\n        if (((_b = (_a = newSpecification === null || newSpecification === void 0 ? void 0 : newSpecification.data) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.length) > 20) {\n            newSpecification.data = 'Dataset not rendered for performance';\n            return newSpecification;\n        }\n        else {\n            return newSpecification;\n        }\n    }\n    /**\n     * prepareVisualization - Prepare and adapt Vega visualization spec to be more Carbon adjacent\n     * @param {object} premadeSpec - Vega specification sent in optionally when pre-parsed\n     */\n    _prepareVisualization(premadeSpec) {\n        let spec = {};\n        if (!premadeSpec) {\n            try {\n                spec = JSON.parse(this.content);\n            }\n            catch (e) {\n                this._errorMessage =\n                    'CARBON CHART ERROR: JSON parse() failed, specification is not valid JSON';\n                this._errorLevel = 'JSON-PARSING';\n                return '';\n            }\n        }\n        else {\n            spec = JSON.parse(JSON.stringify(premadeSpec));\n        }\n        if (!spec['$schema']) {\n            this._errorMessage =\n                'CHART COMPONENT ERROR: JSON is valid but not a valid schema, missing \"$schema\" field';\n            this._errorLevel = 'SPEC-VALIDATION';\n            return '';\n        }\n        if (!spec['repeat']) {\n            //spec.width = 'container';\n            //spec.height = 'container';\n        }\n        else {\n            delete spec['height'];\n            delete spec['width'];\n        }\n        delete spec['height'];\n        delete spec['width'];\n        delete spec['autosize'];\n        let layeredSpec;\n        let repeatedSpec;\n        let plainSpec;\n        let subChartWidth;\n        let subChartHeight;\n        if ('layer' in spec) {\n            this._specType = 'layered';\n            layeredSpec = this._prepareSpecification(spec, false, true, 0);\n            /*for (const [index, subSpec] of spec['layer'].entries()) {\n              const tempSubSpec = this._prepareSpecification(JSON.parse(JSON.stringify(subSpec)), true, false, index+1);\n              delete tempSubSpec['background'];\n              delete tempSubSpec['padding'];\n              layeredSpec['layer'][index] = tempSubSpec;\n            }*/\n        }\n        else if (spec['repeat']) {\n            this._specType = 'repeated';\n            const currentContainerWidth = this.clientWidth;\n            const currentContainerHeight = this.clientHeight;\n            repeatedSpec = this._prepareSpecification(JSON.parse(JSON.stringify(spec)), false, true, 0);\n            repeatedSpec['spec'] = this._prepareSpecification(repeatedSpec['spec'], true, false, 0);\n            if (currentContainerWidth) {\n                let rowCount;\n                let columnCount;\n                if (Array.isArray(repeatedSpec['repeat'])) {\n                    columnCount = repeatedSpec.columns ? repeatedSpec.columns : 1;\n                    rowCount = Math.ceil(repeatedSpec['repeat'].length / columnCount);\n                }\n                else {\n                    if (repeatedSpec['repeat']['row']) {\n                        rowCount = repeatedSpec['repeat']['row'].length;\n                    }\n                    if (repeatedSpec['repeat']['column']) {\n                        columnCount = repeatedSpec['repeat']['column'].length;\n                    }\n                }\n                const legendHeight = 16 * 3;\n                const paddingOffset = { vertical: 0, horizontal: 0 };\n                if (repeatedSpec['padding']) {\n                    paddingOffset['vertical'] =\n                        repeatedSpec['padding']['top'] + repeatedSpec['padding']['bottom'];\n                    paddingOffset['horizontal'] =\n                        repeatedSpec['padding']['left'] + repeatedSpec['padding']['right'];\n                }\n                if (Array.isArray(repeatedSpec['repeat'])) {\n                    //paddingOffset['horizontal']= paddingOffset['horizontal']columnCount;\n                }\n                //paddingOffset['horizontal'] = 120;\n                const gapSize = 17;\n                subChartWidth =\n                    (currentContainerWidth - 48 - (columnCount + 1) * gapSize) /\n                        columnCount -\n                        42;\n                subChartHeight =\n                    (currentContainerHeight -\n                        48 -\n                        legendHeight -\n                        (rowCount + 1) * gapSize) /\n                        rowCount -\n                        42;\n            }\n            delete repeatedSpec['spec']['background'];\n            delete repeatedSpec['spec']['padding'];\n            if (subChartWidth) {\n                repeatedSpec['spec']['width'] = subChartWidth;\n            }\n            if (subChartHeight) {\n                repeatedSpec['spec']['height'] = subChartHeight;\n            }\n        }\n        else {\n            this._specType = 'plain';\n            if (!spec['data']) {\n                plainSpec = {};\n            }\n            else {\n                //spec, editMarks, addConfig, layerIndex\n                plainSpec = this._prepareSpecification(spec, true, true, 0);\n            }\n        }\n        let finalSpec;\n        if (spec['layer']) {\n            finalSpec = layeredSpec;\n            //finalSpec['resolve'] = this._resolveLayerConfigs(JSON.parse(JSON.stringify(finalSpec.config)), \"shared\");\n        }\n        else if (spec['repeat']) {\n            finalSpec = repeatedSpec;\n        }\n        else {\n            finalSpec = plainSpec;\n        }\n        this._visualizationSpec = finalSpec;\n        return '';\n    }\n    /**\n     * _prepareSpecification - edit Vega specific to change mark values and apply colors or rewrite config attribute\n     * @param {object} spec - vega sepcification JSON\n     * @param {boolean} editMarks - boolean to change mark values\n     * @param {boolean} addConfig - boolean to edit config attribute of spec with Carbon styles\n     * @param {number} layerIndex - index of layer, enabled to switch default colors and handle z-indexing\n     */\n    _prepareSpecification(spec, editMarks, addConfig, layerIndex) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        let ordinalColors = [];\n        let quantitativeColors = [];\n        const darkOrdinalColors = [\n            '#8a3ffc',\n            '#33b1ff',\n            '#007d79',\n            '#ff7eb6',\n            '#fa4d56',\n            '#fff1f1',\n            '#6fdc8c',\n            '#4589ff',\n            '#d12771',\n            '#d2a106',\n            '#08bdba',\n            '#bae6ff',\n            '#ba4e00',\n            '#d4bbff',\n        ];\n        const lightOrdinalColors = [\n            '#6929c4',\n            '#1192e8',\n            '#005d5d',\n            '#9f1853',\n            '#fa4d56',\n            '#570408',\n            '#198038',\n            '#002d9c',\n            '#ee538b',\n            '#b28600',\n            '#009d9a',\n            '#012749',\n            '#8a3800',\n            '#a56eff',\n        ];\n        const sequentialScales = [\n            [\n                '#edf5ff',\n                '#d0e2ff',\n                '#a6c8ff',\n                '#78a9ff',\n                '#4589ff',\n                '#0f62fe',\n                '#0043ce',\n                '#002d9c',\n                '#001d6c',\n                '#001141',\n            ],\n            [\n                '#f6f2ff',\n                '#e8daff',\n                '#d4bbff',\n                '#be95ff',\n                '#a56eff',\n                '#8a3ffc',\n                '#6929c4',\n                '#491d8b',\n                '#31135e',\n                '#1c0f30',\n            ],\n            [\n                '#d9fbfb',\n                '#9ef0f0',\n                '#3ddbd9',\n                '#08bdba',\n                '#009d9a',\n                '#007d79',\n                '#005d5d',\n                '#004144',\n                '#022b30',\n                '#081a1c',\n            ],\n        ];\n        const colorGradients = [\n            ['#001141', '#edf5ff'],\n            ['#1c0f30', '#f6f2ff'],\n            ['#1c0f30', '#e5f6ff'],\n            ['#081a1c', '#d9fbfb'],\n        ];\n        let backgroundColor = '#161616';\n        let gridColor = '#3d3d3d';\n        let textColor = '#f4f4f4';\n        let labelColor = '#c6c6c6';\n        let axisColor = '#6f6f6f';\n        let titleFont = 'IBM Plex Sans, sans-serif';\n        let defaultFont = 'IBM Plex Sans Condensed, Arial, sans-serif';\n        let gradientColorBottom = colorGradients[2][1];\n        let gradientColorTop = colorGradients[2][0];\n        let defaultColor = darkOrdinalColors[darkOrdinalColors.length - 1];\n        ordinalColors = darkOrdinalColors;\n        quantitativeColors = sequentialScales[1];\n        if (layerIndex) {\n            quantitativeColors = sequentialScales[2];\n            defaultColor =\n                darkOrdinalColors[layerIndex < darkOrdinalColors.length\n                    ? layerIndex\n                    : layerIndex % darkOrdinalColors.length];\n        }\n        if (this.theme == 'white') {\n            backgroundColor = '#ffffff';\n            gridColor = '#e0e0e0';\n            textColor = '#161616';\n            labelColor = '#777677';\n            axisColor = '#8c8c8c';\n            titleFont = 'IBM Plex Sans, sans-serif';\n            defaultFont = 'IBM Plex Sans Condensed, Arial, sans-serif';\n            gradientColorBottom = colorGradients[1][1];\n            gradientColorTop = colorGradients[1][0];\n            defaultColor = lightOrdinalColors[lightOrdinalColors.length - 1];\n            ordinalColors = lightOrdinalColors;\n            quantitativeColors = sequentialScales[1];\n            if (layerIndex) {\n                quantitativeColors = sequentialScales[2];\n                defaultColor =\n                    lightOrdinalColors[layerIndex < lightOrdinalColors.length\n                        ? layerIndex\n                        : layerIndex % lightOrdinalColors.length];\n            }\n        }\n        if (this.carbonify) {\n            spec.background = backgroundColor;\n            let colorScale = [];\n            let chartType = '';\n            if (typeof spec.mark === 'string') {\n                chartType = spec.mark;\n                spec.mark = { type: chartType };\n            }\n            else if (typeof spec.mark === 'object' && 'type' in spec.mark) {\n                chartType = spec.mark.type;\n            }\n            else if (spec['spec']) {\n                if (typeof ((_a = spec.spec) === null || _a === void 0 ? void 0 : _a.mark) === 'string') {\n                    chartType = (_b = spec.spec) === null || _b === void 0 ? void 0 : _b.mark;\n                    spec['spec'].mark = { type: chartType };\n                }\n                else {\n                    if (typeof spec['spec'].mark === 'object' &&\n                        'type' in spec['spec'].mark) {\n                        chartType = spec['spec'].mark.type;\n                    }\n                }\n            }\n            let titleOffset = -8;\n            const defaultPadding = 16;\n            if (spec.description && !spec.title) {\n                spec.title = spec.description;\n                delete spec['description'];\n            }\n            if (spec.title) {\n                if (typeof spec.title === 'string') {\n                    spec.title = { text: spec.title };\n                }\n            }\n            else if (addConfig && !this.disableOptions) {\n                spec.title = { text: '   ' };\n            }\n            if ((_d = (_c = spec === null || spec === void 0 ? void 0 : spec.encoding) === null || _c === void 0 ? void 0 : _c.size) === null || _d === void 0 ? void 0 : _d.legend) {\n                spec.encoding.size.legend = null;\n            }\n            if (((_e = spec === null || spec === void 0 ? void 0 : spec.mark) === null || _e === void 0 ? void 0 : _e.type) === 'point') {\n                spec.mark.type = 'circle';\n            }\n            if (((_h = (_g = (_f = spec.encoding) === null || _f === void 0 ? void 0 : _f.y) === null || _g === void 0 ? void 0 : _g.axis) === null || _h === void 0 ? void 0 : _h.label) || ((_k = (_j = spec.encoding) === null || _j === void 0 ? void 0 : _j.y) === null || _k === void 0 ? void 0 : _k.field)) {\n                titleOffset = 2;\n                spec['padding'] = {\n                    left: defaultPadding,\n                    right: 24,\n                    top: defaultPadding,\n                    bottom: defaultPadding,\n                };\n            }\n            else {\n                spec['padding'] = {\n                    left: defaultPadding,\n                    right: defaultPadding,\n                    top: defaultPadding,\n                    bottom: defaultPadding,\n                };\n            }\n            if (addConfig) {\n                spec['config'] = {\n                    font: defaultFont,\n                    axis: {\n                        domainColor: gridColor,\n                        grid: true,\n                        gridColor: gridColor,\n                        titleFontSize: 13,\n                        labelFontSize: 11,\n                        labelColor: labelColor,\n                        labelFont: defaultFont,\n                        titleFont: defaultFont,\n                    },\n                    axisX: {\n                        labelAngle: 0,\n                    },\n                    mark: { tooltip: this.enableTooltip },\n                    axisBottom: {\n                        domainColor: axisColor,\n                        labelColor: labelColor,\n                        titleColor: textColor,\n                        tickColor: backgroundColor,\n                        titlePadding: 12,\n                        titleFont: defaultFont,\n                        titleFontWeight: 400,\n                    },\n                    axisTop: {\n                        domainColor: gridColor,\n                        labelColor: labelColor,\n                        titleColor: textColor,\n                        tickColor: backgroundColor,\n                        titlePadding: 10,\n                        titleFont: defaultFont,\n                        titleFontWeight: 400,\n                    },\n                    axisLeft: {\n                        domainColor: axisColor,\n                        labelColor: labelColor,\n                        titleColor: textColor,\n                        tickColor: backgroundColor,\n                        titlePadding: 4,\n                        titleFont: defaultFont,\n                        titleFontWeight: 400,\n                    },\n                    axisRight: {\n                        domainColor: gridColor,\n                        labelColor: labelColor,\n                        titleColor: textColor,\n                        tickColor: backgroundColor,\n                        titlePadding: 10,\n                        titleFont: defaultFont,\n                        titleFontWeight: 400,\n                    },\n                    view: {\n                        stroke: gridColor,\n                    },\n                    title: {\n                        font: titleFont,\n                        color: textColor,\n                        anchor: 'start',\n                        fontWeight: 500,\n                        fontSize: 16,\n                        offset: 16,\n                        dx: titleOffset,\n                    },\n                    range: {\n                        heatmap: [gradientColorBottom, gradientColorTop],\n                        ramp: [gradientColorBottom, gradientColorTop],\n                        category: ordinalColors,\n                        ordinal: ordinalColors,\n                    },\n                    legend: {\n                        title: null,\n                        symbolType: 'square',\n                        orient: 'bottom',\n                        anchor: 'start',\n                        symbolOpacity: 1,\n                        direction: 'horizontal',\n                        titleColor: textColor,\n                        labelColor: labelColor,\n                        titleFont: defaultFont,\n                        labelFont: defaultFont,\n                        labelOffset: 4,\n                        rowPadding: 8,\n                        titleFontSize: 11,\n                        labelFontSize: 12, //fillOpacity: 1,\n                        strokeWidth: 1, //fontWeight: 'bold',\n                        offset: 20,\n                        symbolBaseFillColor: null,\n                        gradientLength: 246,\n                        gradientThickness: 8,\n                        gradientLabelOffset: 8,\n                    },\n                };\n                spec['config'].axis.titleLimit = 100; //Math.min(spec.height,spec.width)\n            }\n            this._authorizeSingleSelection = false;\n            this._authorizeMultiSelection = false;\n            let isOrdinal;\n            switch (chartType) {\n                case 'bar':\n                    isOrdinal = false;\n                    if (spec.config) {\n                        spec.config.bar = {\n                            discreteBandSize: 12,\n                        };\n                    }\n                    break;\n                case 'scatter':\n                    isOrdinal = false;\n                    break;\n                case 'circle':\n                case 'point':\n                    isOrdinal = false;\n                    if (spec['config']) {\n                        spec['config'][chartType] = {\n                            fillOpacity: 1.0,\n                            size: 40,\n                            strokeOpacity: 1.0,\n                            strokeWidth: 1.0,\n                        };\n                    }\n                    isOrdinal = false;\n                    break;\n                case 'square':\n                    isOrdinal = false;\n                    this._authorizeMultiSelection = false;\n                    break;\n                case 'tick':\n                    isOrdinal = false;\n                    this._authorizeMultiSelection = false;\n                    break;\n                case 'line':\n                    isOrdinal = false;\n                    spec.config.line = { interpolate: 'monotone' };\n                    break;\n                case 'text':\n                    isOrdinal = false;\n                    this._authorizeMultiSelection = false;\n                    //spec['config']['text'] = { strokeColor: textColor };\n                    break;\n                case 'boxplot':\n                    isOrdinal = false;\n                    spec.config['boxplot'] = {\n                        box: {\n                            fill: defaultColor,\n                            fillOpacity: 0.3,\n                            stroke: defaultColor,\n                            strokeOpacity: 1,\n                        },\n                        median: {\n                            stroke: defaultColor,\n                            strokeWidth: 2,\n                        },\n                        outliers: {\n                            fill: 'white',\n                            fillOpacity: 1,\n                            stroke: 'yellow',\n                            strokeOpacity: 1,\n                        },\n                        rule: { stroke: defaultColor, strokeOpacity: 1, strokeWidth: 1 },\n                        ticks: { stroke: defaultColor, strokeOpacity: 1, strokeWidth: 1 },\n                    };\n                    this._authorizeSingleSelection = false;\n                    this._authorizeMultiSelection = false;\n                    break;\n                case 'area':\n                    isOrdinal = false;\n                    break;\n                case 'rule':\n                    isOrdinal = false;\n                    this._authorizeMultiSelection = false;\n                    break;\n                case 'geoshape':\n                    isOrdinal = true;\n                    spec['config']['axis']['grid'] = false;\n                    spec.config.range = spec.config.range || {};\n                    spec.config.range.sequential = spec.config.range.sequential || {};\n                    spec.config.range.sequential.scheme = [\n                        gradientColorBottom,\n                        gradientColorTop,\n                    ];\n                    /*if(!spec['view']){\n                      spec['view'] = {\"padding\":{}}\n                    }\n                    spec['view']['padding'] = {\n                      top: 124,\n                      bottom: 124,\n                      left:0,\n                      right:0\n                    };*/\n                    this._authorizeMultiSelection = false;\n                    break;\n                case 'image':\n                    isOrdinal = false;\n                    this._authorizeMultiSelection = false;\n                    break;\n                case 'trail':\n                    isOrdinal = false;\n                    this._authorizeMultiSelection = false;\n                    break;\n                case 'rect':\n                    isOrdinal = true;\n                    spec['config']['axis']['grid'] = false;\n                    spec['config']['rect'] = { stroke: backgroundColor };\n                    break;\n                case 'arc':\n                    if (spec['mark']) {\n                        //spec['mark']['labels'] = true;\n                        if (spec['mark']['innerRadius'] > 0) {\n                            //spec['mark']['innerRadius'] = Math.round(this.clientHeight*0.6*0.7);\n                            //spec['mark']['outerRadius'] = Math.round(this.clientHeight*0.6);\n                            spec['mark']['outerRadius'] = spec['mark']['innerRadius'] * 1.2;\n                        }\n                    }\n                    if (!spec['encoding']) {\n                        spec['encoding'] = {};\n                    }\n                    if (!spec['encoding']['value']) {\n                        spec['encoding']['value'] = {};\n                    }\n                    if (!spec['encoding']['value']['label']) {\n                        spec['encoding']['value']['label'] = {\n                            align: 'center',\n                            baseline: 'middle',\n                            fontSize: 12,\n                        };\n                    }\n                    spec.config.arc = {\n                        stroke: gridColor,\n                        strokeWidth: 1,\n                    };\n                    isOrdinal = false;\n                    this._authorizeMultiSelection = false;\n                    break;\n                default:\n                    isOrdinal = false;\n                    this._authorizeMultiSelection = false;\n                    break;\n            }\n            this._authorizeSingleSelection =\n                this._authorizeSingleSelection && this.enableSingleSelections;\n            this._authorizeMultiSelection =\n                this._authorizeMultiSelection && this.enableMultiSelections;\n            if (!isOrdinal) {\n                colorScale = ordinalColors;\n            }\n            else {\n                colorScale = quantitativeColors;\n            }\n            if (editMarks) {\n                if (!spec.encoding) {\n                    spec.encoding = {};\n                }\n                if (spec.encoding.color) {\n                    if (spec.encoding.color.field) {\n                        spec.encoding.color.scale = { range: colorScale };\n                    }\n                    else if (spec.encoding.color.value) {\n                        spec.encoding.color.value = defaultColor;\n                    }\n                }\n                else {\n                    spec.encoding.color = {\n                        scale: { range: colorScale },\n                        value: defaultColor,\n                    };\n                }\n                delete spec.encoding.color.legend;\n                this._addInteractions(spec, 'point');\n            }\n        }\n        return spec;\n    }\n    /**\n     * _addToEncoding - modify encoding values without calling an empty field or overwriting predefined values\n     * @param {object} spec - specification JSON to edit\n     * @param {string} field - encoding field name\n     * @param {object} appendedValues - new styling/behavior to append\n     */\n    _addToEncoding(spec, field, appendedValues) {\n        const currentData = spec.encoding[field] || {};\n        const preExistingCondition = currentData.condition;\n        const checkArray = Array.isArray(preExistingCondition);\n        const mergeConditions = preExistingCondition\n            ? checkArray\n                ? preExistingCondition\n                : [preExistingCondition]\n            : [];\n        spec.encoding[field] = {\n            ...currentData,\n            ...appendedValues,\n            condition: mergeConditions,\n        };\n    }\n    /**\n     * _addInteractions - modify encoding, selection and signals to apply interactions (zoom, filtering, brush, hover, click)\n     * @param {object} spec - specification JSON to edit\n     * @param {string} chartType - mark found in spec denoting chart type to dictate/remove custom behavior\n     */\n    _addInteractions(spec, chartType) {\n        var _a, _b, _c, _d;\n        if (!this.enableMultiSelections) {\n            this._authorizeMultiSelection = false;\n        }\n        const params = [];\n        const paramCombinations = [];\n        if (this._authorizeSingleSelection) {\n            const hoverInteraction = {\n                name: 'hover',\n                select: { type: chartType, on: 'mouseover', clear: 'mouseout' },\n            };\n            params.push(hoverInteraction);\n            paramCombinations.push({ param: 'hover', empty: false, value: 1 });\n            //this._addToEncoding(spec, \"opacity\", {condition: [{selection: \"hover\", value:1}]});\n            const selectInteraction = {\n                name: 'picker',\n                select: { type: chartType, toggle: true },\n            };\n            params.push(selectInteraction);\n            //this._addToEncoding(spec, \"color\", { condition: [{selection: \"picker\", value: \"red\"}]})\n            paramCombinations.push({ param: 'picker', empty: false, value: 1 });\n        }\n        if (this._authorizeMultiSelection) {\n            const brushInteraction = {\n                name: 'brush',\n                select: { type: 'interval' },\n            };\n            params.push(brushInteraction);\n            paramCombinations.push({ param: 'brush', empty: false, value: 1 });\n        }\n        if (this.enableLegendFiltering) {\n            if ((_b = (_a = spec.encoding) === null || _a === void 0 ? void 0 : _a.color) === null || _b === void 0 ? void 0 : _b.field) {\n                const fieldName = (_d = (_c = spec.encoding) === null || _c === void 0 ? void 0 : _c.color) === null || _d === void 0 ? void 0 : _d.field;\n                const legendInteraction = {\n                    name: 'legendFilter',\n                    //bind: { legend: 'color' },\n                    select: { type: chartType, fields: [fieldName] },\n                };\n                params.push(legendInteraction);\n                //paramCombinations.push({param: \"legendFilter\", value:1})\n                //this._addToEncoding(spec, \"opacity\", {condition: [{selection: \"legendFilter\",value:1}]})\n            }\n        }\n        if (params.length > 0) {\n            spec.params = spec.params || [];\n            spec.params = [...spec.params, ...params];\n        }\n        //this._addToEncoding(spec, \"opacity\", {condition: conditions, value:0.3})\n        if (paramCombinations.length > 0) {\n            //const internalTesting = paramCombinations.map(param => `{\"test\": \"`+param.param+`_isActive\", \"value\": 1 }`).join(' || ')\n            //const internalTesting = paramCombinations.map(param => param.param+`_isActive`).join(' || ')\n            //console.log(interactionConditions)\n            /*const conditions =\n              (spec.encoding['opacity'] = {\n                condition: paramCombinations,\n                value: 0.6,\n              });*/\n            spec.encoding['opacity'] = {\n                condition: paramCombinations,\n                value: 0.85,\n            };\n            //this._addToEncoding(spec, \"opacity\", {condition: interactionConditions, value:0.3})\n        }\n        else {\n            //spec.encoding[\"opacity\"] = {value:1.0}\n        }\n    }\n}\nchartElement.styles = styles;\nexport default chartElement;\n__decorate([\n    property({ type: String, attribute: 'content', reflect: true })\n], chartElement.prototype, \"content\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'debug-mode' })\n], chartElement.prototype, \"debugMode\", void 0);\n__decorate([\n    property({ type: String, attribute: 'container-height', reflect: true })\n], chartElement.prototype, \"containerHeight\", void 0);\n__decorate([\n    property({ type: String, attribute: 'container-width', reflect: true })\n], chartElement.prototype, \"containerWidth\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'carbonify', reflect: true })\n], chartElement.prototype, \"carbonify\", void 0);\n__decorate([\n    property({ type: String, attribute: 'render-method' })\n], chartElement.prototype, \"renderMethod\", void 0);\n__decorate([\n    property({ type: String, attribute: 'theme' })\n], chartElement.prototype, \"theme\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-options' })\n], chartElement.prototype, \"disableOptions\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-context' })\n], chartElement.prototype, \"enableContext\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-fullscreen' })\n], chartElement.prototype, \"disableFullscreen\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-export' })\n], chartElement.prototype, \"disableExport\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-code-inspector' })\n], chartElement.prototype, \"disableCodeInspector\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-editor' })\n], chartElement.prototype, \"disableEditor\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'thumbnail' })\n], chartElement.prototype, \"thumbNail\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"exportedImageURL\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"enableTooltip\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-zooming' })\n], chartElement.prototype, \"enableZooming\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-legend-filtering' })\n], chartElement.prototype, \"enableLegendFiltering\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-multi-selections' })\n], chartElement.prototype, \"enableMultiSelections\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"_authorizeMultiSelection\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-single-selections' })\n], chartElement.prototype, \"enableSingleSelections\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"_authorizeSingleSelection\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"_errorMessage\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"_errorLevel\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"_warningMessage\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"_uniqueID\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'loading' })\n], chartElement.prototype, \"chartLoading\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"_previousSpec\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"_visualizationSpec\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"_brokenSpec\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"_editedSpec\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"_editedContent\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"showModal\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"modalMode\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"toolTipValues\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'streaming' })\n], chartElement.prototype, \"streaming\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"editOriginalSpecification\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"chartResizing\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"_resizeTimeout\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"isHovered\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"_latestError\", void 0);\n__decorate([\n    state()\n], chartElement.prototype, \"_specType\", void 0);\n"]}