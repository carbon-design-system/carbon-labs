{"version":3,"sources":["components/codeElement/src/codeElement.ts","components/codeElement/src/codeElement.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","state","hljs","styles","codeElement","constructor","tabSize","disableCopyButton","disableEditButton","_currentEditIndex","_currentlyEdited","_currentlyFullyEdited","_fullEditMode","_updateOnEdit","_preRender","_renderedLines","_editedLines","_originalLines","_renderLabel","customValue","labels","customLabels","updated","changedProperties","has","_originalContent","content","streaming","_formatCode","editable","_clearCode","match","lang","codeContent","language","firstUpdated","hasAttribute","style","setProperty","maxHeight","disableLineTicks","undefined","codeAnalysis","_editedContent","type","paddingLeft","disableAutoCompacting","resizeObserver","ResizeObserver","_handleScroll","observe","_a","_b","textArea","shadowRoot","querySelector","editArea","HTMLElement","scrollTop","setTimeout","Math","abs","scrollHeight","_handleResize","_event","_copyCode","navigator","clipboard","writeText","error","console","_getTheme","parentElement","parentStyle","getComputedStyle","backgroundColor","getPropertyValue","darkMode","startsWith","parseInt","replace","theme","_controlTabbing","event","preventDefault","_handleFullCodeEdit","newLines","value","codeEditedEvent","CustomEvent","detail","previousLineData","newLineText","bubbles","composed","dispatchEvent","_startFullEdit","_handleCodeEdit","targetElement","codeIndex","getAttribute","code","lineIndex","editedValue","splice","newLineObject","_packageSpecFromArray","map","line","join","_setCurrentIndex","_handleEditValidation","newLineData","requestUpdate","_handleEditCancellation","action","_highlightLine","highlight","edited","formattedText","htmlSafeText","detection","highlightAuto","e","lines","trim","split","tabWidth","textValues","highlightMode","highlightedCode","tempDiv","document","createElement","innerHTML","codeLines","currentLine","childNodes","node","nodeType","Node","TEXT_NODE","textContent","k","push","element","outerHTML","lineType","tabOffset","tabMatch","toString","JSON","parse","stringify","tickWidth","String","attribute","reflect","prototype","Boolean","Number"],"mappings":"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","file":"codeElement.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n\nimport hljs from 'highlightjs';\n\n// @ts-ignore\nimport styles from './codeElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class codeElement extends LitElement {\n  static styles = styles;\n\n  /**\n   * resizeObserver - resize watcher of parent\n   **/\n  private resizeObserver;\n\n  /**\n   * Code string to be parsed into lines and displayed\n   */\n  @property({ type: String, attribute: 'content', reflect: true })\n  content;\n\n  /**\n   * Editable boolean flag to let users know lines can be changed\n   */\n  @property({ type: Boolean, attribute: 'editable', reflect: true })\n  editable;\n\n  /**\n   * add coloring with highlightJS\n   */\n  @property({ type: Boolean, attribute: 'enable-coloring' })\n  enableColoring;\n\n  /**\n   * add coloring with highlightJS\n   */\n  @property({ type: Boolean, attribute: 'enable-language-display' })\n  enableLanguageDisplay;\n\n  /**\n   * Editable boolean flag to let users know lines can be changed\n   */\n  @property({ type: Boolean, attribute: 'disable-line-ticks' })\n  disableLineTicks;\n\n  /**\n   * Set max height for code piece\n   */\n  @property({ type: String, attribute: 'max-height' })\n  maxHeight;\n\n  /**\n   * Set tab size flag int\n   */\n  @property({ type: Number, attribute: 'tab-size' })\n  tabSize = 3;\n\n  /**\n   * Editable boolean flag to let users know lines can be changed\n   */\n  @property({ type: Boolean, attribute: 'disable-copy-button', reflect: true })\n  disableCopyButton = false;\n\n  /**\n   * Editable boolean flag to let users know lines can be changed\n   */\n  @property({ type: Boolean, attribute: 'disable-edit-button', reflect: true })\n  disableEditButton = true;\n\n  /**\n   * streaming - flag to enable streaming mode\n   */\n  @property({ type: Boolean, attribute: 'streaming' })\n  streaming;\n\n  /**\n   * Editable boolean flag to let users know lines can be changed\n   */\n  @property({ type: Boolean, attribute: 'disable-auto-compacting' })\n  disableAutoCompacting;\n\n  /**\n   * Source content - save original code text content\n   */\n  @state()\n  _originalContent;\n\n  /**\n   * Edited content - update edited code\n   */\n  @state()\n  _editedContent;\n\n  /**\n   * _currentEditIndex - target line index\n   */\n  @state()\n  _currentEditIndex = 0;\n\n  /**\n   * currentlyEdited - flag if any content was changed\n   */\n  @state()\n  _currentlyEdited = false;\n\n  /**\n   * currentlyFullyEdited - flag if any content was changed\n   */\n  @state()\n  _currentlyFullyEdited = false;\n\n  /**\n   * _fullEditMode - use one singular text area to edit\n   */\n  @state()\n  _fullEditMode = true;\n\n  /**\n   * _updateOnEdit - send event on every edit\n   */\n  @state()\n  _updateOnEdit = true;\n\n  /**\n   * language - identified language\n   */\n  @state()\n  language;\n\n  /**\n   * prerender with highlight\n   */\n  @state()\n  _preRender = true;\n\n  /**\n   * Array of lines parsed from content attribute\n   */\n  @state()\n  _renderedLines: {\n    content: string;\n    type: string;\n    paddingLeft: string;\n  }[] = [];\n\n  /**\n   * Copied array of lines when edited\n   */\n  @state()\n  _editedLines: {\n    content: string;\n    type: string;\n    paddingLeft: string;\n  }[] = [];\n\n  /**\n   * Original array of lines from content field\n   */\n  @state()\n  _originalLines: {\n    content: string;\n    type: string;\n    paddingLeft: string;\n  }[] = [];\n\n  /**\n   * custom label presets\n   */\n  @property({ type: Object, attribute: 'customLabels' })\n  customLabels;\n\n  /**\n   * core theme\n   */\n  @state()\n  theme;\n\n  /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has('content')) {\n      if (!this._originalContent) {\n        this._originalContent = this.content;\n      }\n      if (this.streaming) {\n        this._formatCode(false);\n      } else {\n        this._formatCode(false);\n      }\n    }\n    if (changedProperties.has('disableLineTicks')) {\n      this._formatCode(this.editable);\n    }\n\n    if (changedProperties.has('_editedContent')) {\n      this._formatCode(true);\n    }\n  }\n\n  /**\n   * _clearCode - get code type if it exists and remove backticks\n   * @param {string} content - content code string\n   */\n  _clearCode(content) {\n    const match = content.match(/^```(\\w+)?\\n([\\s\\S]*?)\\n```$/);\n    if (match) {\n      const [, lang, codeContent] = match;\n      return { language: lang || null, codeContent };\n    }\n    return { language: null, codeContent: content };\n  }\n\n  /** detect when component is rendered to process code object\n   */\n  firstUpdated() {\n    if (this.hasAttribute('max-height')) {\n      this.style.setProperty('--chat-code-height', this.maxHeight);\n    }\n    if (this.editable) {\n      this.disableLineTicks = false;\n      /*if (!this.disableLineTicks) {\n        this.style.setProperty('--chat-code-tick-offset', '16px');\n      }*/\n    }\n    if (this.content !== undefined) {\n      const codeAnalysis = this._clearCode(this.content);\n      if (codeAnalysis.language) {\n        this.content = codeAnalysis.codeContent;\n        this.language = codeAnalysis.language;\n      }\n      this._editedContent = this.content;\n      this._originalContent = this.content;\n      this._formatCode(false);\n    } else {\n      this._renderedLines = [\n        {\n          content: 'CodeElement ERROR: content is empty',\n          type: '',\n          paddingLeft: '8px',\n        },\n      ];\n    }\n    if (!this.disableAutoCompacting) {\n      this.resizeObserver = new ResizeObserver(async () => {\n        this._handleScroll();\n      });\n\n      this.resizeObserver.observe(this);\n    }\n  }\n\n  /** _handleScroll\n   */\n  _handleScroll() {\n    const textArea = this.shadowRoot?.querySelector(\n      '.clabs--chat-code-edit-area'\n    );\n    const editArea = this.shadowRoot?.querySelector(\n      '.clabs--chat-code-color-area'\n    );\n    if (\n      editArea instanceof HTMLElement &&\n      textArea instanceof HTMLElement &&\n      this.editable\n    ) {\n      editArea.scrollTop = textArea.scrollTop;\n      setTimeout(() => {\n        if (Math.abs(textArea.scrollHeight - editArea.scrollHeight) > 10) {\n          this._formatCode(true);\n        }\n      }, 100);\n    }\n  }\n\n  /**\n   * _handleResize - resize handler to check code container size\n   * @param {event} _event - resize event\n   */\n  _handleResize(_event) {\n    /*if(!this.disableLineTicks){\n      this.disableLineTicks = (this.clientWidth < 300);\n    }*/\n    this._handleScroll();\n  }\n\n  /** copy current code to clipboard when copy event is triggered\n   */\n  async _copyCode() {\n    try {\n      await navigator.clipboard.writeText(this._originalContent);\n    } catch (error) {\n      console.error('CodeElement ERROR:', error);\n    }\n  }\n\n  /**\n   * _getTheme - find current theme by checking parent background color\n   */\n  _getTheme() {\n    if (this.parentElement instanceof HTMLElement) {\n      const parentStyle = getComputedStyle(this.parentElement);\n      const backgroundColor = parentStyle.getPropertyValue('--cds-background');\n      const darkMode =\n        backgroundColor.startsWith('#') &&\n        parseInt(backgroundColor.replace('#', ''), 16) < 0xffffff / 2;\n      this.theme = darkMode ? 'g100' : 'white';\n    } else {\n      const parentStyle = getComputedStyle(this);\n      const backgroundColor = parentStyle.getPropertyValue('--cds-background');\n      const darkMode =\n        backgroundColor.startsWith('#') &&\n        parseInt(backgroundColor.replace('#', ''), 16) < 0xffffff / 2;\n      this.theme = darkMode ? 'g100' : 'white';\n    }\n  }\n\n  /** _controlTabbing - block tab event in typing\n   * @param {event} event - key event\n   */\n  _controlTabbing(event) {\n    //const newLines = event?.target?.value;\n    if (event?.key === 'Tab') {\n      event?.preventDefault();\n      /*let start = this.selectionStart;\n      let end = this.selectionEnd;\n      let tabbedline = newLines;\n\n      // set textarea value to: text before caret + tab + text after caret\n      tabbedline = tabbedline.substring(0, start) +\"dksjfjkdkdjsl\" + tabbedline.substring(end);\n\n      this.selectionStart = this.selectionEnd = start + 1;\n\n      if(event?.target?.value){\n        event.target.value = tabbedline;\n      }*/\n    }\n    setTimeout(() => {\n      this._handleScroll();\n    }, 100);\n  }\n\n  /**\n   * _handleFullCodeEdit - textarea input event to record and feedback edits to content\n   * @param {event} event - textarea input event\n   */\n  _handleFullCodeEdit(event) {\n    const newLines = event?.target?.value;\n    if (this._updateOnEdit) {\n      this._editedContent = newLines;\n      const codeEditedEvent = new CustomEvent('on-code-edit-change', {\n        detail: {\n          previousLineData: this.content,\n          newLineText: newLines,\n        },\n        bubbles: true,\n        composed: true,\n      });\n      this.dispatchEvent(codeEditedEvent);\n    }\n    if (this._editedContent === this._originalContent) {\n      this._currentlyEdited = false;\n    } else {\n      this._currentlyEdited = true;\n    }\n    this._handleScroll();\n  }\n\n  /**\n   * _startFullEdit - textarea input event to record and feedback edits to content\n   */\n  _startFullEdit() {\n    if (!this._currentlyEdited) {\n      this._editedContent = this.content;\n    }\n    this._currentlyEdited = true;\n  }\n\n  /**\n   * _handleCodeEdit - textarea input event to record and feedback edits to content\n   * @param {event} event - textarea input event\n   */\n  _handleCodeEdit(event) {\n    this._currentlyEdited = true;\n\n    const targetElement = event?.target;\n    const codeIndex = targetElement.getAttribute('data-codeindex');\n\n    if (codeIndex) {\n      const key = event.code;\n      const lineIndex = parseInt(codeIndex);\n      const editedValue = targetElement.value;\n      this._editedLines[lineIndex]['content'] = editedValue;\n      if (key == 'deleteContentBackward' || key == 'Backspace') {\n        if (editedValue.length < 1) {\n          event.preventDefault();\n          this._editedLines.splice(lineIndex, 1);\n        }\n      } else if (key == 'Enter') {\n        event.preventDefault();\n        const newLineObject = {\n          content: '',\n          type: '',\n          paddingLeft: this._editedLines[lineIndex].paddingLeft,\n        };\n        this._editedLines.splice(lineIndex + 1, 0, newLineObject);\n      }\n    }\n\n    this._renderedLines = [...this._editedLines];\n  }\n\n  /**\n   * _packageSpecFromArray\n   */\n  _packageSpecFromArray() {\n    return this._editedLines.map((line) => line.content).join('\\n');\n  }\n\n  /**\n   * _setCurrentIndex\n   * @param {event} event - textarea click event\n   */\n  _setCurrentIndex(event) {\n    if (this._fullEditMode) {\n      if (!this._currentlyFullyEdited) {\n        this._editedContent = this.content;\n      }\n      this._currentlyFullyEdited = true;\n    }\n\n    const targetElement = event?.target;\n    const codeIndex = targetElement?.getAttribute('data-codeindex');\n    if (codeIndex) {\n      this._currentEditIndex = codeIndex;\n    }\n  }\n\n  /**\n   * _handleEditValidation - button event when user confirms edit of code\n   */\n  _handleEditValidation() {\n    //this.content = this._editedContent;\n    const codeEditedEvent = new CustomEvent('on-code-edit-validation', {\n      detail: {\n        previousLineData: this._renderedLines,\n        newLineData: this._editedLines,\n        newLineText: this._editedContent, //this._packageSpecFromArray(),\n      },\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(codeEditedEvent);\n    //this._renderedLines = [...this._editedLines];\n    //this._originalLines = [...this._editedLines];\n    this.content = this._editedContent;\n    this._currentlyEdited = false;\n    this.requestUpdate();\n  }\n\n  /**\n   * _handleCancellation - button event when user aborts edit of code\n   */\n  _handleEditCancellation() {\n    this._editedContent = this._originalContent;\n    this._currentlyEdited = false;\n\n    const codeEditedEvent = new CustomEvent('on-code-edit-change', {\n      detail: {\n        previousLineData: this._originalContent,\n        newLineText: this._originalContent,\n        action: 'user canceled latest edit',\n      },\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(codeEditedEvent);\n    this._formatCode(true);\n  }\n\n  /** _highlightLine - run code coloring system\n   * @param {string} code - single code line\n   * @param {string} lang - language to render\n   */\n  _highlightLine(code, lang) {\n    return hljs.highlight(lang, code, true).value;\n  }\n\n  /** format code to properly display in HTML\n   * @param {boolean} edited - whether to render edited or not\n   */\n  _formatCode(edited) {\n    this._getTheme();\n    this._currentlyEdited = false;\n    const formattedText = edited ? this._editedContent : this.content;\n    const htmlSafeText = formattedText.replace(/```/g, '');\n\n    try {\n      if (!this.language) {\n        const detection = hljs.highlightAuto(htmlSafeText);\n        this.language = detection.language;\n      }\n    } catch (e) {\n      this.language = 'javascript';\n    }\n\n    const lines = htmlSafeText.trim().split('\\n');\n    const tabWidth = 24;\n    const paddingLeft = 8;\n    let textValues: {\n      content: string;\n      type: string;\n      paddingLeft: string;\n    }[] = [];\n\n    const highlightMode = true;\n    if (highlightMode) {\n      const highlightedCode = hljs.highlightAuto(htmlSafeText).value;\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = highlightedCode;\n      const codeLines: string[] = [];\n      let currentLine = '';\n      for (let i = 0; i < tempDiv.childNodes.length; i++) {\n        const node = tempDiv.childNodes[i];\n        if (node.nodeType === Node.TEXT_NODE) {\n          const lines = node.textContent?.split('\\n');\n          if (lines) {\n            for (let k = 0; k < lines.length; k++) {\n              if (k > 0) {\n                codeLines.push(\n                  currentLine.replace(/\\t/g, '&nbsp;&nbsp;&nbsp;')\n                );\n                currentLine = '';\n              }\n              currentLine += lines[k];\n            }\n          }\n        } else {\n          const element = node as Element;\n          currentLine += element.outerHTML;\n        }\n      }\n\n      if (currentLine) {\n        codeLines.push(currentLine.replace(/\\t/g, '&nbsp;&nbsp;&nbsp;'));\n      }\n      textValues = codeLines.map((line) => ({\n        content: line,\n        type: '',\n        paddingLeft: '0px',\n      }));\n    } else {\n      for (let i = 0; i < lines.length; i++) {\n        const lineType = '';\n        /*const trimmedLine = lines[i].replace(/\\t/g, '');\n      if (trimmedLine.startsWith('#') || trimmedLine.startsWith('//')) {\n        lineType = 'clabs--chat-code-line-comment';\n      }*/\n\n        let tabOffset = paddingLeft;\n        const tabMatch = lines[i].match(/^\\t*/);\n        if (tabMatch) {\n          tabOffset += tabMatch[0].length * tabWidth;\n        }\n        tabOffset = 0;\n        if (!lines[i].trim()) {\n          continue;\n        }\n        textValues.push({\n          content: lines[i].trim().replace(/\\t/g, ''),\n          type: lineType,\n          paddingLeft: tabOffset.toString() + 'px',\n        });\n      }\n    }\n\n    this._editedLines = JSON.parse(JSON.stringify(textValues));\n    this._originalLines = JSON.parse(JSON.stringify(textValues));\n    this._renderedLines = JSON.parse(JSON.stringify(textValues));\n    const tickWidth = 13 * textValues.length.toString().length;\n    this.style.setProperty(\n      '--chat-code-tick-width',\n      tickWidth.toString() + 'px'\n    );\n  }\n\n  /**\n   * _renderLabel - render default or custom label\n   * @param {string} key - target\n   */\n  _renderLabel = (key) => {\n    let customValue;\n    const labels = this.customLabels || {};\n    if (labels) {\n      switch (key) {\n        case 'code-copypaste-button':\n          customValue = labels[key] || 'Copy code';\n          break;\n        case 'code-copypaste-success':\n          customValue = labels[key] || 'Copieddddd!';\n          break;\n      }\n    }\n    return customValue || key;\n  };\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport hljs from 'highlightjs';\n// @ts-ignore\nimport styles from './codeElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass codeElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Set tab size flag int\n         */\n        this.tabSize = 3;\n        /**\n         * Editable boolean flag to let users know lines can be changed\n         */\n        this.disableCopyButton = false;\n        /**\n         * Editable boolean flag to let users know lines can be changed\n         */\n        this.disableEditButton = true;\n        /**\n         * _currentEditIndex - target line index\n         */\n        this._currentEditIndex = 0;\n        /**\n         * currentlyEdited - flag if any content was changed\n         */\n        this._currentlyEdited = false;\n        /**\n         * currentlyFullyEdited - flag if any content was changed\n         */\n        this._currentlyFullyEdited = false;\n        /**\n         * _fullEditMode - use one singular text area to edit\n         */\n        this._fullEditMode = true;\n        /**\n         * _updateOnEdit - send event on every edit\n         */\n        this._updateOnEdit = true;\n        /**\n         * prerender with highlight\n         */\n        this._preRender = true;\n        /**\n         * Array of lines parsed from content attribute\n         */\n        this._renderedLines = [];\n        /**\n         * Copied array of lines when edited\n         */\n        this._editedLines = [];\n        /**\n         * Original array of lines from content field\n         */\n        this._originalLines = [];\n        /**\n         * _renderLabel - render default or custom label\n         * @param {string} key - target\n         */\n        this._renderLabel = (key) => {\n            let customValue;\n            const labels = this.customLabels || {};\n            if (labels) {\n                switch (key) {\n                    case 'code-copypaste-button':\n                        customValue = labels[key] || 'Copy code';\n                        break;\n                    case 'code-copypaste-success':\n                        customValue = labels[key] || 'Copieddddd!';\n                        break;\n                }\n            }\n            return customValue || key;\n        };\n    }\n    /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('content')) {\n            if (!this._originalContent) {\n                this._originalContent = this.content;\n            }\n            if (this.streaming) {\n                this._formatCode(false);\n            }\n            else {\n                this._formatCode(false);\n            }\n        }\n        if (changedProperties.has('disableLineTicks')) {\n            this._formatCode(this.editable);\n        }\n        if (changedProperties.has('_editedContent')) {\n            this._formatCode(true);\n        }\n    }\n    /**\n     * _clearCode - get code type if it exists and remove backticks\n     * @param {string} content - content code string\n     */\n    _clearCode(content) {\n        const match = content.match(/^```(\\w+)?\\n([\\s\\S]*?)\\n```$/);\n        if (match) {\n            const [, lang, codeContent] = match;\n            return { language: lang || null, codeContent };\n        }\n        return { language: null, codeContent: content };\n    }\n    /** detect when component is rendered to process code object\n     */\n    firstUpdated() {\n        if (this.hasAttribute('max-height')) {\n            this.style.setProperty('--chat-code-height', this.maxHeight);\n        }\n        if (this.editable) {\n            this.disableLineTicks = false;\n            /*if (!this.disableLineTicks) {\n              this.style.setProperty('--chat-code-tick-offset', '16px');\n            }*/\n        }\n        if (this.content !== undefined) {\n            const codeAnalysis = this._clearCode(this.content);\n            if (codeAnalysis.language) {\n                this.content = codeAnalysis.codeContent;\n                this.language = codeAnalysis.language;\n            }\n            this._editedContent = this.content;\n            this._originalContent = this.content;\n            this._formatCode(false);\n        }\n        else {\n            this._renderedLines = [\n                {\n                    content: 'CodeElement ERROR: content is empty',\n                    type: '',\n                    paddingLeft: '8px',\n                },\n            ];\n        }\n        if (!this.disableAutoCompacting) {\n            this.resizeObserver = new ResizeObserver(async () => {\n                this._handleScroll();\n            });\n            this.resizeObserver.observe(this);\n        }\n    }\n    /** _handleScroll\n     */\n    _handleScroll() {\n        var _a, _b;\n        const textArea = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.clabs--chat-code-edit-area');\n        const editArea = (_b = this.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.clabs--chat-code-color-area');\n        if (editArea instanceof HTMLElement &&\n            textArea instanceof HTMLElement &&\n            this.editable) {\n            editArea.scrollTop = textArea.scrollTop;\n            setTimeout(() => {\n                if (Math.abs(textArea.scrollHeight - editArea.scrollHeight) > 10) {\n                    this._formatCode(true);\n                }\n            }, 100);\n        }\n    }\n    /**\n     * _handleResize - resize handler to check code container size\n     * @param {event} _event - resize event\n     */\n    _handleResize(_event) {\n        /*if(!this.disableLineTicks){\n          this.disableLineTicks = (this.clientWidth < 300);\n        }*/\n        this._handleScroll();\n    }\n    /** copy current code to clipboard when copy event is triggered\n     */\n    async _copyCode() {\n        try {\n            await navigator.clipboard.writeText(this._originalContent);\n        }\n        catch (error) {\n            console.error('CodeElement ERROR:', error);\n        }\n    }\n    /**\n     * _getTheme - find current theme by checking parent background color\n     */\n    _getTheme() {\n        if (this.parentElement instanceof HTMLElement) {\n            const parentStyle = getComputedStyle(this.parentElement);\n            const backgroundColor = parentStyle.getPropertyValue('--cds-background');\n            const darkMode = backgroundColor.startsWith('#') &&\n                parseInt(backgroundColor.replace('#', ''), 16) < 0xffffff / 2;\n            this.theme = darkMode ? 'g100' : 'white';\n        }\n        else {\n            const parentStyle = getComputedStyle(this);\n            const backgroundColor = parentStyle.getPropertyValue('--cds-background');\n            const darkMode = backgroundColor.startsWith('#') &&\n                parseInt(backgroundColor.replace('#', ''), 16) < 0xffffff / 2;\n            this.theme = darkMode ? 'g100' : 'white';\n        }\n    }\n    /** _controlTabbing - block tab event in typing\n     * @param {event} event - key event\n     */\n    _controlTabbing(event) {\n        //const newLines = event?.target?.value;\n        if ((event === null || event === void 0 ? void 0 : event.key) === 'Tab') {\n            event === null || event === void 0 ? void 0 : event.preventDefault();\n            /*let start = this.selectionStart;\n            let end = this.selectionEnd;\n            let tabbedline = newLines;\n      \n            // set textarea value to: text before caret + tab + text after caret\n            tabbedline = tabbedline.substring(0, start) +\"dksjfjkdkdjsl\" + tabbedline.substring(end);\n      \n            this.selectionStart = this.selectionEnd = start + 1;\n      \n            if(event?.target?.value){\n              event.target.value = tabbedline;\n            }*/\n        }\n        setTimeout(() => {\n            this._handleScroll();\n        }, 100);\n    }\n    /**\n     * _handleFullCodeEdit - textarea input event to record and feedback edits to content\n     * @param {event} event - textarea input event\n     */\n    _handleFullCodeEdit(event) {\n        var _a;\n        const newLines = (_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.value;\n        if (this._updateOnEdit) {\n            this._editedContent = newLines;\n            const codeEditedEvent = new CustomEvent('on-code-edit-change', {\n                detail: {\n                    previousLineData: this.content,\n                    newLineText: newLines,\n                },\n                bubbles: true,\n                composed: true,\n            });\n            this.dispatchEvent(codeEditedEvent);\n        }\n        if (this._editedContent === this._originalContent) {\n            this._currentlyEdited = false;\n        }\n        else {\n            this._currentlyEdited = true;\n        }\n        this._handleScroll();\n    }\n    /**\n     * _startFullEdit - textarea input event to record and feedback edits to content\n     */\n    _startFullEdit() {\n        if (!this._currentlyEdited) {\n            this._editedContent = this.content;\n        }\n        this._currentlyEdited = true;\n    }\n    /**\n     * _handleCodeEdit - textarea input event to record and feedback edits to content\n     * @param {event} event - textarea input event\n     */\n    _handleCodeEdit(event) {\n        this._currentlyEdited = true;\n        const targetElement = event === null || event === void 0 ? void 0 : event.target;\n        const codeIndex = targetElement.getAttribute('data-codeindex');\n        if (codeIndex) {\n            const key = event.code;\n            const lineIndex = parseInt(codeIndex);\n            const editedValue = targetElement.value;\n            this._editedLines[lineIndex]['content'] = editedValue;\n            if (key == 'deleteContentBackward' || key == 'Backspace') {\n                if (editedValue.length < 1) {\n                    event.preventDefault();\n                    this._editedLines.splice(lineIndex, 1);\n                }\n            }\n            else if (key == 'Enter') {\n                event.preventDefault();\n                const newLineObject = {\n                    content: '',\n                    type: '',\n                    paddingLeft: this._editedLines[lineIndex].paddingLeft,\n                };\n                this._editedLines.splice(lineIndex + 1, 0, newLineObject);\n            }\n        }\n        this._renderedLines = [...this._editedLines];\n    }\n    /**\n     * _packageSpecFromArray\n     */\n    _packageSpecFromArray() {\n        return this._editedLines.map((line) => line.content).join('\\n');\n    }\n    /**\n     * _setCurrentIndex\n     * @param {event} event - textarea click event\n     */\n    _setCurrentIndex(event) {\n        if (this._fullEditMode) {\n            if (!this._currentlyFullyEdited) {\n                this._editedContent = this.content;\n            }\n            this._currentlyFullyEdited = true;\n        }\n        const targetElement = event === null || event === void 0 ? void 0 : event.target;\n        const codeIndex = targetElement === null || targetElement === void 0 ? void 0 : targetElement.getAttribute('data-codeindex');\n        if (codeIndex) {\n            this._currentEditIndex = codeIndex;\n        }\n    }\n    /**\n     * _handleEditValidation - button event when user confirms edit of code\n     */\n    _handleEditValidation() {\n        //this.content = this._editedContent;\n        const codeEditedEvent = new CustomEvent('on-code-edit-validation', {\n            detail: {\n                previousLineData: this._renderedLines,\n                newLineData: this._editedLines,\n                newLineText: this._editedContent, //this._packageSpecFromArray(),\n            },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(codeEditedEvent);\n        //this._renderedLines = [...this._editedLines];\n        //this._originalLines = [...this._editedLines];\n        this.content = this._editedContent;\n        this._currentlyEdited = false;\n        this.requestUpdate();\n    }\n    /**\n     * _handleCancellation - button event when user aborts edit of code\n     */\n    _handleEditCancellation() {\n        this._editedContent = this._originalContent;\n        this._currentlyEdited = false;\n        const codeEditedEvent = new CustomEvent('on-code-edit-change', {\n            detail: {\n                previousLineData: this._originalContent,\n                newLineText: this._originalContent,\n                action: 'user canceled latest edit',\n            },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(codeEditedEvent);\n        this._formatCode(true);\n    }\n    /** _highlightLine - run code coloring system\n     * @param {string} code - single code line\n     * @param {string} lang - language to render\n     */\n    _highlightLine(code, lang) {\n        return hljs.highlight(lang, code, true).value;\n    }\n    /** format code to properly display in HTML\n     * @param {boolean} edited - whether to render edited or not\n     */\n    _formatCode(edited) {\n        var _a;\n        this._getTheme();\n        this._currentlyEdited = false;\n        const formattedText = edited ? this._editedContent : this.content;\n        const htmlSafeText = formattedText.replace(/```/g, '');\n        try {\n            if (!this.language) {\n                const detection = hljs.highlightAuto(htmlSafeText);\n                this.language = detection.language;\n            }\n        }\n        catch (e) {\n            this.language = 'javascript';\n        }\n        const lines = htmlSafeText.trim().split('\\n');\n        const tabWidth = 24;\n        const paddingLeft = 8;\n        let textValues = [];\n        const highlightMode = true;\n        if (highlightMode) {\n            const highlightedCode = hljs.highlightAuto(htmlSafeText).value;\n            const tempDiv = document.createElement('div');\n            tempDiv.innerHTML = highlightedCode;\n            const codeLines = [];\n            let currentLine = '';\n            for (let i = 0; i < tempDiv.childNodes.length; i++) {\n                const node = tempDiv.childNodes[i];\n                if (node.nodeType === Node.TEXT_NODE) {\n                    const lines = (_a = node.textContent) === null || _a === void 0 ? void 0 : _a.split('\\n');\n                    if (lines) {\n                        for (let k = 0; k < lines.length; k++) {\n                            if (k > 0) {\n                                codeLines.push(currentLine.replace(/\\t/g, '&nbsp;&nbsp;&nbsp;'));\n                                currentLine = '';\n                            }\n                            currentLine += lines[k];\n                        }\n                    }\n                }\n                else {\n                    const element = node;\n                    currentLine += element.outerHTML;\n                }\n            }\n            if (currentLine) {\n                codeLines.push(currentLine.replace(/\\t/g, '&nbsp;&nbsp;&nbsp;'));\n            }\n            textValues = codeLines.map((line) => ({\n                content: line,\n                type: '',\n                paddingLeft: '0px',\n            }));\n        }\n        else {\n            for (let i = 0; i < lines.length; i++) {\n                const lineType = '';\n                /*const trimmedLine = lines[i].replace(/\\t/g, '');\n              if (trimmedLine.startsWith('#') || trimmedLine.startsWith('//')) {\n                lineType = 'clabs--chat-code-line-comment';\n              }*/\n                let tabOffset = paddingLeft;\n                const tabMatch = lines[i].match(/^\\t*/);\n                if (tabMatch) {\n                    tabOffset += tabMatch[0].length * tabWidth;\n                }\n                tabOffset = 0;\n                if (!lines[i].trim()) {\n                    continue;\n                }\n                textValues.push({\n                    content: lines[i].trim().replace(/\\t/g, ''),\n                    type: lineType,\n                    paddingLeft: tabOffset.toString() + 'px',\n                });\n            }\n        }\n        this._editedLines = JSON.parse(JSON.stringify(textValues));\n        this._originalLines = JSON.parse(JSON.stringify(textValues));\n        this._renderedLines = JSON.parse(JSON.stringify(textValues));\n        const tickWidth = 13 * textValues.length.toString().length;\n        this.style.setProperty('--chat-code-tick-width', tickWidth.toString() + 'px');\n    }\n}\ncodeElement.styles = styles;\nexport default codeElement;\n__decorate([\n    property({ type: String, attribute: 'content', reflect: true })\n], codeElement.prototype, \"content\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'editable', reflect: true })\n], codeElement.prototype, \"editable\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-coloring' })\n], codeElement.prototype, \"enableColoring\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-language-display' })\n], codeElement.prototype, \"enableLanguageDisplay\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-line-ticks' })\n], codeElement.prototype, \"disableLineTicks\", void 0);\n__decorate([\n    property({ type: String, attribute: 'max-height' })\n], codeElement.prototype, \"maxHeight\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'tab-size' })\n], codeElement.prototype, \"tabSize\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-copy-button', reflect: true })\n], codeElement.prototype, \"disableCopyButton\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-edit-button', reflect: true })\n], codeElement.prototype, \"disableEditButton\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'streaming' })\n], codeElement.prototype, \"streaming\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-auto-compacting' })\n], codeElement.prototype, \"disableAutoCompacting\", void 0);\n__decorate([\n    state()\n], codeElement.prototype, \"_originalContent\", void 0);\n__decorate([\n    state()\n], codeElement.prototype, \"_editedContent\", void 0);\n__decorate([\n    state()\n], codeElement.prototype, \"_currentEditIndex\", void 0);\n__decorate([\n    state()\n], codeElement.prototype, \"_currentlyEdited\", void 0);\n__decorate([\n    state()\n], codeElement.prototype, \"_currentlyFullyEdited\", void 0);\n__decorate([\n    state()\n], codeElement.prototype, \"_fullEditMode\", void 0);\n__decorate([\n    state()\n], codeElement.prototype, \"_updateOnEdit\", void 0);\n__decorate([\n    state()\n], codeElement.prototype, \"language\", void 0);\n__decorate([\n    state()\n], codeElement.prototype, \"_preRender\", void 0);\n__decorate([\n    state()\n], codeElement.prototype, \"_renderedLines\", void 0);\n__decorate([\n    state()\n], codeElement.prototype, \"_editedLines\", void 0);\n__decorate([\n    state()\n], codeElement.prototype, \"_originalLines\", void 0);\n__decorate([\n    property({ type: Object, attribute: 'customLabels' })\n], codeElement.prototype, \"customLabels\", void 0);\n__decorate([\n    state()\n], codeElement.prototype, \"theme\", void 0);\n"]}