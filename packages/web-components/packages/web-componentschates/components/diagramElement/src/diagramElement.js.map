{"version":3,"sources":["components/diagramElement/src/diagramElement.ts","components/diagramElement/src/diagramElement.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","state","settings","stablePrefix","clabsPrefix","mermaid","styles","diagramElement","constructor","isHovered","renderSuccessful","loading","firstUpdated","generateUniqueId","_getTheme","options","_buildOptions","_diagramRenderer","initialize","width","style","setProperty","height","mutationObserver","MutationObserver","observe","parentElement","childList","whiteTheme","primaryColor","primaryBorderColor","primaryTextColor","secondaryColor","secondaryBorderColor","secondaryTextColor","edgeColor","edgeTextColor","background","nodeBackgroundColor","nodeBorderColor","nodeTextColor","fontFamily","fontSize","textColor","noteBkgColor","noteBorderColor","noteTextColor","g100Theme","currentTheme","theme","mainTheme","startOnLoad","themeVariables","flowchart","useMaxWidth","htmlLabels","sequenceDiagram","randomString","Math","random","toString","substr","_uniqueID","updated","changedProperties","has","_prepareDiagram","HTMLElement","parentStyle","getComputedStyle","backgroundColor","getPropertyValue","darkMode","startsWith","parseInt","replace","_scrollStreamArea","_a","textArea","shadowRoot","querySelector","scrollLeft","scrollWidth","_openFullscreenView","fullscreenMode","window","setTimeout","_closeFullscreenView","_handleMouseOut","_handleMouseOver","diagramDef","definition","targetID","getElementById","svg","render","renderedSVG","error","console","log","type","String","attribute","prototype","Number","Boolean"],"mappings":"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","file":"diagramElement.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nconst { stablePrefix: clabsPrefix } = settings;\nimport mermaid from 'mermaid';\n\n// @ts-ignore\nimport styles from './diagramElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class diagramElement extends LitElement {\n  static styles = styles;\n  /**\n   * Array of subelements parsed from API reply\n   */\n  @property({ type: String, attribute: 'definition' })\n  definition;\n\n  /**\n   * Title to be displayed top-left\n   */\n  @property({ type: String, attribute: 'title' })\n  title;\n\n  /**\n   * width - preassigned width from parent\n   */\n  @property({ type: Number, attribute: 'width' })\n  width;\n\n  /**\n   * height - preassigned height from parent\n   */\n  @property({ type: Number, attribute: 'height' })\n  height;\n\n  /**\n   * theme - specified by user or auto-generated from context\n   */\n  @property({ type: String, attribute: 'theme' })\n  theme;\n\n  /**\n   * streaming - denotes if content is being streamed in and incomplete\n   */\n  @property({ type: Boolean, attribute: 'streaming' })\n  streaming;\n\n  /**\n   * Thumbnail mode\n   */\n  @property({ type: Boolean, attribute: 'thumbnail-mode' })\n  thumbNailMode;\n\n  /**\n   * is the component hovered upon\n   */\n  @state()\n  isHovered = false;\n\n  /**\n   * uniqueID - unique ID egenrated in this component to target correct div when rendering\n   */\n  @state()\n  _uniqueID;\n\n  /**\n   * renderSuccessful - flag when a render operation has succeeded to begin post-hoc editing\n   */\n  @state()\n  renderSuccessful = false;\n\n  /**\n   * loading - initial state to show loading icon until error or successful render occurs\n   */\n  @state()\n  loading = true;\n\n  @state()\n  renderedSVG;\n\n  @state()\n  _diagramRenderer;\n\n  @state()\n  fullscreenMode;\n\n  private mutationObserver;\n\n  /** detect when component is rendered to process visualization specification object\n   */\n  firstUpdated() {\n    this.generateUniqueId();\n    this._getTheme();\n    const options: any = this._buildOptions();\n    this._diagramRenderer = mermaid.initialize(options);\n\n    if (this.width) {\n      this.style.setProperty('--chat-diagram-width', this.width + 'px');\n    }\n\n    if (this.height) {\n      this.style.setProperty('--chat-diagram-height', this.height + 'px');\n    }\n\n    this.mutationObserver = new MutationObserver(() => {\n      this._getTheme();\n    });\n    this.mutationObserver.observe(this.parentElement, { childList: false });\n  }\n\n  /** _buildOptions\n   * @param {String} mode - fullscreen, test or default\n   */\n  _buildOptions() {\n    const whiteTheme = {\n      primaryColor: '#a6c8ff',\n      primaryBorderColor: '#0f62fe',\n      primaryTextColor: '#161616',\n      secondaryColor: '#f4f4f4',\n      secondaryBorderColor: '#e0e0e0',\n      secondaryTextColor: '#525252',\n      edgeColor: '#8d8d8d',\n      edgeTextColor: '#525252',\n      background: '#ffffff',\n      nodeBackgroundColor: '#ffffff',\n      nodeBorderColor: '#e0e0e0',\n      nodeTextColor: '#161616',\n      fontFamily: \"'IBM Plex Sans', sans-serif\",\n      fontSize: '16px',\n      textColor: '#161616',\n      noteBkgColor: '#be95ff',\n      noteBorderColor: '#e0e0e0',\n      noteTextColor: '#161616',\n    };\n\n    const g100Theme = {\n      primaryColor: '#4589ff',\n      primaryBorderColor: '#0f62fe',\n      primaryTextColor: '#f4f4f4',\n      secondaryColor: '#262626',\n      secondaryBorderColor: '#6f6f6f',\n      secondaryTextColor: '#c6c6c6',\n      edgeColor: '#a8a8a8',\n      edgeTextColor: '#c6c6c6',\n      background: '#161616',\n      nodeBackgroundColor: '#161616',\n      nodeBorderColor: '#6f6f6f',\n      nodeTextColor: '#f4f4f4',\n      fontFamily: \"'IBM Plex Sans', sans-serif\",\n      fontSize: '16px',\n      textColor: '#f4f4f4',\n      noteBkgColor: '#8a3ffc',\n      noteBorderColor: '#6f6f6f',\n      noteTextColor: '#f4f4f4',\n    };\n    const currentTheme = this.theme == 'light' ? whiteTheme : g100Theme;\n    const mainTheme: any = 'base';\n    return {\n      startOnLoad: false,\n      theme: mainTheme,\n      themeVariables: currentTheme,\n      flowchart: { useMaxWidth: true, htmlLabels: true },\n      sequenceDiagram: { useMaxWidth: true, htmlLabels: true },\n    };\n  }\n\n  /**\n   * generateUniqueId - create random string to give the target visualization div\n   */\n  generateUniqueId() {\n    const randomString: string = Math.random().toString(36).substr(2, 9);\n    this._uniqueID = randomString;\n  }\n\n  /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  async updated(changedProperties) {\n    if (changedProperties.has('_uniqueID')) {\n      await this._prepareDiagram();\n    }\n    if (changedProperties.has('theme')) {\n      await this._prepareDiagram();\n    }\n  }\n\n  /**\n   * _getTheme - find current theme by checking parent background color\n   */\n  _getTheme() {\n    if (this.parentElement instanceof HTMLElement) {\n      const parentStyle = getComputedStyle(this.parentElement);\n      const backgroundColor = parentStyle.getPropertyValue('--cds-background');\n      const darkMode =\n        backgroundColor.startsWith('#') &&\n        parseInt(backgroundColor.replace('#', ''), 16) < 0xffffff / 2;\n      this.theme = darkMode ? 'dark' : 'light';\n    }\n  }\n\n  /**\n   * _scrollStreamArea - scroll div to display latest token added\n   */\n  _scrollStreamArea() {\n    const textArea = this.shadowRoot?.querySelector(\n      '.clabs--chat-diagram-stream-text-content'\n    );\n    if (textArea instanceof HTMLElement) {\n      textArea.scrollLeft = textArea.scrollWidth;\n    }\n  }\n\n  /**\n   * _openFullscreenView -\n   */\n  _openFullscreenView() {\n    this.fullscreenMode = true;\n    window.setTimeout(() => {\n      this._prepareDiagram();\n    }, 200);\n  }\n\n  /**\n   * _openFullscreenView -\n   */\n  _closeFullscreenView() {\n    this.fullscreenMode = false;\n    //this._preparediagram(\"default\");\n  }\n\n  /**\n   * _handleMouseOut - see if component lost mouse content\n   */\n  _handleMouseOut() {\n    this.isHovered = false;\n  }\n\n  /**\n   * _handleMouseOut - see if component lost mouse content\n   */\n  _handleMouseOver() {\n    this.isHovered = true;\n  }\n\n  /**\n   * Prepare diagram object for rendering from content string\n   * @param {String} mode - which mode to render with smilesDrawer\n   */\n  async _prepareDiagram() {\n    const diagramDef = this.definition.replace(/```/g, '');\n    //const preID = clabsPrefix + '--chat-diagram-previz-id-' + this._uniqueID;\n    const targetID =\n      clabsPrefix + '--chat-diagram-container-id-' + this._uniqueID;\n\n    const target = this.shadowRoot?.getElementById(targetID);\n    //const preTarget = this.shadowRoot?.getElementById(preID);\n    if (target instanceof HTMLElement) {\n      try {\n        //const type = mermaid.detectType(diagramDef);\n        //await this._renderDiagram(type,diagramDef,targetID,target);\n        const { svg } = await mermaid.render(targetID, diagramDef);\n        this.renderedSVG = svg;\n        //target.innerHTML = svg;\n\n        //mermaid.run({nodes:[preTarget]})\n      } catch (error) {\n        console.log('type fail');\n        console.error(error);\n      }\n    }\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nconst { stablePrefix: clabsPrefix } = settings;\nimport mermaid from 'mermaid';\n// @ts-ignore\nimport styles from './diagramElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass diagramElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * is the component hovered upon\n         */\n        this.isHovered = false;\n        /**\n         * renderSuccessful - flag when a render operation has succeeded to begin post-hoc editing\n         */\n        this.renderSuccessful = false;\n        /**\n         * loading - initial state to show loading icon until error or successful render occurs\n         */\n        this.loading = true;\n    }\n    /** detect when component is rendered to process visualization specification object\n     */\n    firstUpdated() {\n        this.generateUniqueId();\n        this._getTheme();\n        const options = this._buildOptions();\n        this._diagramRenderer = mermaid.initialize(options);\n        if (this.width) {\n            this.style.setProperty('--chat-diagram-width', this.width + 'px');\n        }\n        if (this.height) {\n            this.style.setProperty('--chat-diagram-height', this.height + 'px');\n        }\n        this.mutationObserver = new MutationObserver(() => {\n            this._getTheme();\n        });\n        this.mutationObserver.observe(this.parentElement, { childList: false });\n    }\n    /** _buildOptions\n     * @param {String} mode - fullscreen, test or default\n     */\n    _buildOptions() {\n        const whiteTheme = {\n            primaryColor: '#a6c8ff',\n            primaryBorderColor: '#0f62fe',\n            primaryTextColor: '#161616',\n            secondaryColor: '#f4f4f4',\n            secondaryBorderColor: '#e0e0e0',\n            secondaryTextColor: '#525252',\n            edgeColor: '#8d8d8d',\n            edgeTextColor: '#525252',\n            background: '#ffffff',\n            nodeBackgroundColor: '#ffffff',\n            nodeBorderColor: '#e0e0e0',\n            nodeTextColor: '#161616',\n            fontFamily: \"'IBM Plex Sans', sans-serif\",\n            fontSize: '16px',\n            textColor: '#161616',\n            noteBkgColor: '#be95ff',\n            noteBorderColor: '#e0e0e0',\n            noteTextColor: '#161616',\n        };\n        const g100Theme = {\n            primaryColor: '#4589ff',\n            primaryBorderColor: '#0f62fe',\n            primaryTextColor: '#f4f4f4',\n            secondaryColor: '#262626',\n            secondaryBorderColor: '#6f6f6f',\n            secondaryTextColor: '#c6c6c6',\n            edgeColor: '#a8a8a8',\n            edgeTextColor: '#c6c6c6',\n            background: '#161616',\n            nodeBackgroundColor: '#161616',\n            nodeBorderColor: '#6f6f6f',\n            nodeTextColor: '#f4f4f4',\n            fontFamily: \"'IBM Plex Sans', sans-serif\",\n            fontSize: '16px',\n            textColor: '#f4f4f4',\n            noteBkgColor: '#8a3ffc',\n            noteBorderColor: '#6f6f6f',\n            noteTextColor: '#f4f4f4',\n        };\n        const currentTheme = this.theme == 'light' ? whiteTheme : g100Theme;\n        const mainTheme = 'base';\n        return {\n            startOnLoad: false,\n            theme: mainTheme,\n            themeVariables: currentTheme,\n            flowchart: { useMaxWidth: true, htmlLabels: true },\n            sequenceDiagram: { useMaxWidth: true, htmlLabels: true },\n        };\n    }\n    /**\n     * generateUniqueId - create random string to give the target visualization div\n     */\n    generateUniqueId() {\n        const randomString = Math.random().toString(36).substr(2, 9);\n        this._uniqueID = randomString;\n    }\n    /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    async updated(changedProperties) {\n        if (changedProperties.has('_uniqueID')) {\n            await this._prepareDiagram();\n        }\n        if (changedProperties.has('theme')) {\n            await this._prepareDiagram();\n        }\n    }\n    /**\n     * _getTheme - find current theme by checking parent background color\n     */\n    _getTheme() {\n        if (this.parentElement instanceof HTMLElement) {\n            const parentStyle = getComputedStyle(this.parentElement);\n            const backgroundColor = parentStyle.getPropertyValue('--cds-background');\n            const darkMode = backgroundColor.startsWith('#') &&\n                parseInt(backgroundColor.replace('#', ''), 16) < 0xffffff / 2;\n            this.theme = darkMode ? 'dark' : 'light';\n        }\n    }\n    /**\n     * _scrollStreamArea - scroll div to display latest token added\n     */\n    _scrollStreamArea() {\n        var _a;\n        const textArea = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.clabs--chat-diagram-stream-text-content');\n        if (textArea instanceof HTMLElement) {\n            textArea.scrollLeft = textArea.scrollWidth;\n        }\n    }\n    /**\n     * _openFullscreenView -\n     */\n    _openFullscreenView() {\n        this.fullscreenMode = true;\n        window.setTimeout(() => {\n            this._prepareDiagram();\n        }, 200);\n    }\n    /**\n     * _openFullscreenView -\n     */\n    _closeFullscreenView() {\n        this.fullscreenMode = false;\n        //this._preparediagram(\"default\");\n    }\n    /**\n     * _handleMouseOut - see if component lost mouse content\n     */\n    _handleMouseOut() {\n        this.isHovered = false;\n    }\n    /**\n     * _handleMouseOut - see if component lost mouse content\n     */\n    _handleMouseOver() {\n        this.isHovered = true;\n    }\n    /**\n     * Prepare diagram object for rendering from content string\n     * @param {String} mode - which mode to render with smilesDrawer\n     */\n    async _prepareDiagram() {\n        var _a;\n        const diagramDef = this.definition.replace(/```/g, '');\n        //const preID = clabsPrefix + '--chat-diagram-previz-id-' + this._uniqueID;\n        const targetID = clabsPrefix + '--chat-diagram-container-id-' + this._uniqueID;\n        const target = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.getElementById(targetID);\n        //const preTarget = this.shadowRoot?.getElementById(preID);\n        if (target instanceof HTMLElement) {\n            try {\n                //const type = mermaid.detectType(diagramDef);\n                //await this._renderDiagram(type,diagramDef,targetID,target);\n                const { svg } = await mermaid.render(targetID, diagramDef);\n                this.renderedSVG = svg;\n                //target.innerHTML = svg;\n                //mermaid.run({nodes:[preTarget]})\n            }\n            catch (error) {\n                console.log('type fail');\n                console.error(error);\n            }\n        }\n    }\n}\ndiagramElement.styles = styles;\nexport default diagramElement;\n__decorate([\n    property({ type: String, attribute: 'definition' })\n], diagramElement.prototype, \"definition\", void 0);\n__decorate([\n    property({ type: String, attribute: 'title' })\n], diagramElement.prototype, \"title\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'width' })\n], diagramElement.prototype, \"width\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'height' })\n], diagramElement.prototype, \"height\", void 0);\n__decorate([\n    property({ type: String, attribute: 'theme' })\n], diagramElement.prototype, \"theme\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'streaming' })\n], diagramElement.prototype, \"streaming\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'thumbnail-mode' })\n], diagramElement.prototype, \"thumbNailMode\", void 0);\n__decorate([\n    state()\n], diagramElement.prototype, \"isHovered\", void 0);\n__decorate([\n    state()\n], diagramElement.prototype, \"_uniqueID\", void 0);\n__decorate([\n    state()\n], diagramElement.prototype, \"renderSuccessful\", void 0);\n__decorate([\n    state()\n], diagramElement.prototype, \"loading\", void 0);\n__decorate([\n    state()\n], diagramElement.prototype, \"renderedSVG\", void 0);\n__decorate([\n    state()\n], diagramElement.prototype, \"_diagramRenderer\", void 0);\n__decorate([\n    state()\n], diagramElement.prototype, \"fullscreenMode\", void 0);\n"]}