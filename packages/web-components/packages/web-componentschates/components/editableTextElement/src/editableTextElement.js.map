{"version":3,"sources":["components/editableTextElement/src/editableTextElement.ts","components/editableTextElement/src/editableTextElement.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","state","styles","editableTextElement","constructor","_minWidth","updated","changedProperties","has","style","setProperty","Math","max","_presetWidth","firstUpdated","content","_presetHeight","_presetTextAreaSize","_initiateTextAreaHeight","_setEditedMessage","event","_editedMessage","value","messageEditedEvent","CustomEvent","detail","bubbles","composed","dispatchEvent","updateTextAreaHeight","_a","textArea","shadowRoot","querySelector","HTMLElement","focus","setTimeout","height","scrollHeight","requestUpdate","type","String","attribute","reflect","prototype","Number"],"mappings":"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","file":"editableTextElement.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n\n// @ts-ignore\nimport styles from './editableTextElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class editableTextElement extends LitElement {\n  static styles = styles;\n\n  /**\n   * Array of subelements parsed from API reply\n   */\n  @property({ type: String, attribute: 'content', reflect: true })\n  content;\n\n  /**\n   * Edited text content of text area\n   */\n  @state()\n  _editedMessage;\n\n  /**\n   * Preset width from source text\n   */\n  @property({ type: Number, attribute: 'preset-width' })\n  _presetWidth;\n\n  /**\n   * Preset height from source text\n   */\n  @property({ type: Number, attribute: 'preset-height' })\n  _presetHeight;\n\n  /**\n   * Preset min width from source text\n   */\n  @property({ type: Number, attribute: 'min-width' })\n  _minWidth = 123;\n\n  /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has('_presetWidth')) {\n      this.style.setProperty(\n        '--chat-editable-text-width',\n        Math.max(this._minWidth, this._presetWidth - 30) + 'px'\n      );\n    }\n  }\n\n  /** detect when component is rendered to process text object\n   */\n  firstUpdated() {\n    if (this.content !== null) {\n      if (this._presetWidth && this._presetHeight) {\n        this._presetTextAreaSize();\n      } else {\n        this._initiateTextAreaHeight();\n      }\n    }\n    if (this._presetWidth) {\n      this.style.setProperty(\n        '--chat-editable-text-width',\n        Math.max(this._minWidth, this._presetWidth - 30) + 'px'\n      );\n    }\n  }\n\n  /** record edited changes on message\n   * @param {event} event - lit input event\n   **/\n  _setEditedMessage(event) {\n    this._editedMessage = event.target.value;\n    const messageEditedEvent = new CustomEvent('message-edited', {\n      detail: { value: this._editedMessage },\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(messageEditedEvent);\n    this.updateTextAreaHeight(event);\n  }\n\n  /**\n   * Set a new height based on the size of the text area\n   */\n  _initiateTextAreaHeight() {\n    const textArea: any = this.shadowRoot?.querySelector(\n      '.clabs--chat-editable-text-area'\n    );\n\n    if (textArea instanceof HTMLElement) {\n      textArea.focus();\n      setTimeout(() => {\n        textArea.style.height = 'auto';\n        textArea.style.height = textArea.scrollHeight + 'px';\n        this.requestUpdate();\n      }, 1);\n    }\n  }\n\n  /**\n   * Set a new height based on the size of the text area\n   */\n  _presetTextAreaSize() {\n    const textArea: any = this.shadowRoot?.querySelector(\n      '.clabs--chat-editable-text-area'\n    );\n\n    if (textArea instanceof HTMLElement) {\n      textArea.focus();\n      textArea.style.height = this._presetHeight + 'px';\n      textArea.style.height = this._presetWidth + 'px';\n      this.requestUpdate();\n    }\n  }\n\n  /**\n   * Set a new height based on the size of the text area\n   * @param {Object} event -- event object\n   */\n  updateTextAreaHeight(event) {\n    const textArea = event.target;\n    if (textArea instanceof HTMLElement) {\n      setTimeout(() => {\n        textArea.style.height = 'auto';\n        textArea.style.height = textArea.scrollHeight + 'px';\n        this.requestUpdate();\n      }, 1);\n    }\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n// @ts-ignore\nimport styles from './editableTextElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass editableTextElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Preset min width from source text\n         */\n        this._minWidth = 123;\n    }\n    /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('_presetWidth')) {\n            this.style.setProperty('--chat-editable-text-width', Math.max(this._minWidth, this._presetWidth - 30) + 'px');\n        }\n    }\n    /** detect when component is rendered to process text object\n     */\n    firstUpdated() {\n        if (this.content !== null) {\n            if (this._presetWidth && this._presetHeight) {\n                this._presetTextAreaSize();\n            }\n            else {\n                this._initiateTextAreaHeight();\n            }\n        }\n        if (this._presetWidth) {\n            this.style.setProperty('--chat-editable-text-width', Math.max(this._minWidth, this._presetWidth - 30) + 'px');\n        }\n    }\n    /** record edited changes on message\n     * @param {event} event - lit input event\n     **/\n    _setEditedMessage(event) {\n        this._editedMessage = event.target.value;\n        const messageEditedEvent = new CustomEvent('message-edited', {\n            detail: { value: this._editedMessage },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(messageEditedEvent);\n        this.updateTextAreaHeight(event);\n    }\n    /**\n     * Set a new height based on the size of the text area\n     */\n    _initiateTextAreaHeight() {\n        var _a;\n        const textArea = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.clabs--chat-editable-text-area');\n        if (textArea instanceof HTMLElement) {\n            textArea.focus();\n            setTimeout(() => {\n                textArea.style.height = 'auto';\n                textArea.style.height = textArea.scrollHeight + 'px';\n                this.requestUpdate();\n            }, 1);\n        }\n    }\n    /**\n     * Set a new height based on the size of the text area\n     */\n    _presetTextAreaSize() {\n        var _a;\n        const textArea = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.clabs--chat-editable-text-area');\n        if (textArea instanceof HTMLElement) {\n            textArea.focus();\n            textArea.style.height = this._presetHeight + 'px';\n            textArea.style.height = this._presetWidth + 'px';\n            this.requestUpdate();\n        }\n    }\n    /**\n     * Set a new height based on the size of the text area\n     * @param {Object} event -- event object\n     */\n    updateTextAreaHeight(event) {\n        const textArea = event.target;\n        if (textArea instanceof HTMLElement) {\n            setTimeout(() => {\n                textArea.style.height = 'auto';\n                textArea.style.height = textArea.scrollHeight + 'px';\n                this.requestUpdate();\n            }, 1);\n        }\n    }\n}\neditableTextElement.styles = styles;\nexport default editableTextElement;\n__decorate([\n    property({ type: String, attribute: 'content', reflect: true })\n], editableTextElement.prototype, \"content\", void 0);\n__decorate([\n    state()\n], editableTextElement.prototype, \"_editedMessage\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'preset-width' })\n], editableTextElement.prototype, \"_presetWidth\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'preset-height' })\n], editableTextElement.prototype, \"_presetHeight\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'min-width' })\n], editableTextElement.prototype, \"_minWidth\", void 0);\n"]}