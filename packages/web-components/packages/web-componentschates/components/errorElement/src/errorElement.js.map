{"version":3,"sources":["components/errorElement/src/errorElement.ts","components/errorElement/src/errorElement.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","styles","errorElement","updated","changedProperties","firstUpdated","_formatText","inputText","capitalize","lines","split","capitalizedLines","map","line","trimStart","charAt","toUpperCase","slice","join","prunedText","replace","formattedText","htmlText","type","String","attribute","reflect","prototype","Boolean"],"mappings":"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","file":"errorElement.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\n\n// @ts-ignore\nimport styles from './errorElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class errorElement extends LitElement {\n  static styles = styles;\n\n  /**\n   * Content error to display in errorElement\n   */\n  @property({ type: String, attribute: 'content', reflect: true })\n  content;\n\n  /**\n   * Capitalization boolean to edit AI returned text or not\n   */\n  @property({ type: Boolean, attribute: 'capitalize' })\n  capitalize;\n\n  /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  updated(changedProperties) {\n    super.updated(changedProperties);\n  }\n\n  /** detect when component is rendered to process text object\n   */\n  firstUpdated() {}\n\n  /** format text to properly display in HTML\n   * @param {string} inputText - text to be rendered in subelement\n   * @param {boolean} capitalize - capitalization flag\n   */\n  _formatText(inputText, capitalize) {\n    if (capitalize) {\n      const lines = inputText.split(/(?<=[.!?]\\s)|(?<=\\n)/g);\n      const capitalizedLines = lines.map(\n        (line) =>\n          line.trimStart().charAt(0).toUpperCase() + line.trimStart().slice(1)\n      );\n      inputText = capitalizedLines.join('');\n    }\n\n    const prunedText = inputText.replace(/^\\s*\\n|\\n\\s*$/g, '');\n    const formattedText = prunedText.replace(/\\t/g, '&nbsp;&nbsp;');\n    const htmlText = formattedText.replace(/\\n/g, '<br>');\n    return htmlText;\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\n// @ts-ignore\nimport styles from './errorElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass errorElement extends LitElement {\n    /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    updated(changedProperties) {\n        super.updated(changedProperties);\n    }\n    /** detect when component is rendered to process text object\n     */\n    firstUpdated() { }\n    /** format text to properly display in HTML\n     * @param {string} inputText - text to be rendered in subelement\n     * @param {boolean} capitalize - capitalization flag\n     */\n    _formatText(inputText, capitalize) {\n        if (capitalize) {\n            const lines = inputText.split(/(?<=[.!?]\\s)|(?<=\\n)/g);\n            const capitalizedLines = lines.map((line) => line.trimStart().charAt(0).toUpperCase() + line.trimStart().slice(1));\n            inputText = capitalizedLines.join('');\n        }\n        const prunedText = inputText.replace(/^\\s*\\n|\\n\\s*$/g, '');\n        const formattedText = prunedText.replace(/\\t/g, '&nbsp;&nbsp;');\n        const htmlText = formattedText.replace(/\\n/g, '<br>');\n        return htmlText;\n    }\n}\nerrorElement.styles = styles;\nexport default errorElement;\n__decorate([\n    property({ type: String, attribute: 'content', reflect: true })\n], errorElement.prototype, \"content\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'capitalize' })\n], errorElement.prototype, \"capitalize\", void 0);\n"]}