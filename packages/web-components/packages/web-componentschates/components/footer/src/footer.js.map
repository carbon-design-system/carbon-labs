{"version":3,"sources":["components/footer/src/footer.ts","components/footer/src/footer.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","state","property","settings","stablePrefix","clabsPrefix","styles","footer","constructor","_forceDisableInput","_messageText","_isListening","_voiceAPIAvailable","_isPromptFocused","hideContextMessage","_speechRecognition","notificationCount","showNotification","_renderLabel","customValue","labels","customLabels","firstUpdated","_checkSize","_resizeObserver","ResizeObserver","observe","parentElement","SpeechRecognition","window","webkitSpeechRecognition","continuous","interimResults","onresult","event","_handleVoiceInput","onend","_handleVoiceInputEnd","updated","changedProperties","has","updateTextAreaHeight","_characterLimit","_checkLimit","_presetEntry","setTimeout","limit","Number","MAX_SAFE_INTEGER","_contextMessage","toString","_contextMessageType","_checkKeyboardEscapeB","blockedSendTest","shiftKey","_fullscreenMode","preventDefault","lastKeyEvent","CustomEvent","detail","action","originalEvent","bubbles","composed","dispatchEvent","_checkKeyboardEscapeC","_checkKeyboardEscape","parentWidth","clientWidth","parentHeight","clientHeight","_expandedWidth","_expandedHeight","_handleInput","value","_sendInputToParent","_startRecording","_a","start","recordingEvent","currentMessage","_endRecording","stop","_endStreaming","enableCancellation","stopResponseEvent","stopStreamEvent","_currentlyStreaming","result","results","resultIndex","transcript","_handleMenuFileUpload","files","addedFiles","console","log","_setMessageText","_b","maxheight","textArea","shadowRoot","querySelector","textAreaContainer","HTMLElement","style","height","newHeight","scrollHeight","setProperty","resetTextAreaHeight","scrollTop","_textAreaIsFocused","type","_handleContextMessageClose","inputEvent","textInputValue","requestUpdate","String","attribute","prototype","Boolean"],"mappings":"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","file":"footer.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { state, property } from 'lit/decorators.js';\n\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nconst { stablePrefix: clabsPrefix } = settings;\n// @ts-ignore\nimport styles from './footer.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class footer extends LitElement {\n  static styles = styles;\n\n  /**\n   * resizeobserver for when parent is larger then 672px\n   */\n  private _resizeObserver;\n\n  /**\n   * custom placeholder for input field\n   */\n  @property({ type: String, attribute: 'input-placeholder' })\n  _inputPlaceholder;\n\n  /**\n   * disable user input such as when chat is loading\n   */\n  @property({ type: Boolean, attribute: 'disable-input' })\n  _disableInput;\n\n  /**\n   * disable user input such as when chat is loading\n   */\n  @property({ type: Boolean, attribute: 'fullscreen-mode' })\n  _fullscreenMode;\n\n  /**\n   * force disable input because of internal error state\n   */\n  @state()\n  _forceDisableInput = false;\n\n  /**\n   * maximum character count for input, show warning and disable input\n   */\n  @property({ type: Number, attribute: 'character-limit' })\n  _characterLimit;\n\n  /**\n   * expanded mode when chat width is large\n   */\n  @state()\n  _expandedHeight;\n\n  /**\n   * expanded mode when chat height is large\n   */\n  @state()\n  _expandedWidth;\n\n  /**\n   * string variable edited by textInput, auto-updates at every keystroke and is sent to the api url on 'enter' or 'send' button click\n   */\n  @state()\n  _messageText = '';\n\n  /**\n   * boolean denoting if recording is in progress\n   */\n  @state()\n  _isListening = false;\n\n  /**\n   * boolean denoting if voiceAPI capabilities are available in browser, otherwise disable icon\n   */\n  @state()\n  _voiceAPIAvailable = true;\n\n  /**\n   * see if text area is currently focused or not\n   */\n  @state()\n  _isPromptFocused = false;\n\n  /**\n   * triggered when close icon is selected\n   */\n  @state()\n  hideContextMessage = false;\n\n  /**\n   * add context meesage above prompt\n   */\n  @property({ type: String, attribute: 'context-message' })\n  _contextMessage;\n\n  /**\n   * type context meesage above prompt\n   */\n  @property({ type: String, attribute: 'context-message-type' })\n  _contextMessageType;\n\n  /**\n   * type context meesage above prompt\n   */\n  @property({ type: Boolean, attribute: 'currently-streaming' })\n  _currentlyStreaming;\n\n  /**\n   * enable requestion cancellation\n   */\n  @property({ type: Boolean, attribute: 'enable-cancellation' })\n  enableCancellation;\n\n  /**\n   * speechRecognition object to interface with text input\n   */\n  private _speechRecognition: any = null;\n\n  /**\n   * global labels context\n   */\n  @state()\n  _customLabels;\n\n  /**\n   * present entry for auto-prompts\n   */\n  @property({ type: String, attribute: 'preset-entry' })\n  _presetEntry;\n\n  /**\n   * custom label presets\n   */\n  @property({ type: Object, attribute: 'customLabels' })\n  customLabels;\n\n  /**\n   * query in progress\n   */\n  @property({ type: Boolean, attribute: 'query-processing' })\n  queryProcessing;\n\n  /**\n   * notification counter to display\n   */\n  @property({ type: String, attribute: 'notification-count' })\n  notificationCount = '0';\n\n  /**\n   * trigger notification display\n   */\n  @state()\n  showNotification = false;\n\n  /**\n   * LIT firstUpdated cycle to define initial parameters on first render\n   */\n  firstUpdated() {\n    this._checkSize();\n\n    this._resizeObserver = new ResizeObserver(async () => {\n      this._checkSize();\n    });\n    this._resizeObserver.observe(this.parentElement);\n\n    const SpeechRecognition =\n      (window as any).SpeechRecognition ||\n      (window as any).webkitSpeechRecognition;\n\n    if (SpeechRecognition) {\n      this._speechRecognition = new SpeechRecognition();\n      this._speechRecognition.continuous = true;\n      this._speechRecognition.interimResults = true;\n      /**\n       * handles the result event from speech recognition\n       * @param {event} event - object containing speech result\n       */\n      this._speechRecognition.onresult = (event) => {\n        this._handleVoiceInput(event);\n      };\n      /**\n       * handles the end event from speechrecognition\n       */\n      this._speechRecognition.onend = () => {\n        this._handleVoiceInputEnd();\n      };\n    } else {\n      this._voiceAPIAvailable = false;\n    }\n  }\n\n  /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has('_messageText')) {\n      this.updateTextAreaHeight();\n      if (this._characterLimit) {\n        this._checkLimit();\n      }\n    }\n    if (changedProperties.has('_fullscreenMode')) {\n      this._checkSize();\n    }\n    if (changedProperties.has('_presetEntry')) {\n      this._messageText = this._presetEntry;\n    }\n    if (changedProperties.has('notificationCount')) {\n      if (this.notificationCount !== '0') {\n        this.showNotification = true;\n        setTimeout(() => {\n          this.showNotification = false;\n        }, 1250);\n      }\n    }\n  }\n\n  /**\n   * _renderLabel - render default or custom label\n   * @param {string} key - value to lookup\n   */\n  _renderLabel = (key) => {\n    let customValue;\n    const labels = this.customLabels || {};\n    if (labels) {\n      switch (key) {\n        case 'prompt-start-listening':\n          customValue = labels[key] || 'Start listening';\n          break;\n        case 'prompt-stop-listening':\n          customValue = labels[key] || 'Stop listening';\n          break;\n        case 'prompt-microphone-unavailable':\n          customValue = labels[key] || 'Microphone unavailable';\n          break;\n        case 'prompt-loading-state-placeholder':\n          customValue = labels[key] || 'Thinking...';\n          break;\n        case 'prompt-entry-placeholder':\n          customValue = labels[key] || 'Type something...';\n          break;\n        case 'prompt-send-button':\n          customValue = labels[key] || 'Send response';\n          break;\n        case 'prompt-send-blocked-button':\n          customValue = labels[key] || 'Send unavailable';\n          break;\n        case 'prompt-cancel-button':\n          customValue = labels[key] || 'Cancel request';\n          break;\n        case 'prompt-close-warning':\n          customValue = labels[key] || 'Close';\n          break;\n        case 'complex-feedback-notification-title':\n          customValue = labels[key] || 'Feedback sent';\n          break;\n        case 'complex-feedback-notification-subtitle':\n          customValue = labels[key] || 'Thank you, we value your input';\n          break;\n        case 'complex-feedback-notification-close-label':\n          customValue = labels[key] || 'Close';\n          break;\n      }\n    }\n    return customValue || key;\n  };\n\n  /** _checkLimit - show warning message if character limit is exceeded\n   */\n  _checkLimit() {\n    const limit = this._characterLimit || Number.MAX_SAFE_INTEGER;\n    if (this._messageText.length > limit) {\n      this._contextMessage =\n        '(' +\n        this._messageText.length +\n        '/' +\n        limit.toString() +\n        ') Character limit exceeded';\n      this._contextMessageType = 'error';\n      this._forceDisableInput = true;\n    } else {\n      this._contextMessage = null;\n      this._contextMessageType = null;\n      this._forceDisableInput = false;\n    }\n  }\n\n  /** handle user tab inputs, check if escapes chat\n   * @param {event} event - lit event sent by the keyboard input\n   **/\n  _checkKeyboardEscapeB(event) {\n    const blockedSendTest = this._messageText === '' || this._forceDisableInput;\n    if (\n      event.key === 'Tab' &&\n      blockedSendTest &&\n      !event.shiftKey &&\n      this._fullscreenMode\n    ) {\n      event.preventDefault();\n\n      const lastKeyEvent = new CustomEvent('on-footer-escape', {\n        detail: {\n          action: 'FOOTER: user tabbed beyond chat',\n          originalEvent: event,\n        },\n        bubbles: true,\n        composed: true,\n      });\n      this.dispatchEvent(lastKeyEvent);\n    }\n  }\n\n  /** handle user tab inputs, check if escapes chat\n   * @param {event} event - lit event sent by the keyboard input\n   **/\n  _checkKeyboardEscapeC(event) {\n    const blockedSendTest = this._messageText === '' || this._forceDisableInput;\n    if (\n      event.key === 'Tab' &&\n      blockedSendTest &&\n      !event.shiftKey &&\n      !this._voiceAPIAvailable &&\n      this._fullscreenMode\n    ) {\n      event.preventDefault();\n\n      const lastKeyEvent = new CustomEvent('on-footer-escape', {\n        detail: {\n          action: 'FOOTER: user tabbed beyond chat',\n          originalEvent: event,\n        },\n        bubbles: true,\n        composed: true,\n      });\n      this.dispatchEvent(lastKeyEvent);\n    }\n  }\n\n  /** handle user tab inputs, check if escapes chat\n   * @param {event} event - lit event sent by the keyboard input\n   **/\n  _checkKeyboardEscape(event) {\n    if (event.key === 'Tab' && !event.shiftKey && this._fullscreenMode) {\n      event.preventDefault();\n      const lastKeyEvent = new CustomEvent('on-footer-escape', {\n        detail: {\n          action: 'FOOTER: user tabbed beyond chat',\n          originalEvent: event,\n        },\n        bubbles: true,\n        composed: true,\n      });\n      this.dispatchEvent(lastKeyEvent);\n    }\n  }\n\n  /** checkSize - see if width/height warrant changing the footer mode\n   */\n  _checkSize() {\n    const parentWidth = this.clientWidth;\n    const parentHeight = this.clientHeight;\n\n    if (parentWidth && parentHeight) {\n      this._expandedWidth = parentWidth > 672;\n      this._expandedHeight = this._expandedWidth;\n    }\n    if (this._fullscreenMode) {\n      this._expandedWidth = true;\n      this._expandedHeight = true;\n    }\n  }\n\n  /** handle user inputs inside the input field, trigger a search upon an 'enter' key down event\n   * @param {event} event - lit event sent by the the text input object within the chat\n   **/\n  _handleInput(event) {\n    const { value } = event.target;\n    this._messageText = value;\n    if (event.key == 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      if (!this._forceDisableInput) {\n        if (value.length > 0) {\n          this._sendInputToParent();\n        }\n      }\n    }\n    this._checkKeyboardEscapeC(event);\n  }\n\n  /** handle voice recording start click event\n   */\n  _startRecording() {\n    this._speechRecognition?.start();\n    this._isListening = true;\n    const recordingEvent = new CustomEvent('on-chat-footer-speech-start', {\n      detail: {\n        action: 'user started speech recognition',\n        currentMessage: this._messageText,\n        originalEvent: event,\n      },\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(recordingEvent);\n  }\n\n  /** handle voice recording end click event\n   */\n  _endRecording() {\n    this._speechRecognition?.stop();\n    this._isListening = false;\n    const recordingEvent = new CustomEvent('on-chat-footer-speech-end', {\n      detail: {\n        action: 'user ended speech recognition',\n        currentMessage: this._messageText,\n        originalEvent: event,\n      },\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(recordingEvent);\n  }\n\n  /** handle stop button click event to end streaming\n   */\n  _endStreaming() {\n    if (this.enableCancellation) {\n      const stopResponseEvent = new CustomEvent('on-user-request-interrupt', {\n        detail: { action: 'FOOTER: user requested to cancel current query' },\n        bubbles: true,\n        composed: true,\n      });\n      this.dispatchEvent(stopResponseEvent);\n    } else {\n      const stopStreamEvent = new CustomEvent('on-user-stream-interrupt', {\n        detail: { action: 'FOOTER: user requested to end text streaming' },\n        bubbles: true,\n        composed: true,\n      });\n      this.dispatchEvent(stopStreamEvent);\n      this._currentlyStreaming = false;\n    }\n  }\n\n  /** handle voice input from speech recognition\n   * @param {event} event - speech recognition input event\n   */\n  _handleVoiceInput(event) {\n    const result = event.results[event.resultIndex];\n    this._messageText = result[0].transcript;\n  }\n\n  /** handle end of voice input\n   */\n  _handleVoiceInputEnd() {\n    this._isListening = false;\n  }\n\n  /** handleMenuFileUpload - upload event in footer menu\n   * @param {event} event - lit event sent by the file uploader in menu\n   **/\n  _handleMenuFileUpload(event) {\n    const files = event.detail?.addedFiles;\n    console.log(files[0]);\n  }\n\n  /**\n   * Set the message text value on input\n   * @param {Object} event - event object\n   */\n  _setMessageText(event) {\n    this._messageText = event.target.value;\n  }\n\n  /**\n   * Set a new height based on the size of the text area\n   */\n  updateTextAreaHeight() {\n    const maxheight = 182;\n    const textArea = this.shadowRoot?.querySelector(\n      '.' + clabsPrefix + '--chat-search-query'\n    );\n\n    const textAreaContainer = this.shadowRoot?.querySelector(\n      '.' + clabsPrefix + '--chat-footer-prompt-items-target'\n    );\n    if (\n      textArea instanceof HTMLElement &&\n      textAreaContainer instanceof HTMLElement\n    ) {\n      textArea.style.height = 'auto';\n      const newHeight = textArea.scrollHeight;\n      textArea.style.height = newHeight + 'px';\n      textAreaContainer.style.height = newHeight + 24 + 'px';\n      if (textArea.scrollHeight < maxheight) {\n        this.style.setProperty('--chat-footer-overflow-control', 'hidden');\n      } else {\n        this.style.setProperty('--chat-footer-overflow-control', 'scroll');\n      }\n    }\n  }\n\n  /**\n   * reset height of the text area\n   */\n  resetTextAreaHeight() {\n    const textAreaContainer = this.shadowRoot?.querySelector(\n      '.' + clabsPrefix + '--chat-footer-prompt-items-target'\n    );\n    const textArea = this.shadowRoot?.querySelector(\n      '.' + clabsPrefix + '--chat-search-query'\n    );\n    if (\n      textArea instanceof HTMLElement &&\n      textAreaContainer instanceof HTMLElement\n    ) {\n      textArea.scrollTop = 0;\n      textArea.style.height = 'auto';\n      textArea.style.height = 32 + 'px';\n      textAreaContainer.style.height = 32 + 'px';\n      this.style.setProperty('--chat-footer-overflow-control', 'hidden');\n    }\n  }\n\n  /**\n   * set focus on component when text area is focused\n   * @param {event} event - lit event sent by textarea focus\n   */\n  _textAreaIsFocused(event) {\n    this._isPromptFocused = event?.type === 'focus';\n    if (!this._isPromptFocused) {\n      this.resetTextAreaHeight();\n    } else {\n      this.updateTextAreaHeight();\n    }\n    this.hideContextMessage = false;\n  }\n\n  /**\n   * handle when context message above prompt is closed\n   */\n  _handleContextMessageClose() {\n    this.hideContextMessage = true;\n  }\n\n  /**\n   * Send input text event to parent Chat Element\n   **/\n  _sendInputToParent() {\n    const value = this._messageText;\n    this._endRecording();\n\n    if (value.length > 0) {\n      this._messageText = '';\n\n      const inputEvent = new CustomEvent('on-user-text-input', {\n        detail: { textInputValue: value },\n        bubbles: true,\n        composed: true,\n      });\n      this.dispatchEvent(inputEvent);\n      this.requestUpdate();\n\n      this.resetTextAreaHeight();\n    }\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { state, property } from 'lit/decorators.js';\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nconst { stablePrefix: clabsPrefix } = settings;\n// @ts-ignore\nimport styles from './footer.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass footer extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * force disable input because of internal error state\n         */\n        this._forceDisableInput = false;\n        /**\n         * string variable edited by textInput, auto-updates at every keystroke and is sent to the api url on 'enter' or 'send' button click\n         */\n        this._messageText = '';\n        /**\n         * boolean denoting if recording is in progress\n         */\n        this._isListening = false;\n        /**\n         * boolean denoting if voiceAPI capabilities are available in browser, otherwise disable icon\n         */\n        this._voiceAPIAvailable = true;\n        /**\n         * see if text area is currently focused or not\n         */\n        this._isPromptFocused = false;\n        /**\n         * triggered when close icon is selected\n         */\n        this.hideContextMessage = false;\n        /**\n         * speechRecognition object to interface with text input\n         */\n        this._speechRecognition = null;\n        /**\n         * notification counter to display\n         */\n        this.notificationCount = '0';\n        /**\n         * trigger notification display\n         */\n        this.showNotification = false;\n        /**\n         * _renderLabel - render default or custom label\n         * @param {string} key - value to lookup\n         */\n        this._renderLabel = (key) => {\n            let customValue;\n            const labels = this.customLabels || {};\n            if (labels) {\n                switch (key) {\n                    case 'prompt-start-listening':\n                        customValue = labels[key] || 'Start listening';\n                        break;\n                    case 'prompt-stop-listening':\n                        customValue = labels[key] || 'Stop listening';\n                        break;\n                    case 'prompt-microphone-unavailable':\n                        customValue = labels[key] || 'Microphone unavailable';\n                        break;\n                    case 'prompt-loading-state-placeholder':\n                        customValue = labels[key] || 'Thinking...';\n                        break;\n                    case 'prompt-entry-placeholder':\n                        customValue = labels[key] || 'Type something...';\n                        break;\n                    case 'prompt-send-button':\n                        customValue = labels[key] || 'Send response';\n                        break;\n                    case 'prompt-send-blocked-button':\n                        customValue = labels[key] || 'Send unavailable';\n                        break;\n                    case 'prompt-cancel-button':\n                        customValue = labels[key] || 'Cancel request';\n                        break;\n                    case 'prompt-close-warning':\n                        customValue = labels[key] || 'Close';\n                        break;\n                    case 'complex-feedback-notification-title':\n                        customValue = labels[key] || 'Feedback sent';\n                        break;\n                    case 'complex-feedback-notification-subtitle':\n                        customValue = labels[key] || 'Thank you, we value your input';\n                        break;\n                    case 'complex-feedback-notification-close-label':\n                        customValue = labels[key] || 'Close';\n                        break;\n                }\n            }\n            return customValue || key;\n        };\n    }\n    /**\n     * LIT firstUpdated cycle to define initial parameters on first render\n     */\n    firstUpdated() {\n        this._checkSize();\n        this._resizeObserver = new ResizeObserver(async () => {\n            this._checkSize();\n        });\n        this._resizeObserver.observe(this.parentElement);\n        const SpeechRecognition = window.SpeechRecognition ||\n            window.webkitSpeechRecognition;\n        if (SpeechRecognition) {\n            this._speechRecognition = new SpeechRecognition();\n            this._speechRecognition.continuous = true;\n            this._speechRecognition.interimResults = true;\n            /**\n             * handles the result event from speech recognition\n             * @param {event} event - object containing speech result\n             */\n            this._speechRecognition.onresult = (event) => {\n                this._handleVoiceInput(event);\n            };\n            /**\n             * handles the end event from speechrecognition\n             */\n            this._speechRecognition.onend = () => {\n                this._handleVoiceInputEnd();\n            };\n        }\n        else {\n            this._voiceAPIAvailable = false;\n        }\n    }\n    /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('_messageText')) {\n            this.updateTextAreaHeight();\n            if (this._characterLimit) {\n                this._checkLimit();\n            }\n        }\n        if (changedProperties.has('_fullscreenMode')) {\n            this._checkSize();\n        }\n        if (changedProperties.has('_presetEntry')) {\n            this._messageText = this._presetEntry;\n        }\n        if (changedProperties.has('notificationCount')) {\n            if (this.notificationCount !== '0') {\n                this.showNotification = true;\n                setTimeout(() => {\n                    this.showNotification = false;\n                }, 1250);\n            }\n        }\n    }\n    /** _checkLimit - show warning message if character limit is exceeded\n     */\n    _checkLimit() {\n        const limit = this._characterLimit || Number.MAX_SAFE_INTEGER;\n        if (this._messageText.length > limit) {\n            this._contextMessage =\n                '(' +\n                    this._messageText.length +\n                    '/' +\n                    limit.toString() +\n                    ') Character limit exceeded';\n            this._contextMessageType = 'error';\n            this._forceDisableInput = true;\n        }\n        else {\n            this._contextMessage = null;\n            this._contextMessageType = null;\n            this._forceDisableInput = false;\n        }\n    }\n    /** handle user tab inputs, check if escapes chat\n     * @param {event} event - lit event sent by the keyboard input\n     **/\n    _checkKeyboardEscapeB(event) {\n        const blockedSendTest = this._messageText === '' || this._forceDisableInput;\n        if (event.key === 'Tab' &&\n            blockedSendTest &&\n            !event.shiftKey &&\n            this._fullscreenMode) {\n            event.preventDefault();\n            const lastKeyEvent = new CustomEvent('on-footer-escape', {\n                detail: {\n                    action: 'FOOTER: user tabbed beyond chat',\n                    originalEvent: event,\n                },\n                bubbles: true,\n                composed: true,\n            });\n            this.dispatchEvent(lastKeyEvent);\n        }\n    }\n    /** handle user tab inputs, check if escapes chat\n     * @param {event} event - lit event sent by the keyboard input\n     **/\n    _checkKeyboardEscapeC(event) {\n        const blockedSendTest = this._messageText === '' || this._forceDisableInput;\n        if (event.key === 'Tab' &&\n            blockedSendTest &&\n            !event.shiftKey &&\n            !this._voiceAPIAvailable &&\n            this._fullscreenMode) {\n            event.preventDefault();\n            const lastKeyEvent = new CustomEvent('on-footer-escape', {\n                detail: {\n                    action: 'FOOTER: user tabbed beyond chat',\n                    originalEvent: event,\n                },\n                bubbles: true,\n                composed: true,\n            });\n            this.dispatchEvent(lastKeyEvent);\n        }\n    }\n    /** handle user tab inputs, check if escapes chat\n     * @param {event} event - lit event sent by the keyboard input\n     **/\n    _checkKeyboardEscape(event) {\n        if (event.key === 'Tab' && !event.shiftKey && this._fullscreenMode) {\n            event.preventDefault();\n            const lastKeyEvent = new CustomEvent('on-footer-escape', {\n                detail: {\n                    action: 'FOOTER: user tabbed beyond chat',\n                    originalEvent: event,\n                },\n                bubbles: true,\n                composed: true,\n            });\n            this.dispatchEvent(lastKeyEvent);\n        }\n    }\n    /** checkSize - see if width/height warrant changing the footer mode\n     */\n    _checkSize() {\n        const parentWidth = this.clientWidth;\n        const parentHeight = this.clientHeight;\n        if (parentWidth && parentHeight) {\n            this._expandedWidth = parentWidth > 672;\n            this._expandedHeight = this._expandedWidth;\n        }\n        if (this._fullscreenMode) {\n            this._expandedWidth = true;\n            this._expandedHeight = true;\n        }\n    }\n    /** handle user inputs inside the input field, trigger a search upon an 'enter' key down event\n     * @param {event} event - lit event sent by the the text input object within the chat\n     **/\n    _handleInput(event) {\n        const { value } = event.target;\n        this._messageText = value;\n        if (event.key == 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n            if (!this._forceDisableInput) {\n                if (value.length > 0) {\n                    this._sendInputToParent();\n                }\n            }\n        }\n        this._checkKeyboardEscapeC(event);\n    }\n    /** handle voice recording start click event\n     */\n    _startRecording() {\n        var _a;\n        (_a = this._speechRecognition) === null || _a === void 0 ? void 0 : _a.start();\n        this._isListening = true;\n        const recordingEvent = new CustomEvent('on-chat-footer-speech-start', {\n            detail: {\n                action: 'user started speech recognition',\n                currentMessage: this._messageText,\n                originalEvent: event,\n            },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(recordingEvent);\n    }\n    /** handle voice recording end click event\n     */\n    _endRecording() {\n        var _a;\n        (_a = this._speechRecognition) === null || _a === void 0 ? void 0 : _a.stop();\n        this._isListening = false;\n        const recordingEvent = new CustomEvent('on-chat-footer-speech-end', {\n            detail: {\n                action: 'user ended speech recognition',\n                currentMessage: this._messageText,\n                originalEvent: event,\n            },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(recordingEvent);\n    }\n    /** handle stop button click event to end streaming\n     */\n    _endStreaming() {\n        if (this.enableCancellation) {\n            const stopResponseEvent = new CustomEvent('on-user-request-interrupt', {\n                detail: { action: 'FOOTER: user requested to cancel current query' },\n                bubbles: true,\n                composed: true,\n            });\n            this.dispatchEvent(stopResponseEvent);\n        }\n        else {\n            const stopStreamEvent = new CustomEvent('on-user-stream-interrupt', {\n                detail: { action: 'FOOTER: user requested to end text streaming' },\n                bubbles: true,\n                composed: true,\n            });\n            this.dispatchEvent(stopStreamEvent);\n            this._currentlyStreaming = false;\n        }\n    }\n    /** handle voice input from speech recognition\n     * @param {event} event - speech recognition input event\n     */\n    _handleVoiceInput(event) {\n        const result = event.results[event.resultIndex];\n        this._messageText = result[0].transcript;\n    }\n    /** handle end of voice input\n     */\n    _handleVoiceInputEnd() {\n        this._isListening = false;\n    }\n    /** handleMenuFileUpload - upload event in footer menu\n     * @param {event} event - lit event sent by the file uploader in menu\n     **/\n    _handleMenuFileUpload(event) {\n        var _a;\n        const files = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.addedFiles;\n        console.log(files[0]);\n    }\n    /**\n     * Set the message text value on input\n     * @param {Object} event - event object\n     */\n    _setMessageText(event) {\n        this._messageText = event.target.value;\n    }\n    /**\n     * Set a new height based on the size of the text area\n     */\n    updateTextAreaHeight() {\n        var _a, _b;\n        const maxheight = 182;\n        const textArea = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.' + clabsPrefix + '--chat-search-query');\n        const textAreaContainer = (_b = this.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.' + clabsPrefix + '--chat-footer-prompt-items-target');\n        if (textArea instanceof HTMLElement &&\n            textAreaContainer instanceof HTMLElement) {\n            textArea.style.height = 'auto';\n            const newHeight = textArea.scrollHeight;\n            textArea.style.height = newHeight + 'px';\n            textAreaContainer.style.height = newHeight + 24 + 'px';\n            if (textArea.scrollHeight < maxheight) {\n                this.style.setProperty('--chat-footer-overflow-control', 'hidden');\n            }\n            else {\n                this.style.setProperty('--chat-footer-overflow-control', 'scroll');\n            }\n        }\n    }\n    /**\n     * reset height of the text area\n     */\n    resetTextAreaHeight() {\n        var _a, _b;\n        const textAreaContainer = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.' + clabsPrefix + '--chat-footer-prompt-items-target');\n        const textArea = (_b = this.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.' + clabsPrefix + '--chat-search-query');\n        if (textArea instanceof HTMLElement &&\n            textAreaContainer instanceof HTMLElement) {\n            textArea.scrollTop = 0;\n            textArea.style.height = 'auto';\n            textArea.style.height = 32 + 'px';\n            textAreaContainer.style.height = 32 + 'px';\n            this.style.setProperty('--chat-footer-overflow-control', 'hidden');\n        }\n    }\n    /**\n     * set focus on component when text area is focused\n     * @param {event} event - lit event sent by textarea focus\n     */\n    _textAreaIsFocused(event) {\n        this._isPromptFocused = (event === null || event === void 0 ? void 0 : event.type) === 'focus';\n        if (!this._isPromptFocused) {\n            this.resetTextAreaHeight();\n        }\n        else {\n            this.updateTextAreaHeight();\n        }\n        this.hideContextMessage = false;\n    }\n    /**\n     * handle when context message above prompt is closed\n     */\n    _handleContextMessageClose() {\n        this.hideContextMessage = true;\n    }\n    /**\n     * Send input text event to parent Chat Element\n     **/\n    _sendInputToParent() {\n        const value = this._messageText;\n        this._endRecording();\n        if (value.length > 0) {\n            this._messageText = '';\n            const inputEvent = new CustomEvent('on-user-text-input', {\n                detail: { textInputValue: value },\n                bubbles: true,\n                composed: true,\n            });\n            this.dispatchEvent(inputEvent);\n            this.requestUpdate();\n            this.resetTextAreaHeight();\n        }\n    }\n}\nfooter.styles = styles;\nexport default footer;\n__decorate([\n    property({ type: String, attribute: 'input-placeholder' })\n], footer.prototype, \"_inputPlaceholder\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-input' })\n], footer.prototype, \"_disableInput\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'fullscreen-mode' })\n], footer.prototype, \"_fullscreenMode\", void 0);\n__decorate([\n    state()\n], footer.prototype, \"_forceDisableInput\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'character-limit' })\n], footer.prototype, \"_characterLimit\", void 0);\n__decorate([\n    state()\n], footer.prototype, \"_expandedHeight\", void 0);\n__decorate([\n    state()\n], footer.prototype, \"_expandedWidth\", void 0);\n__decorate([\n    state()\n], footer.prototype, \"_messageText\", void 0);\n__decorate([\n    state()\n], footer.prototype, \"_isListening\", void 0);\n__decorate([\n    state()\n], footer.prototype, \"_voiceAPIAvailable\", void 0);\n__decorate([\n    state()\n], footer.prototype, \"_isPromptFocused\", void 0);\n__decorate([\n    state()\n], footer.prototype, \"hideContextMessage\", void 0);\n__decorate([\n    property({ type: String, attribute: 'context-message' })\n], footer.prototype, \"_contextMessage\", void 0);\n__decorate([\n    property({ type: String, attribute: 'context-message-type' })\n], footer.prototype, \"_contextMessageType\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'currently-streaming' })\n], footer.prototype, \"_currentlyStreaming\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-cancellation' })\n], footer.prototype, \"enableCancellation\", void 0);\n__decorate([\n    state()\n], footer.prototype, \"_customLabels\", void 0);\n__decorate([\n    property({ type: String, attribute: 'preset-entry' })\n], footer.prototype, \"_presetEntry\", void 0);\n__decorate([\n    property({ type: Object, attribute: 'customLabels' })\n], footer.prototype, \"customLabels\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'query-processing' })\n], footer.prototype, \"queryProcessing\", void 0);\n__decorate([\n    property({ type: String, attribute: 'notification-count' })\n], footer.prototype, \"notificationCount\", void 0);\n__decorate([\n    state()\n], footer.prototype, \"showNotification\", void 0);\n"]}