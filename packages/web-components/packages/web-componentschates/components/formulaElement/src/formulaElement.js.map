{"version":3,"sources":["components/formulaElement/src/formulaElement.ts","components/formulaElement/src/formulaElement.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","state","settings","stablePrefix","clabsPrefix","styles","formulaElement","firstUpdated","content","_prepareFormula","updated","changedProperties","has","_renderFormula","formula","_a","targetDiv","shadowRoot","querySelector","HTMLElement","MathJax","typesetPromise","then","console","log","catch","error","_renderFormula2","tex2svgPromise","display","node","svg","innerHTML","append","type","String","attribute","reflect","prototype"],"mappings":"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","file":"formulaElement.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n//import 'mathjax/es5/tex-svg-full.js';\nimport 'mathjax/es5/tex-mml-chtml.js';\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nconst { stablePrefix: clabsPrefix } = settings;\n\n// @ts-ignore\nimport styles from './formulaElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class formulaElement extends LitElement {\n  static styles = styles;\n  /**\n   * Array of subelements parsed from API reply\n   */\n  @property({ type: String, attribute: 'content', reflect: true })\n  content;\n\n  /**\n   * formula - render-safe math tex string\n   */\n  @state()\n  formula;\n\n  /** detect when component is rendered to process visualization specification object\n   */\n  firstUpdated() {\n    if (this.content !== null) {\n      this._prepareFormula();\n    }\n  }\n\n  /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  async updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has('formula')) {\n      await this._renderFormula();\n    }\n  }\n\n  /**\n   * Prepare table object for rendering from content string\n   */\n  async _prepareFormula() {\n    this.formula = this.content;\n  }\n\n  /**\n   * Prepare table object for rendering from content string\n   */\n  async _renderFormula() {\n    const targetDiv = this.shadowRoot?.querySelector(\n      '.' + clabsPrefix + '--chat-formula-container'\n    );\n\n    if (targetDiv instanceof HTMLElement) {\n      try {\n        // @ts-ignore\n        await MathJax.typesetPromise([targetDiv])\n          .then(() => {\n            console.log('success');\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n\n  /**\n   * Prepare table object for rendering from content string\n   */\n  _renderFormula2() {\n    const targetDiv = this.shadowRoot?.querySelector(\n      '.' + clabsPrefix + '--chat-formula-container'\n    );\n    if (targetDiv instanceof HTMLElement) {\n      try {\n        // @ts-ignore\n        MathJax.tex2svgPromise(this.content, { display: true })\n          .then((node) => {\n            const svg = node.querySelector('svg');\n            targetDiv.innerHTML = '';\n            targetDiv.append(svg);\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n//import 'mathjax/es5/tex-svg-full.js';\nimport 'mathjax/es5/tex-mml-chtml.js';\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nconst { stablePrefix: clabsPrefix } = settings;\n// @ts-ignore\nimport styles from './formulaElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass formulaElement extends LitElement {\n    /** detect when component is rendered to process visualization specification object\n     */\n    firstUpdated() {\n        if (this.content !== null) {\n            this._prepareFormula();\n        }\n    }\n    /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    async updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('formula')) {\n            await this._renderFormula();\n        }\n    }\n    /**\n     * Prepare table object for rendering from content string\n     */\n    async _prepareFormula() {\n        this.formula = this.content;\n    }\n    /**\n     * Prepare table object for rendering from content string\n     */\n    async _renderFormula() {\n        var _a;\n        const targetDiv = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.' + clabsPrefix + '--chat-formula-container');\n        if (targetDiv instanceof HTMLElement) {\n            try {\n                // @ts-ignore\n                await MathJax.typesetPromise([targetDiv])\n                    .then(() => {\n                    console.log('success');\n                })\n                    .catch((error) => {\n                    console.error(error);\n                });\n            }\n            catch (error) {\n                console.error(error);\n            }\n        }\n    }\n    /**\n     * Prepare table object for rendering from content string\n     */\n    _renderFormula2() {\n        var _a;\n        const targetDiv = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.' + clabsPrefix + '--chat-formula-container');\n        if (targetDiv instanceof HTMLElement) {\n            try {\n                // @ts-ignore\n                MathJax.tex2svgPromise(this.content, { display: true })\n                    .then((node) => {\n                    const svg = node.querySelector('svg');\n                    targetDiv.innerHTML = '';\n                    targetDiv.append(svg);\n                })\n                    .catch((error) => {\n                    console.error(error);\n                });\n            }\n            catch (error) {\n                console.error(error);\n            }\n        }\n    }\n}\nformulaElement.styles = styles;\nexport default formulaElement;\n__decorate([\n    property({ type: String, attribute: 'content', reflect: true })\n], formulaElement.prototype, \"content\", void 0);\n__decorate([\n    state()\n], formulaElement.prototype, \"formula\", void 0);\n"]}