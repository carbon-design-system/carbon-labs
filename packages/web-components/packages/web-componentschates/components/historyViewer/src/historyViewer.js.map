{"version":3,"sources":["components/historyViewer/src/historyViewer.ts","components/historyViewer/src/historyViewer.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","html","property","state","settings","stablePrefix","clabsPrefix","styles","historyViewer","constructor","debug","_renderMessageTree","id","depth","currentMessage","historyTree","find","message","children","userSubmitted","content","map","child","firstUpdated","console","log","updated","changedProperties","has","_renderHistoryViewer","_prepareHistoryViewer","rootMessages","filter","parentId","columns","branchTaken","branchingIndices","msg","branchId","branches","keys","sort","a","b","parseInt","allParents","Set","forEach","add","sortedParents","Array","from","style","setProperty","type","attribute","reflect","prototype"],"mappings":"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","file":"historyViewer.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement, html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nconst { stablePrefix: clabsPrefix } = settings;\n\n// @ts-ignore\nimport styles from './historyViewer.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class historyViewer extends LitElement {\n  static styles = styles;\n  /**\n   * Array of subelements parsed from API reply\n   */\n  @property({ type: Object, attribute: 'historyTree', reflect: true })\n  historyTree;\n\n  @state()\n  rootMessages;\n\n  @state()\n  sortedParents;\n\n  @state()\n  columns;\n\n  @state()\n  branches;\n\n  @state()\n  branchingIndices;\n\n  @state()\n  debug = false;\n\n  /** detect when component is rendered to process visualization specification object\n   */\n  firstUpdated() {\n    if (this.historyTree !== null) {\n      console.log(this.historyTree);\n      //this._prepareHistoryViewer();\n    }\n  }\n\n  /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  async updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has('historyTree')) {\n      await this._renderHistoryViewer();\n    }\n  }\n\n  /**\n   * Prepare table object for rendering from content string\n   */\n  _prepareHistoryViewer() {\n    this.rootMessages = this.historyTree.filter(\n      (message) => message.parentId === null\n    );\n  }\n\n  /** _renderMessageTree - render tree as selectable viewer\n   * @param {number} id - msg id\n   * @param {number} depth - tree leaf depth\n   */\n  _renderMessageTree = (id, depth = 0) => {\n    const currentMessage = this.historyTree.find(\n      (message) => message.id === id\n    );\n    const children = currentMessage.children || [];\n    return html`\n      <div\n        class=\"${clabsPrefix + '--chat-history-viewer-block'}\"\n        style=\"margin-left: ${depth * 40}px;\">\n        <div\n          class=\"${clabsPrefix +\n          '--chat-history-viewer-block-content-' +\n          (currentMessage.userSubmitted ? 'user' : 'bot')}\">\n          ${currentMessage.userSubmitted ? 'user' : 'bot'}:\n          ${currentMessage.content}\n        </div>\n        ${children.map((child) => this._renderMessageTree(child, depth + 1))}\n      </div>\n    `;\n  };\n\n  /**\n   * Prepare table object for rendering from content string\n   */\n  async _renderHistoryViewer() {\n    /*const targetDiv = this.shadowRoot?.querySelector(\n      '.' + clabsPrefix + '--chat-history-viewer-container'\n    );*/\n    const columns = {};\n    const branchTaken = {};\n    const branchingIndices = {};\n    for (const msg of this.historyTree) {\n      if (!columns[msg.branchId]) {\n        columns[msg.branchId] = {};\n      }\n      if (!branchingIndices[msg.parentId]) {\n        branchingIndices[msg.parentId] = 1;\n      }\n      if (!branchTaken[msg.branchId]) {\n        branchingIndices[msg.parentId]++;\n        branchTaken[msg.branchId] = msg.branchId;\n      }\n\n      columns[msg.branchId][msg.parentId === null ? -1 : msg.parentId] = msg;\n    }\n\n    const branches = Object.keys(columns).sort(\n      (a, b) => parseInt(a) - parseInt(b)\n    );\n    const allParents = new Set();\n    branches.forEach((branchId) => {\n      Object.keys(columns[branchId]).forEach((parentId) => {\n        allParents.add(parentId);\n      });\n    });\n    const sortedParents = Array.from(allParents);\n    /*.sort((a, b) => {\n      return parseInt(a) - parseInt(b);\n    });*/\n    this.style.setProperty(\n      '--chat-history-viewer-branch-percentage',\n      100 / branches.length + '%'\n    );\n    console.log(100 / branches.length + '%');\n    this.branchingIndices = branchingIndices;\n    this.sortedParents = sortedParents;\n    this.columns = columns;\n    this.branches = branches;\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nconst { stablePrefix: clabsPrefix } = settings;\n// @ts-ignore\nimport styles from './historyViewer.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass historyViewer extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.debug = false;\n        /** _renderMessageTree - render tree as selectable viewer\n         * @param {number} id - msg id\n         * @param {number} depth - tree leaf depth\n         */\n        this._renderMessageTree = (id, depth = 0) => {\n            const currentMessage = this.historyTree.find((message) => message.id === id);\n            const children = currentMessage.children || [];\n            return html `\n      <div\n        class=\"${clabsPrefix + '--chat-history-viewer-block'}\"\n        style=\"margin-left: ${depth * 40}px;\">\n        <div\n          class=\"${clabsPrefix +\n                '--chat-history-viewer-block-content-' +\n                (currentMessage.userSubmitted ? 'user' : 'bot')}\">\n          ${currentMessage.userSubmitted ? 'user' : 'bot'}:\n          ${currentMessage.content}\n        </div>\n        ${children.map((child) => this._renderMessageTree(child, depth + 1))}\n      </div>\n    `;\n        };\n    }\n    /** detect when component is rendered to process visualization specification object\n     */\n    firstUpdated() {\n        if (this.historyTree !== null) {\n            console.log(this.historyTree);\n            //this._prepareHistoryViewer();\n        }\n    }\n    /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    async updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('historyTree')) {\n            await this._renderHistoryViewer();\n        }\n    }\n    /**\n     * Prepare table object for rendering from content string\n     */\n    _prepareHistoryViewer() {\n        this.rootMessages = this.historyTree.filter((message) => message.parentId === null);\n    }\n    /**\n     * Prepare table object for rendering from content string\n     */\n    async _renderHistoryViewer() {\n        /*const targetDiv = this.shadowRoot?.querySelector(\n          '.' + clabsPrefix + '--chat-history-viewer-container'\n        );*/\n        const columns = {};\n        const branchTaken = {};\n        const branchingIndices = {};\n        for (const msg of this.historyTree) {\n            if (!columns[msg.branchId]) {\n                columns[msg.branchId] = {};\n            }\n            if (!branchingIndices[msg.parentId]) {\n                branchingIndices[msg.parentId] = 1;\n            }\n            if (!branchTaken[msg.branchId]) {\n                branchingIndices[msg.parentId]++;\n                branchTaken[msg.branchId] = msg.branchId;\n            }\n            columns[msg.branchId][msg.parentId === null ? -1 : msg.parentId] = msg;\n        }\n        const branches = Object.keys(columns).sort((a, b) => parseInt(a) - parseInt(b));\n        const allParents = new Set();\n        branches.forEach((branchId) => {\n            Object.keys(columns[branchId]).forEach((parentId) => {\n                allParents.add(parentId);\n            });\n        });\n        const sortedParents = Array.from(allParents);\n        /*.sort((a, b) => {\n          return parseInt(a) - parseInt(b);\n        });*/\n        this.style.setProperty('--chat-history-viewer-branch-percentage', 100 / branches.length + '%');\n        console.log(100 / branches.length + '%');\n        this.branchingIndices = branchingIndices;\n        this.sortedParents = sortedParents;\n        this.columns = columns;\n        this.branches = branches;\n    }\n}\nhistoryViewer.styles = styles;\nexport default historyViewer;\n__decorate([\n    property({ type: Object, attribute: 'historyTree', reflect: true })\n], historyViewer.prototype, \"historyTree\", void 0);\n__decorate([\n    state()\n], historyViewer.prototype, \"rootMessages\", void 0);\n__decorate([\n    state()\n], historyViewer.prototype, \"sortedParents\", void 0);\n__decorate([\n    state()\n], historyViewer.prototype, \"columns\", void 0);\n__decorate([\n    state()\n], historyViewer.prototype, \"branches\", void 0);\n__decorate([\n    state()\n], historyViewer.prototype, \"branchingIndices\", void 0);\n__decorate([\n    state()\n], historyViewer.prototype, \"debug\", void 0);\n"]}