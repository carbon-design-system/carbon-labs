{"version":3,"sources":["components/listElement/src/listElement.ts","components/listElement/src/listElement.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","state","styles","listElement","constructor","_renderedList","updated","changedProperties","has","_formatList","firstUpdated","content","undefined","requestUpdate","items","split","map","item","join","type","String","attribute","reflect","prototype"],"mappings":"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","file":"listElement.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n\n// @ts-ignore\nimport styles from './listElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class listElement extends LitElement {\n  static styles = styles;\n\n  /**\n   * Array of subelements parsed from API reply\n   */\n  @property({ type: String, attribute: 'content', reflect: true })\n  content;\n\n  /**\n   * List HTML string\n   */\n  @state()\n  _renderedList = '';\n\n  /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has('content')) {\n      this._formatList();\n    }\n  }\n\n  /** detect when component is rendered to process visualization specification object\n   */\n  firstUpdated() {\n    if (this.content !== undefined) {\n      this._formatList();\n      this.requestUpdate();\n    } else {\n      this._renderedList = 'listElement: error rendring list, content is empty';\n    }\n  }\n  /** format list text into html list object\n   * @param {string} inputText - text to be rendered in subelement\n   */\n  _formatList() {\n    const items = this.content.split('\\n');\n    this._renderedList =\n      '<ul>' + items.map((item) => '<li>' + item + '</li>').join('') + '</ul>';\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n// @ts-ignore\nimport styles from './listElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass listElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * List HTML string\n         */\n        this._renderedList = '';\n    }\n    /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('content')) {\n            this._formatList();\n        }\n    }\n    /** detect when component is rendered to process visualization specification object\n     */\n    firstUpdated() {\n        if (this.content !== undefined) {\n            this._formatList();\n            this.requestUpdate();\n        }\n        else {\n            this._renderedList = 'listElement: error rendring list, content is empty';\n        }\n    }\n    /** format list text into html list object\n     * @param {string} inputText - text to be rendered in subelement\n     */\n    _formatList() {\n        const items = this.content.split('\\n');\n        this._renderedList =\n            '<ul>' + items.map((item) => '<li>' + item + '</li>').join('') + '</ul>';\n    }\n}\nlistElement.styles = styles;\nexport default listElement;\n__decorate([\n    property({ type: String, attribute: 'content', reflect: true })\n], listElement.prototype, \"content\", void 0);\n__decorate([\n    state()\n], listElement.prototype, \"_renderedList\", void 0);\n"]}