{"version":3,"sources":["components/message/src/message.ts","components/message/src/message.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","state","styles","settings","stablePrefix","clabsPrefix","message","constructor","_messageElements","_editedMessage","showFeedBackForm","_editing","watsonIconLight","watsonIconDark","_forceStreamEnd","temporaryMessage","content","type","streamingIndex","tokens","currentlyStreaming","bufferMessage","currentType","baseStreamingSpeed","positiveFeedbackSelected","negativeFeedbackSelected","_feedbackFormOrientation","_renderLabel","customValue","labels","customLabels","firstUpdated","_getTheme","hasAttribute","style","setProperty","displayColor","loadingState","errorState","rawText","elements","userSubmitted","_parseText","_streamContent","_streamText","_prepareReaderText","_a","textToRead","map","element","join","tagRegex","extrasRegex","cleanText","replace","RegExp","pureText","trim","updated","changedProperties","has","messageUpdateEvent","CustomEvent","detail","action","bubbles","composed","dispatchEvent","_readerContent","setTimeout","parentElement","HTMLElement","parentStyle","getComputedStyle","backgroundColor","getPropertyValue","darkMode","startsWith","parseInt","_parentTheme","_handleSlotchange","event","messageDetails","_prepareEventDetail","preventDefault","messageSlotUpdateEvent","_checkForCode","string","delimiter","segments","split","splitParts","segment","push","_hideFeedBackForm","generateUniqueId","randomString","Math","random","toString","substr","_handleDisplayFeedBackForm","uniqueId","_b","targetItem","popupTargetElement","mainHeight","scrollHeight","feedbackFormDefinitions","_feedbackFormValues","uniqueFeedbackId","parentValues","offsetTop","nullStateMessage","eventDetail","messageOrigin","origin","messageTime","timeStamp","displayName","messageIndexInChat","index","_onTagSelected","tagContent","tagSelectionEvent","_childLinkClicked","selectedURL","selectedTitle","linkClickedEvent","_handleMessageElementClick","subElementSelectionEvent","_checkStreamForBlocks","result","_checkBlockStart","_checkBlockEnd","_checkBlockType","blockToCheck","regexPatterns","code","json","table","array","url","list","match","matchIndex","analysisPriority","formula","annotation","preBlockText","substring","subBuffer","status","stopIndex","indexOf","offset","k","char","CSVLines","countIndex","nonCSVcount","previousLength","line","test","nonListCount","listCharacterLength","listLines","listItem","block","exitType","JSON","parse","error","_checkAmbiguousBlock","smilesRegex","urlRegex","items","checkAllURLs","console","log","_tokenize","_streamDelay","_beginStreaming","streamingInterval","clearInterval","token","blockSignal","_cutPlainText","splitter","subLine","_checkURLType","streamingSpeed","max","trailingContent","finalSegments","lastLine","pop","lastBlockType","_signalEndOfStreaming","plainText","splitLines","splitLineElements","_checkLinks","blockText","linkListRegex","endOfStreamingEvent","inputText","tokenizerRegex","_parseTextOld","returnedText","subMessages","codeSplitter","secondReply","objectSplitter","_checkForObjects","thirdReply","urlSplitter","_checkForURLs","fourthReply","formattedList","_checkForFormatting","subItem","entries","messageChunks","item","testJSON","objectType","_checkObjectType","concat","jsonObject","jsonType","Array","isArray","imageRegex","checkAllImages","every","urlObject","videoRegex","fileRegex","audioRegex","listRegex","splitMatches","tempString","itemType","_handleEdit","textElement","shadowRoot","querySelector","previousWidth","clientWidth","previousMessageWidth","startEditEvent","_setEditedMessage","value","_cancelEdit","cancelledEditEvent","_validateEdit","regenerationEvent","_handleRegenerate","_handleMessageEditStart","messageEditStartEvent","_handleMessageEditCancel","messageEditCancelEvent","handlePositiveKeyboardInput","_handlePositiveFeedback","handleNegativeKeyboardInput","_handleNegativeFeedback","_focusOnPopup","popUpId","popupElement","getElementById","focus","feedbackEvent","prototype","Boolean","attribute","reflect","String","Number"],"mappings":"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","file":"message.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n// @ts-ignore\nimport styles from './message.scss?inline';\n\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nconst { stablePrefix: clabsPrefix } = settings;\n\n/**\n * Core message component to display a single message\n */\nexport default class message extends LitElement {\n  static styles = styles;\n  /**\n   * Array of subelements parsed from API reply\n   */\n  @state()\n  _messageElements: { content: any; type: string }[] = [];\n\n  /**\n   * Boolean denoting if user submitted the message or not\n   */\n  @property({ type: Boolean, attribute: 'user-submitted' })\n  userSubmitted;\n\n  /**\n   * User-imported message sub-elements object, parsing is done on rawText here if none is provided\n   */\n  @property({ type: Array, attribute: 'elements', reflect: true })\n  elements;\n\n  /**\n   * Define name of specific bot or user\n   */\n  @property({ type: String, attribute: 'display-name' })\n  displayName;\n\n  /**\n   * Define name of specific bot or user\n   */\n  @property({ type: Boolean, attribute: 'disable-buttons' })\n  disableButtons;\n\n  /**\n   * string url denoting where the message query will be sent, either BAM or watsonx.ai or any other service\n   */\n  @property({ type: String, attribute: 'raw-text', reflect: true })\n  rawText;\n\n  /**\n   * string variable edited by textArea\n   */\n  @state()\n  _editedMessage = '';\n\n  /**\n   * TEMPORARY: parent theme string to denote current theme used\n   */\n  @property({ type: String, attribute: 'parent-theme' })\n  _parentTheme;\n\n  /**\n   * type property dictating if origin is from user or bot\n   */\n  @property({ type: String, attribute: 'origin' })\n  origin;\n\n  /**\n   * showFeedbackForm - message decides if selecting feedback buttons displays the full form\n   */\n  @state()\n  showFeedBackForm = false;\n\n  /**\n   * type property displaying timestamp of message\n   */\n  @property({ type: String, attribute: 'time-stamp' })\n  timeStamp;\n\n  /**\n   * index indicating position in message list\n   */\n  @property({ type: Number, attribute: 'index' })\n  index;\n\n  /**\n   * boolean error state indicating if an error occured at any time during fetching or parsing\n   */\n  @property({ type: Boolean, attribute: 'error-state' })\n  errorState;\n\n  /**\n   * boolean error state indicating if an error occured at any time during fetching or parsing\n   */\n  @property({ type: Boolean, attribute: 'loading-state', reflect: true })\n  loadingState;\n\n  /**\n   * boolean denoting whether to hide icon on the left\n   */\n  @property({ type: Boolean, attribute: 'compact-icon' })\n  compactIcon;\n\n  /**\n   * number value in milliseconds to throttle streaming response\n   */\n  @property({ type: Number, attribute: 'stream-delay' })\n  _streamDelay;\n\n  /**\n   * editing state to replace text field with a textarea\n   */\n  @state()\n  _editing = false;\n\n  /**\n   * type property displaying agent color\n   */\n  @property({ type: String, attribute: 'display-color', reflect: true })\n  displayColor;\n\n  /**\n   * Temporary Light watson icon svg\n   */\n  @state()\n  watsonIconLight =\n    '<svg aria-hidden=\"true\" role=\"presentation\"  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><defs><linearGradient id=\"ik7o2yqk8a\" x1=\"1186.526\" y1=\"2863.168\" x2=\"1199.825\" y2=\"2845.109\" gradientTransform=\"matrix(.8312 .55596 -.27409 .40979 -198.894 -1827.398)\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".3\"></stop><stop offset=\"1\" stop-opacity=\"0\"></stop></linearGradient><linearGradient id=\"9hg0dg6llb\" x1=\"1189.388\" y1=\"2911.794\" x2=\"1200.478\" y2=\"2896.735\" gradientTransform=\"rotate(146.223 380.87 -882.286) scale(1 -.493)\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".3\"></stop><stop offset=\".9\" stop-opacity=\"0\"></stop></linearGradient><linearGradient id=\"q1snp4vndc\" x1=\"-4995.033\" y1=\"-20162.835\" x2=\"-4981.733\" y2=\"-20180.895\" gradientTransform=\"rotate(-146.223 -971.422 -5714.55) scale(1 .493)\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".32\"></stop><stop offset=\".354\" stop-opacity=\".798\"></stop><stop offset=\".7\" stop-opacity=\"0\"></stop></linearGradient><linearGradient id=\"8ak2l80n4e\" x1=\"0\" y1=\"32\" x2=\"32\" y2=\"0\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".1\" stop-color=\"#a56eff\"></stop><stop offset=\".9\" stop-color=\"#0f62fe\"></stop></linearGradient><mask id=\"eelbk9r8md\" x=\"0\" y=\"0\" width=\"32\" height=\"32\" maskUnits=\"userSpaceOnUse\"><path d=\"M16 1A14.915 14.915 0 0 0 5.502 5.286l1.4 1.429A12.922 12.922 0 0 1 16 3.001c.977 0 1.929.109 2.845.315-3.402.921-5.916 4.026-5.916 7.715 0 .782.118 1.537.328 2.252a7.978 7.978 0 0 0-2.188-.312c-3.704 0-6.819 2.534-7.726 5.957a12.954 12.954 0 0 1-.345-2.927c0-2.117.492-4.134 1.462-5.996l-1.773-.924A15.037 15.037 0 0 0 .999 16c0 8.271 6.729 15 15 15 3.949 0 7.678-1.522 10.498-4.286l-1.4-1.428A12.926 12.926 0 0 1 15.999 29c-3.648 0-6.945-1.516-9.309-3.945a5.959 5.959 0 0 1-1.621-4.086c0-3.309 2.691-6 6-6a6.006 6.006 0 0 1 5.897 7.107l1.967.367a7.971 7.971 0 0 0-.192-3.726 7.976 7.976 0 0 0 2.187.312c3.71 0 6.829-2.542 7.73-5.974.22.947.34 1.931.34 2.944 0 2.117-.492 4.134-1.462 5.995l1.773.924a15.034 15.034 0 0 0 1.688-6.919C31 7.729 24.272 1 16 1zm4.93 16.03c-3.309 0-6-2.692-6-6s2.691-6 6-6 6 2.691 6 6-2.691 6-6 6z\" style=\"fill:#fff;stroke-width:0\"></path><path style=\"fill:url(#ik7o2yqk8a);stroke-width:0\" d=\"M8 9 0 0h16l2.305 3.304L8 9z\"></path><path style=\"fill:url(#9hg0dg6llb);stroke-width:0\" d=\"m12 31 4.386-9L6 21 2 31h10z\"></path><path style=\"fill:url(#q1snp4vndc);stroke-width:0\" d=\"m24 23 8 9H16l-2.304-3.305L24 23z\"></path><path style=\"stroke-width:0\" d=\"M16 31h-4.283L15 22h2l-1 9z\"></path></mask></defs><g style=\"mask:url(#eelbk9r8md)\"><path style=\"fill:url(#8ak2l80n4e);stroke-width:0\" d=\"M0 0h32v32H0z\"></path></g><circle cx=\"6\" cy=\"6\" r=\"2\" style=\"fill:#001d6c;stroke-width:0\"></circle><circle cx=\"26\" cy=\"26\" r=\"2\" style=\"fill:#001d6c;stroke-width:0\"></circle><path d=\"M16 31c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5zm0-8c-1.654 0-3 1.346-3 3s1.346 3 3 3 3-1.346 3-3-1.346-3-3-3z\" style=\"fill:#001d6c;stroke-width:0\"></path></svg>';\n\n  /**\n   * Temporary dark watson icon svg\n   */\n  @state()\n  watsonIconDark =\n    '<svg aria-hidden=\"true\" role=\"presentation\"  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><defs><linearGradient id=\"8913t7g6za\" x1=\"1196.653\" y1=\"2930.892\" x2=\"1209.953\" y2=\"2912.832\" gradientTransform=\"matrix(.8312 .55596 -.27409 .40979 -188.767 -1860.755)\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".3\"/><stop offset=\"1\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"woevpxiuib\" x1=\"1299.261\" y1=\"2844.072\" x2=\"1310.351\" y2=\"2829.012\" gradientTransform=\"rotate(146.223 440.869 -882.286) scale(1 -.493)\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".3\"/><stop offset=\".9\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"je2bg9iagc\" x1=\"-4885.16\" y1=\"-20230.559\" x2=\"-4871.86\" y2=\"-20248.618\" gradientTransform=\"rotate(-146.223 -911.421 -5714.55) scale(1 .493)\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".32\"/><stop offset=\".354\" stop-opacity=\".798\"/><stop offset=\".7\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"2co5q30b1e\" x1=\"0\" y1=\"32\" x2=\"32\" y2=\"0\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".1\" stop-color=\"#be95ff\"/><stop offset=\".9\" stop-color=\"#4589ff\"/></linearGradient><mask id=\"brch21jdod\" x=\"0\" y=\"0\" width=\"32\" height=\"32\" maskUnits=\"userSpaceOnUse\"><path d=\"M16 1A14.915 14.915 0 0 0 5.502 5.286l1.4 1.429A12.922 12.922 0 0 1 16 3.001c.977 0 1.929.109 2.845.315-3.402.921-5.916 4.026-5.916 7.715 0 .782.118 1.537.328 2.252a7.978 7.978 0 0 0-2.188-.312c-3.704 0-6.819 2.534-7.726 5.957a12.954 12.954 0 0 1-.345-2.927c0-2.117.492-4.134 1.462-5.996l-1.773-.924A15.037 15.037 0 0 0 .999 16c0 8.271 6.729 15 15 15 3.949 0 7.678-1.522 10.498-4.286l-1.4-1.428A12.926 12.926 0 0 1 15.999 29c-3.648 0-6.945-1.516-9.309-3.945a5.959 5.959 0 0 1-1.621-4.086c0-3.309 2.691-6 6-6a6.006 6.006 0 0 1 5.897 7.107l1.967.367a7.971 7.971 0 0 0-.192-3.726 7.976 7.976 0 0 0 2.187.312c3.71 0 6.829-2.542 7.73-5.974.22.947.34 1.931.34 2.944 0 2.117-.492 4.134-1.462 5.995l1.773.924a15.034 15.034 0 0 0 1.688-6.919c0-8.271-6.729-15-15-15zm4.93 16.03c-3.309 0-6-2.692-6-6s2.691-6 6-6 6 2.691 6 6-2.691 6-6 6z\" style=\"fill:#fff;stroke-width:0\"/><path style=\"fill:url(#8913t7g6za);stroke-width:0\" d=\"M8 9 0 0h16l2.305 3.305L8 9z\"/><path style=\"fill:url(#woevpxiuib);stroke-width:0\" d=\"m12 31 4.386-9L6 21 2 31h10z\"/><path style=\"fill:url(#je2bg9iagc);stroke-width:0\" d=\"m24 23 8 9H16l-2.305-3.305L24 23z\"/><path style=\"stroke-width:0\" d=\"M16 31h-4.283L15 22h2l-1 9z\"/></mask></defs><g style=\"mask:url(#brch21jdod)\"><path style=\"fill:url(#2co5q30b1e);stroke-width:0\" d=\"M0 0h32v32H0z\"/></g><circle cx=\"6\" cy=\"6\" r=\"2\" style=\"fill:#f4f4f4;stroke-width:0\"/><circle cx=\"26\" cy=\"26\" r=\"2\" style=\"fill:#f4f4f4;stroke-width:0\"/><path d=\"M16 31c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5zm0-8c-1.654 0-3 1.346-3 3s1.346 3 3 3 3-1.346 3-3-1.346-3-3-3z\" style=\"fill:#f4f4f4;stroke-width:0\"/></svg>';\n\n  /**\n   * Streaming boolean to accept incomplete raw text and change parsing strategy\n   */\n  @property({ type: Boolean, attribute: 'stream-content' })\n  _streamContent;\n\n  /**\n   * Boolean to allow feedback forms to appear\n   */\n  @property({ type: Boolean, attribute: 'enable-complex-feedback' })\n  enableComplexFeedback;\n\n  /**\n   * Force interruption boolean set when parent changes stream-content attribute to false;\n   */\n  @state()\n  _forceStreamEnd = false;\n\n  /**\n   * Temporary element that can morph based on type to preview streaming content\n   */\n  @state()\n  temporaryMessage: { content: any; type: string } = {\n    content: '',\n    type: 'text',\n  };\n\n  /**\n   * Index in token array to simulate streaming\n   */\n  @state()\n  streamingIndex = 0;\n\n  /**\n   * Token array created from slicing rawText\n   */\n  @state()\n  tokens: string[] = [];\n\n  /**\n   * Boolean denoting if streaming is currently attempted\n   */\n  @state()\n  currentlyStreaming = false;\n\n  /**\n   * String that increments with tokens added and vut when blocks are identified\n   */\n  @state()\n  bufferMessage = '';\n\n  /**\n   * Current Identified block type\n   */\n  @state()\n  currentType = '';\n\n  /**\n   * Setinterval function ID to animate token streaming and stop when end of rawtext is reached\n   */\n  @state()\n  streamingInterval;\n\n  /**\n   * streaming speed in milliseconds\n   */\n  @state()\n  streamingSpeed;\n\n  /**\n   * base streaming speed\n   */\n  @state()\n  baseStreamingSpeed = 8;\n\n  /**\n   * feedbackFormTarget - div object to give to popup\n   */\n  @state()\n  feedbackFormTarget;\n\n  /**\n   * selection state for thumbs up\n   */\n  @state()\n  positiveFeedbackSelected = false;\n\n  /**\n   * selection state for thumbs down\n   */\n  @state()\n  negativeFeedbackSelected = false;\n\n  /** JSON dictionary of items describing feedback values\n   */\n  @property({ type: Object, attribute: 'feedbackFormDefinitions' })\n  feedbackFormDefinitions;\n\n  /** Desired feedback top/bottom orientation\n   */\n  @state()\n  _feedbackFormOrientation = 'top';\n\n  /**\n   * current user defined feedback form values (title, selections etcc...)\n   */\n  @state()\n  _feedbackFormValues;\n\n  /**\n   * target DOM element for popup\n   */\n  @state()\n  popupTargetElement;\n\n  /**\n   * unique id to tie feedback together\n   */\n  @state()\n  uniqueFeedbackId;\n\n  /**\n   * custom label presets\n   */\n  @property({ type: Object, attribute: 'customLabels' })\n  customLabels;\n\n  @state()\n  _readerContent;\n\n  @state()\n  previousMessageWidth;\n\n  /** detect when component is rendered to process rawtext\n   */\n  firstUpdated() {\n    this._getTheme();\n    if (this.hasAttribute('display-color')) {\n      this.style.setProperty(\n        '--chat-message-unique-display-color',\n        this.displayColor\n      );\n    }\n\n    if (this.loadingState) {\n      this._messageElements = [{ content: '', type: 'loading' }];\n\n      return;\n    }\n\n    if (this.errorState) {\n      this._messageElements = [{ content: this.rawText, type: 'error' }];\n\n      return;\n    }\n\n    if (this.elements == null) {\n      if (this.userSubmitted) {\n        if (this.rawText) {\n          this._parseText();\n        }\n      } else {\n        if (this._streamContent) {\n          this._streamText();\n        } else {\n          if (this.rawText) {\n            //this._parseText();\n          }\n        }\n      }\n    } else {\n      this._messageElements = this.elements;\n      //this._readerContent = this._prepareReaderText(this.elements);\n    }\n  }\n\n  /** _prepareReaderText - convert obecjts into readable text\n   * @param {Object} elements -  array of objects\n   */\n  _prepareReaderText(elements) {\n    let textToRead = '';\n    /*const userElement = this.shadowRoot?.querySelector(\n      '.' + clabsPrefix + '--chat-message-response-user'\n    );\n    const botElement = this.shadowRoot?.querySelector(\n      '.' + clabsPrefix + '--chat-message-response-bot'\n    );\n    if(userElement instanceof HTMLElement){\n      console.log('user')\n      textToRead = userElement.textContent || userElement.innerText || '';\n    }else if(botElement instanceof HTMLElement){\n      console.log('bot')\n      console.log(botElement)\n      textToRead = botElement.textContent || botElement.innerText || '';\n    }else{\n      console.log('fail')\n      textToRead = elements.map((element) => element.content).join('\\n');\n    }*/\n    if (elements.length == 1) {\n      if (elements[0]?.type === 'loading') {\n        return this._renderLabel('message-loading-aria-label');\n      }\n    }\n    textToRead = elements.map((element) => element.content).join('\\n');\n    const tagRegex = '<[^>]*>';\n    const extrasRegex = '<(script|style)[^>]*>[\\\\s\\\\S]*?<\\\\/\\\\1>';\n\n    const cleanText = textToRead.replace(new RegExp(extrasRegex, 'gi'), '');\n    const pureText = cleanText.replace(new RegExp(tagRegex, 'g'), '');\n    return pureText.trim();\n  }\n\n  /** internal LIT function to detect updates to the DOM tree, used to auto update the messageElements attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has('bufferMessage')) {\n      const messageUpdateEvent = new CustomEvent('on-structure-change', {\n        detail: { action: 'message: internal change' },\n        bubbles: true,\n        composed: true,\n      });\n      this.dispatchEvent(messageUpdateEvent);\n    }\n    if (changedProperties.has('_streamContent')) {\n      this._forceStreamEnd = !this._streamContent;\n    }\n    if (changedProperties.has('rawText')) {\n      //this._readerContent = this.rawText;\n      if (!this._streamContent) {\n        this._parseText();\n      }\n    }\n    if (changedProperties.has('_messageElements')) {\n      this._readerContent = this._prepareReaderText(this._messageElements);\n    }\n    if (changedProperties.has('compactIcon')) {\n      this.showFeedBackForm = false;\n    }\n    if (changedProperties.has('_readerContent')) {\n      setTimeout(() => {\n        /*const hiddenLabel = this.shadowRoot?.querySelector(\n          '.' + clabsPrefix + '--chat-message-hidden-label'\n        );\n        if (hiddenLabel instanceof HTMLElement) {\n          hiddenLabel.setAttribute('role', 'alert');\n          setTimeout(() => {\n            hiddenLabel.setAttribute('role', 'heading');\n          }, 1000);\n        }*/\n      }, 200);\n    }\n  }\n\n  /**\n   * _getTheme - find current theme by checking parent background color\n   */\n  _getTheme() {\n    if (this.parentElement instanceof HTMLElement) {\n      const parentStyle = getComputedStyle(this.parentElement);\n      const backgroundColor = parentStyle.getPropertyValue('--cds-background');\n      let darkMode = false;\n      if (\n        backgroundColor.startsWith('#') &&\n        parseInt(backgroundColor.replace('#', ''), 16) < 0xffffff / 2\n      ) {\n        darkMode = true;\n      }\n\n      this._parentTheme = darkMode ? 'g100' : 'white';\n    }\n  }\n\n  /**\n   * handleSlotchange - handle edits to slots when an element is placed in it\n   * @param {event} event - tag click event sent by tagList element\n   */\n  _handleSlotchange(event) {\n    const messageDetails = this._prepareEventDetail();\n    messageDetails['action'] = 'message: slotted content added';\n    event.preventDefault();\n    const messageSlotUpdateEvent = new CustomEvent(\n      'on-message-element-slot-update',\n      {\n        detail: messageDetails,\n        bubbles: true,\n        composed: true,\n      }\n    );\n    this.dispatchEvent(messageSlotUpdateEvent);\n  }\n\n  /** check the returned model response for a specified code delimiter, split and package the string into multiple messages of type 'text' or 'code'\n   * @param {string} string - returned API call response\n   **/\n  _checkForCode(string) {\n    const delimiter = '```';\n    const segments = string.split(delimiter);\n    const splitParts: { content: any; type: string }[] = [];\n\n    for (let i = 0; i < segments.length; i++) {\n      const segment = segments[i].trim();\n      if (i % 2 === 0) {\n        if (segment.length > 0) {\n          splitParts.push({ content: segment, type: 'text' });\n        }\n      } else {\n        if (segment.length > 0) {\n          splitParts.push({ content: segment, type: 'code' });\n        }\n      }\n    }\n    return splitParts;\n  }\n\n  /** _hideFeedBackForm -  hide popup subelement\n   *\n   **/\n  _hideFeedBackForm() {\n    this.showFeedBackForm = false;\n  }\n\n  /**\n   * generateUniqueId - create random string to give unique feedback signature\n   */\n  generateUniqueId() {\n    const randomString: string = Math.random().toString(36).substr(2, 9);\n    return randomString;\n  }\n\n  /**  _handleDisplayFeedBackForm - target div and place popup appropriately\n   * @param {event} event - target button click event\n   * @param {string} type - thumbs up or down or custom\n   * @param {string} uniqueId - unique code for event\n   **/\n  _handleDisplayFeedBackForm(event, type, uniqueId) {\n    const targetItem = event.target;\n    this.popupTargetElement = targetItem;\n    //const boundingRect = targetItem.getBoundingClientRect();\n    event.preventDefault();\n    const mainHeight = this.parentElement?.parentElement?.scrollHeight;\n\n    if (this.feedbackFormDefinitions) {\n      this._feedbackFormValues = this.feedbackFormDefinitions[type];\n      this._feedbackFormValues.uniqueFeedbackId = this.uniqueFeedbackId;\n      this._feedbackFormValues.parentValues = {\n        offsetTop: this.offsetTop,\n        scrollHeight: mainHeight,\n        uniqueId: uniqueId,\n      };\n    }\n    this.showFeedBackForm = true;\n  }\n\n  /**\n   * prepare event detail before passing to parent\n   */\n  _prepareEventDetail() {\n    const nullStateMessage = 'not-specified';\n    const eventDetail = {\n      messageOrigin: this.origin ? this.origin : nullStateMessage,\n      messageTime: this.timeStamp ? this.timeStamp : nullStateMessage,\n      displayName: this.displayName ? this.displayName : nullStateMessage,\n      messageIndexInChat: this.index,\n    };\n    return eventDetail;\n  }\n\n  /** record tag selection\n   * @param {event} event - lit custom event from tagList\n   **/\n  _onTagSelected(event) {\n    const messageDetails = this._prepareEventDetail();\n    const content = event.tagContent;\n    messageDetails['action'] = 'message: tag in tag list element clicked';\n    messageDetails['selectedTagContent'] = content;\n    event.preventDefault();\n    const tagSelectionEvent = new CustomEvent(\n      'on-message-element-tag-selected',\n      {\n        detail: messageDetails,\n        bubbles: true,\n        composed: true,\n      }\n    );\n    this.dispatchEvent(tagSelectionEvent);\n  }\n\n  /**\n   * _childLinkClicked - record when link clicked in linkList\n   * @param {event} event - lit custom event from linkList\n   **/\n  _childLinkClicked(event) {\n    const messageDetails = this._prepareEventDetail();\n    messageDetails['action'] = 'message: link-sub-element in message clicked';\n    messageDetails['event'] = event;\n\n    messageDetails['selectedURL'] = event.detail.selectedURL;\n    messageDetails['selectedTitle'] = event.detail.selectedTitle;\n\n    const linkClickedEvent = new CustomEvent(\n      'on-message-link-list-item-click',\n      {\n        detail: messageDetails,\n        bubbles: true,\n        composed: true,\n      }\n    );\n    this.dispatchEvent(linkClickedEvent);\n  }\n\n  /** record element click\n   * @param {event} event - lit custom event from sub element click\n   **/\n  _handleMessageElementClick(event) {\n    const messageDetails = this._prepareEventDetail();\n    messageDetails['action'] = 'message: sub-element in message clicked';\n    messageDetails['event'] = event;\n    //const selectedElement = this._messageElements[index]\n    //messageDetails[\"elementContent\"] = selectedElement.content;\n    //messageDetails[\"elementType\"] = selectedElement.type;\n    //messageDetails[\"indexInMessage\"] = index;\n\n    event.preventDefault();\n    const subElementSelectionEvent = new CustomEvent(\n      'on-message-element-selected',\n      {\n        detail: messageDetails,\n        bubbles: true,\n        composed: true,\n      }\n    );\n    this.dispatchEvent(subElementSelectionEvent);\n  }\n\n  /**\n   * _checkStreamForBlocks - check if a block has started, if it has only check if it has ended and return the type, content, previous text and status of the parsing\n   */\n  _checkStreamForBlocks() {\n    let result: {\n      content: any;\n      type: string;\n      preBlockText: string;\n      status: string;\n    };\n    if (!this.currentType) {\n      result = this._checkBlockStart();\n    } else {\n      result = this._checkBlockEnd();\n    }\n    return result;\n  }\n\n  /**\n   * _checkBlock - scan incoming stream of tokens to see the type of block detected\n   * @param {string} blockToCheck - string block to check type of to finalize rendering\n   */\n  _checkBlockType(blockToCheck) {\n    const regexPatterns = {\n      code: new RegExp('```'),\n      json: new RegExp('\\\\{'),\n      table: new RegExp('((\\\\w+,\\\\w+)(,[\\\\w+]*)*[\\\\r\\\\n]+)+'),\n      array: new RegExp('(?<!\\\\))\\\\['),\n      url: new RegExp('(http|ftp)'),\n      list: new RegExp('(?:\\\\d+\\\\.\\\\s+|[-*]\\\\s)'),\n      //list: new RegExp('(^|\\\\n)\\\\s*(?:[-*\\\\u2022\\\\u25E6\\\\u25AA\\\\u25CF]\\\\s|\\\\s1\\\\.\\\\s)','m')\n    };\n\n    for (const type in regexPatterns) {\n      const match: RegExpMatchArray | null = blockToCheck.match(\n        regexPatterns[type]\n      );\n      if (match) {\n        const matchIndex: number = match.index ? match.index : -1;\n        if (matchIndex > -1) {\n          return type;\n        }\n      }\n    }\n    return 'text';\n  }\n\n  /**\n   * _checkBlockStart - scan incoming stream of tokens to see if a typed block has started\n   */\n  _checkBlockStart() {\n    const analysisPriority = [\n      'code',\n      'json',\n      'formula',\n      'table',\n      'array',\n      'molecule',\n      'url',\n      'list',\n    ];\n    const regexPatterns = {\n      code: new RegExp('```'),\n      json: new RegExp('\\\\{'),\n      table: new RegExp('((\\\\w+,\\\\w+)(,[\\\\w+]*)*[\\\\r\\\\n]+)+'),\n      array: new RegExp('\\\\[\\\\\"'),\n      formula: new RegExp('\\\\\\\\\\\\('),\n      //molecule: new RegExp('^[A-Za-z0-9@+\\\\-\\\\[\\\\]\\\\(\\\\)=#%$]+$'),\n      //molecule: new RegExp('^[CNOSPFIBrcln=#$%@\\\\-+\\\\[\\\\]()\\\\/0-9]+$'),\n      //molecule: new RegExp('^([BCOHNSPKFYIWcl][a-zA-Z0-9@+\\\\-\\\\[\\\\]\\\\(\\\\)=#$%]*)+'),\n      //molecule: new RegExp('A-Za-z0-9@#=\\\\+\\\\-\\\\(\\\\)\\\\[\\\\]]+'),\n      //annotation: new RegExp('\\\\[[^\\\\]]*,'),\n      annotation: new RegExp('\\\\(.*?\\\\)\\\\[.*?\\\\]'),\n      //molecule: new RegExp('(?:^|\\\\s)([BCNOPSFIbcnopsdi0-9@+\\\\-\\\\[\\\\]=#%$\\\\\\\\()/.]+)(?=\\\\s|$)'),\n      //molecule: new RegExp('[A-Za-z0-9@+\\\\-=#$%&\\\\\\\\\\\\/()\\\\[\\\\]{}]*$'),\n      //molecule: new RegExp('^[A-Za-z0-9@+\\\\-=#$%&\\\\\\\\\\\\/()\\\\[\\\\]{}]*$','g'),\n      url: new RegExp('(?<!\\\\(|,)\\\\b(http|ftp)\\\\S+'),\n      //url: new RegExp('(?<!\\\\()(http|ftp)'),\n      list: new RegExp('(?:1\\\\.\\\\s+[-*]\\\\s|\\\\d{2,}\\\\.\\\\s+[-*]\\\\s)'),\n      //list: new RegExp('(?:\\\\d+\\\\.\\\\s+|[-*]\\\\s)'),\n      //list: new RegExp('(^|\\\\n)\\\\s*(?:[-*\\\\u2022\\\\u25E6\\\\u25AA\\\\u25CF]\\\\s|\\\\s1\\\\.\\\\s)','m')\n    };\n\n    for (const type of analysisPriority) {\n      const match: RegExpMatchArray | null = this.bufferMessage.match(\n        regexPatterns[type]\n      );\n      if (match) {\n        const matchIndex: number = match.index ? match.index : -1;\n        if (matchIndex > -1) {\n          const preBlockText = this.bufferMessage.substring(0, matchIndex);\n          const subBuffer: string = this.bufferMessage.substring(matchIndex);\n          this.bufferMessage = subBuffer;\n          return {\n            status: 'started',\n            type: type,\n            content: this.bufferMessage,\n            preBlockText: preBlockText,\n          };\n        }\n      }\n    }\n\n    return {\n      status: '',\n      type: '',\n      content: '',\n      preBlockText: '',\n    };\n  }\n\n  /**\n   * _checkBlockEnd - if type was identified as being streamed in, look for conditions that indifcate the block is done or a next block has started\n   */\n  _checkBlockEnd() {\n    let stopIndex = -1;\n    switch (this.currentType) {\n      case 'code': {\n        stopIndex = this.bufferMessage.indexOf('```', 3);\n        if (stopIndex !== -1) {\n          stopIndex += 3;\n        }\n        break;\n      }\n      case 'chart':\n      case 'json': {\n        let offset = 0;\n        for (let k = 0; k < this.bufferMessage.length; k++) {\n          const char = this.bufferMessage[k];\n          if (char === '{') {\n            offset++;\n          }\n          if (char === '}') {\n            offset--;\n            stopIndex = k;\n          }\n        }\n        if (offset !== 0) {\n          stopIndex = -1;\n        }\n        break;\n      }\n      case 'array':\n      case 'tags':\n      case 'carousel':\n        stopIndex = this.bufferMessage.indexOf(']');\n        break;\n      case 'annotation':\n        stopIndex = this.bufferMessage.indexOf(')');\n        break;\n      case 'molecule':\n      case 'formula':\n      case 'url':\n        stopIndex = this.bufferMessage.indexOf('\\n');\n        break;\n      case 'table': {\n        /*const tableEnd = this.bufferMessage.match(/^[^\\r\\n]*(?![\\r\\n]+(\\w+,\\w+))/);\n        stopIndex = tableEnd ? tableEnd.index : -1;*/\n        const CSVLines = this.bufferMessage.split('\\n');\n        let countIndex = 0;\n        let nonCSVcount = 0;\n        let previousLength = 9;\n        for (const line of CSVLines) {\n          if (!new RegExp('^[\\\\w\\\\s]+(,[\\\\w\\\\s]+)*$').test(line)) {\n            nonCSVcount++;\n            if (nonCSVcount > 1) {\n              stopIndex = countIndex - previousLength;\n              break;\n            }\n          }\n          previousLength = line.length + 1;\n          countIndex += previousLength;\n        }\n        break;\n      }\n      case 'list': {\n        //const listEnd = this.bufferMessage.match(/^(?![-*]|\\d+\\.)\\s/m);\n        //stopIndex = listEnd ? listEnd.index : -1;\n        let nonListCount = 0;\n        let listCharacterLength = 0;\n        let previousLength = 0;\n        const listLines = this.bufferMessage.split('\\n');\n        for (const listItem of listLines) {\n          if (\n            !new RegExp(\n              '\\\\s*(?:[-*\\\\u2022\\\\u25E6\\\\u25AA\\\\u25CF]\\\\s|\\\\d+\\\\.\\\\s)'\n            ).test(listItem)\n          ) {\n            nonListCount++;\n            if (nonListCount > 1) {\n              stopIndex = listCharacterLength - previousLength;\n              break;\n            }\n          }\n          previousLength = listItem.length + 1;\n          listCharacterLength += previousLength;\n        }\n        break;\n      }\n    }\n    if (stopIndex !== null && stopIndex !== -1) {\n      if (\n        this.currentType === 'array' ||\n        this.currentType === 'carousel' ||\n        this.currentType === 'tags' ||\n        this.currentType === 'chart' ||\n        this.currentType === 'json'\n      ) {\n        stopIndex++;\n      }\n      if (this.currentType === 'table') {\n        stopIndex--;\n      }\n      const block = this.bufferMessage.substring(0, stopIndex);\n      this.bufferMessage = this.bufferMessage.substring(stopIndex);\n      let exitType = this.currentType;\n\n      if (exitType === 'array') {\n        try {\n          JSON.parse(block);\n          exitType = 'carousel';\n        } catch (error) {\n          exitType = 'tags';\n        }\n      }\n\n      if (exitType === 'json') {\n        if (this.bufferMessage.indexOf('$schema') > -1) {\n          exitType = 'chart';\n        } else {\n          exitType = 'code';\n        }\n      }\n      return {\n        status: 'ended',\n        type: exitType,\n        content: block,\n        preBlockText: '',\n      };\n    }\n    return {\n      status: 'incomplete',\n      type: this.currentType,\n      content: this.bufferMessage,\n      preBlockText: '',\n    };\n  }\n\n  /**\n   * _checkAmbiguousBlock - change type of block if subtype confirmed\n   */\n  _checkAmbiguousBlock() {\n    if (this.currentType === 'code') {\n      const smilesRegex = new RegExp(\n        '^[CNOSPFIBrcln=#$%@\\\\-+\\\\[\\\\]()\\\\/0-9]+$'\n      );\n      //molecule: new RegExp('^[A-Za-z0-9@+\\\\-\\\\[\\\\]\\\\(\\\\)=#%$]+$'),\n      //molecule: new RegExp('^[CNOSPFIBrcln=#$%@\\\\-+\\\\[\\\\]()\\\\/0-9]+$'),\n      //molecule: new RegExp('^([BCOHNSPKFYIWcl][a-zA-Z0-9@+\\\\-\\\\[\\\\]\\\\(\\\\)=#$%]*)+'),\n      //molecule: new RegExp('A-Za-z0-9@#=\\\\+\\\\-\\\\(\\\\)\\\\[\\\\]]+'),\n      if (smilesRegex.test(this.bufferMessage.replace('```', ''))) {\n        this.currentType = 'molecule';\n        this.temporaryMessage.type = 'molecule';\n      }\n    }\n    if (this.currentType === 'json') {\n      if (this.bufferMessage.indexOf('$schema') > -1) {\n        this.currentType = 'chart';\n        this.temporaryMessage.type = 'chart';\n      }\n    }\n    if (this.currentType === 'array') {\n      const urlRegex = new RegExp('(https?:\\\\/\\\\/[^\\\\s]+)', 'g');\n      const items = this.bufferMessage\n        .replace('[', '')\n        .replace(new RegExp(',\\\\s*$'), '')\n        .split(',');\n      if (items.length > 1) {\n        const checkAllURLs = urlRegex.test(items[0]);\n        if (checkAllURLs) {\n          this.temporaryMessage.type = 'carousel';\n          this.currentType = 'carousel';\n        } else {\n          this.temporaryMessage.type = 'tags';\n          this.currentType = 'tags';\n        }\n      }\n    }\n  }\n\n  /**\n   * Parse Raw Text buffer into elements\n   */\n  _streamText() {\n    console.log('streaming...');\n    this.currentlyStreaming = true;\n    this.tokens = this._tokenize(this.rawText);\n    //this.tokens = [...this.tokens,...['\\n  ','\\n  ']]\n    this.bufferMessage = '';\n    this.temporaryMessage = { content: '', type: 'text' };\n    this.currentType = '';\n    this.baseStreamingSpeed = this._streamDelay || this.baseStreamingSpeed;\n\n    this._beginStreaming();\n  }\n\n  /**\n   * Begin stream animation\n   */\n  _beginStreaming() {\n    if (this.streamingInterval !== null) {\n      clearInterval(this.streamingInterval);\n    }\n\n    this.streamingInterval = setTimeout(() => {\n      const token = this.tokens[this.streamingIndex] || '';\n      this.streamingIndex++;\n      this.bufferMessage += token;\n\n      const blockSignal: {\n        content: any;\n        type: string;\n        preBlockText: string;\n        status: string;\n      } = this._checkStreamForBlocks();\n\n      if (blockSignal) {\n        if (blockSignal.type !== '') {\n          if (blockSignal.status === 'started') {\n            this.currentType = blockSignal.type;\n            this.temporaryMessage.content = this.bufferMessage;\n            if (blockSignal.type === 'url') {\n              this.temporaryMessage.type = 'text';\n            } else if (blockSignal.type === 'json') {\n              this.temporaryMessage.type = 'code';\n            } else if (blockSignal.type === 'array') {\n              this.temporaryMessage.type = 'text';\n            } else {\n              this.temporaryMessage.type = blockSignal.type;\n            }\n            if (blockSignal.preBlockText.length > 0) {\n              if (blockSignal.preBlockText.trim() !== '') {\n                this._cutPlainText(blockSignal.preBlockText.trim());\n              }\n            }\n          }\n          if (blockSignal.status === 'incomplete') {\n            this._checkAmbiguousBlock();\n            this.temporaryMessage.content = this.bufferMessage;\n\n            if (blockSignal.type === 'text') {\n              const splitter = blockSignal.content.split('\\n');\n              if (splitter.length > 0) {\n                for (let i = 0; i < splitter.length - 1; i++) {\n                  const subLine = splitter[i];\n                  this._messageElements = [\n                    ...this._messageElements,\n                    { content: subLine, type: 'text' },\n                  ];\n                  this.bufferMessage = splitter[splitter.length];\n                }\n              }\n            }\n          }\n          if (blockSignal.status === 'ended') {\n            this.currentType = '';\n            this.temporaryMessage.type = 'text';\n            if (blockSignal.type === 'url') {\n              blockSignal.type = this._checkURLType(blockSignal.content);\n            }\n            if (blockSignal.type === 'text') {\n              this._cutPlainText(blockSignal.content);\n            } else {\n              this._messageElements = [\n                ...this._messageElements,\n                { content: blockSignal.content, type: blockSignal.type },\n              ];\n            }\n          }\n        } else {\n          this.temporaryMessage.content = this.bufferMessage;\n          this.temporaryMessage.type = 'text';\n        }\n      } else {\n        this.temporaryMessage.content = this.bufferMessage;\n        this.temporaryMessage.type = 'text';\n      }\n\n      /*if (this.temporaryMessage.type === 'text') {\n        this.temporaryMessage.content += '/';\n      }*/\n\n      this.streamingSpeed =\n        this.baseStreamingSpeed +\n        Math.random() *\n          Math.random() *\n          Math.random() *\n          this.baseStreamingSpeed *\n          5;\n\n      switch (this.temporaryMessage.type) {\n        case 'code':\n          this.streamingSpeed = this.baseStreamingSpeed / 1;\n          break;\n        case 'table':\n          this.streamingSpeed = this.baseStreamingSpeed / 1;\n          break;\n        case 'carousel':\n          this.streamingSpeed = this.baseStreamingSpeed / 1;\n          break;\n        case 'json':\n        case 'chart':\n          this.streamingSpeed = this.baseStreamingSpeed / 4;\n          break;\n        case 'molecule':\n          this.streamingSpeed = this.baseStreamingSpeed * 4;\n          break;\n        case 'text':\n          this.streamingSpeed = this.baseStreamingSpeed;\n          break;\n      }\n      this.streamingSpeed = Math.max(1, this.streamingSpeed);\n\n      if (this.streamingIndex >= this.tokens.length || this._forceStreamEnd) {\n        if (this.currentlyStreaming) {\n          this.currentlyStreaming = false;\n          this._beginStreaming();\n        } else {\n          if (this.temporaryMessage.content.length > 0) {\n            const trailingContent = this.temporaryMessage.content;\n            const finalSegments = trailingContent.trim().split('\\n');\n            const lastLine = finalSegments.pop();\n            const lastBlockType = this._checkBlockType(lastLine);\n\n            if (lastBlockType !== this.temporaryMessage.type) {\n              this._messageElements = [\n                ...this._messageElements,\n                {\n                  content: finalSegments.join('\\n').replace(/\\.\\.\\.$/, ''),\n                  type: this.temporaryMessage.type,\n                },\n              ];\n              this._messageElements = [\n                ...this._messageElements,\n                {\n                  content: lastLine,\n                  type: lastBlockType,\n                },\n              ];\n            } else {\n              this._messageElements = [\n                ...this._messageElements,\n                {\n                  content: trailingContent.replace(/\\.\\.\\.$/, ''),\n                  type: this.temporaryMessage.type,\n                },\n              ];\n            }\n          }\n          this.temporaryMessage.content = '';\n          this.streamingIndex = 0;\n          this._signalEndOfStreaming();\n        }\n      } else {\n        this._beginStreaming();\n      }\n    }, this.streamingSpeed);\n  }\n\n  /** _cutPlainText - cut normal text into subelements to display them as unique items\n   * @param {string} plainText - text to parse\n   */\n  _cutPlainText(plainText) {\n    const splitLines = plainText.split('\\n');\n    const splitLineElements = splitLines.map((line) => ({\n      content: line,\n      type: this._checkLinks(line) ? 'link-list' : 'text',\n    }));\n    this._messageElements = [...this._messageElements, ...splitLineElements];\n  }\n\n  /** _checkLinks - see if annotated markdown text is strictly a link list\n   * @param {string} blockText - text to parse\n   */\n  _checkLinks(blockText) {\n    //const linkListRegex = new RegExp('^\\\\s*(?:\\\\[[^\\\\]]+\\\\]\\\\([^\\\\)+\\\\)|[^[]+)*\\\\s*$');\n    const linkListRegex = new RegExp(\n      '^\\\\[.*?\\\\]\\\\(.*?\\\\)(,\\\\[.*?\\\\]\\\\(.*?\\\\))*$'\n    );\n    return linkListRegex.test(blockText.trim());\n  }\n\n  /**\n   * _signalEndOfStreaming - send custom event to all parents to signal streaming has been finalized\n   */\n  _signalEndOfStreaming() {\n    const endOfStreamingEvent = new CustomEvent('on-message-streaming-done', {\n      detail: { action: 'message component reported end of streaming' },\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(endOfStreamingEvent);\n  }\n\n  /**\n   * _tokenize - simulate tokens being streamed in but slicing the rawText string with the harshest cutting threshold\n   * @param {string} inputText - text to be split into tokens\n   */\n  _tokenize(inputText) {\n    const tokenizerRegex = new RegExp(\n      '(\\\\s|,|#|\\\\{|\\\\}|\"|\\\\[|\\\\]|%|\\'|\\\\n|\\\\t|\\\\/|\\\\.|_|<|>|:|-|\\\\(|\\\\)|\\\\?|\\\\||@|&|\\\\*|\\\\+|=|;|\\\\`|~)'\n    );\n    const tokens = inputText.split(tokenizerRegex);\n    return tokens;\n  }\n\n  /**\n   * Parse Raw Text buffer into elements\n   */\n  _parseText() {\n    this.tokens = this._tokenize(this.rawText);\n    this.currentType = '';\n    this.bufferMessage = '';\n\n    for (const token of this.tokens) {\n      this.bufferMessage += token;\n\n      const blockSignal: {\n        content: any;\n        type: string;\n        preBlockText: string;\n        status: string;\n      } = this._checkStreamForBlocks();\n\n      if (blockSignal) {\n        if (blockSignal.type !== '') {\n          if (blockSignal.status === 'started') {\n            this.currentType = blockSignal.type;\n            if (blockSignal.preBlockText.length > 0) {\n              if (blockSignal.preBlockText.trim() !== '') {\n                this._messageElements = [\n                  ...this._messageElements,\n                  { content: blockSignal.preBlockText, type: 'text' },\n                ];\n              }\n            }\n          }\n          if (blockSignal.status === 'incomplete') {\n            this._checkAmbiguousBlock();\n          }\n          if (blockSignal.status === 'ended') {\n            this.currentType = '';\n            if (blockSignal.type === 'url') {\n              blockSignal.type = this._checkURLType(blockSignal.content);\n            }\n            this._messageElements = [\n              ...this._messageElements,\n              { content: blockSignal.content, type: blockSignal.type },\n            ];\n          }\n        }\n      }\n      this.streamingIndex++;\n      if (this.streamingIndex === this.tokens.length) {\n        if (this.bufferMessage) {\n          this._messageElements = [\n            ...this._messageElements,\n            { content: this.bufferMessage, type: 'text' },\n          ];\n        }\n      }\n    }\n  }\n\n  /** parse Raw text param into a sub array of objects to display different elements in a single message block\n   **/\n  _parseTextOld() {\n    const returnedText = this.rawText;\n    const subMessages: { content: any; type: string }[] = [];\n\n    const codeSplitter = this._checkForCode(returnedText);\n\n    if (codeSplitter.length == 0 || returnedText == 'undefined') {\n      subMessages.push({\n        content: 'Model reply received but was undefined.',\n        type: 'error',\n      });\n    } else {\n      for (const secondReply of codeSplitter) {\n        if (secondReply.type == 'code') {\n          subMessages.push(secondReply);\n        } else {\n          const objectSplitter = this._checkForObjects(secondReply.content);\n          for (const thirdReply of objectSplitter) {\n            if (thirdReply.type !== 'non-object') {\n              subMessages.push(thirdReply);\n            } else {\n              const urlSplitter = this._checkForURLs(thirdReply.content);\n              for (const fourthReply of urlSplitter) {\n                if (fourthReply.type == 'text') {\n                  //subMessages.push(subSubReply);\n                  const formattedList = this._checkForFormatting(\n                    fourthReply.content\n                  );\n                  for (const [index, subItem] of formattedList.entries()) {\n                    if (index === formattedList.length - 1) {\n                      subMessages.push(subItem);\n                    } else {\n                      subMessages.push(subItem);\n                    }\n                  }\n                } else {\n                  subMessages.push(fourthReply);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    this._messageElements = subMessages;\n  }\n\n  /** _checkForObjects analyze if objects elements are present and parse them out\n   * @param {string} inputText - text block to be checked\n   */\n  _checkForObjects(inputText) {\n    const splitParts: { content: any; type: string }[] = [];\n    const splitter = inputText.split('\\n');\n    let messageChunks: string[] = [];\n    for (const item of splitter) {\n      try {\n        const testJSON = JSON.parse(item);\n        const objectType = this._checkObjectType(testJSON);\n\n        if (objectType === 'multi-url') {\n          splitParts.concat(\n            testJSON.map((url) => ({ content: url, type: 'url' }))\n          );\n        } else {\n          splitParts.push({\n            type: objectType,\n            content: item,\n          });\n        }\n\n        if (messageChunks.length > 0) {\n          splitParts.push({\n            type: 'non-object',\n            content: messageChunks.join('\\n'),\n          });\n          messageChunks = [];\n        }\n      } catch (error) {\n        messageChunks.push(item);\n      }\n    }\n\n    if (messageChunks.length > 0) {\n      splitParts.push({\n        type: 'non-object',\n        content: messageChunks.join('\\n'),\n      });\n      messageChunks = [];\n    }\n\n    return splitParts;\n  }\n\n  /** _checkObjectType - check what category of JSON object it is\n   * @param {object} jsonObject - JSON object to be analyzed and aasigned a type, if array check all objects inside to see if carousel or tags, if not make it code or a chart\n   */\n  _checkObjectType(jsonObject) {\n    let jsonType = 'code';\n    if (Array.isArray(jsonObject)) {\n      const urlRegex = new RegExp('(https?://[^\\\\s]+)', 'g');\n      const imageRegex = new RegExp('\\\\.(png|jpg|jpeg|gif|svg)$', 'i');\n\n      const checkAllImages = jsonObject.every(\n        (item) => imageRegex.test(item) && typeof item === 'string'\n      );\n      const checkAllURLs = jsonObject.every(\n        (item) => urlRegex.test(item) && typeof item === 'string'\n      );\n\n      if (checkAllImages) {\n        jsonType = 'carousel';\n      } else if (checkAllURLs) {\n        jsonType = 'multi-url';\n      } else {\n        jsonType = 'tags';\n      }\n    } else {\n      if ('$schema' in jsonObject) {\n        jsonType = 'chart';\n      } else {\n        jsonType = 'code';\n      }\n    }\n    return jsonType;\n  }\n\n  /** _checkObjectType - check what category of JSON object it is\n   * @param {object} urlObject - URL string to be parsed and assigned a type\n   */\n  _checkURLType(urlObject) {\n    const imageRegex = new RegExp(\n      '\\\\.(png|jpg|jpeg|gif|svg|bmp|webp|ico|tiff|tif)$',\n      'i'\n    );\n    const videoRegex = new RegExp(\n      '\\\\.(mp4|avi|flv|mkv|mov|webm|m4v|ogv)$',\n      'i'\n    );\n    const fileRegex = new RegExp(\n      '\\\\.(pdf|doc|docx|csv|xls|xlsx|ppt|pptx|txt|rtf|xml|odt|zip|rar|tar|gz)$',\n      'i'\n    );\n    const audioRegex = new RegExp('\\\\.(mp3|flac|wav|ogg|mpa|wma|midi)$', 'i');\n\n    const urlRegex = new RegExp('(https?:\\\\/\\\\/[^\\\\s]+)', 'g');\n\n    if (imageRegex.test(urlObject)) {\n      return 'img';\n    }\n    if (videoRegex.test(urlObject)) {\n      return 'video';\n    }\n    if (audioRegex.test(urlObject)) {\n      return 'audio';\n    }\n    if (fileRegex.test(urlObject)) {\n      return 'file';\n    }\n    if (urlRegex.test(urlObject)) {\n      return 'url';\n    }\n\n    return 'text';\n  }\n\n  /** _checkForFormatting analyze if text elements like lists are present and parse them out\n   * @param {string} inputText - text block to be checked\n   */\n  _checkForFormatting(inputText) {\n    const splitParts: { content: any; type: string }[] = [];\n    //eslint-disable-next-line\n    const listRegex = new RegExp('^(?:d+.|[\\u2022\\u2023\\u25E6\\u2043-])');\n    const splitMatches: string[] = inputText.split('\\n');\n\n    let currentType = '';\n    let tempString = '';\n    for (const match of splitMatches) {\n      const itemType = listRegex.test(match) ? 'list' : 'text';\n      if (currentType === '') {\n        currentType = itemType;\n        tempString += match;\n      } else if (itemType === currentType) {\n        tempString += '\\n' + match;\n      } else {\n        splitParts.push({ type: currentType, content: tempString.trim() });\n        tempString = match;\n        currentType = itemType;\n      }\n    }\n\n    if (tempString !== '') {\n      splitParts.push({\n        type: listRegex.test(tempString) ? 'list' : 'text',\n        content: tempString,\n      });\n    }\n    return splitParts;\n  }\n\n  /** _checkForURLs extract plain and image urls from edxtracted text post code checking\n   * @param {string} inputText - text block to be checked for URLs\n   */\n  _checkForURLs(inputText) {\n    let splitParts: { content: any; type: string }[] = [];\n    const urlRegex = new RegExp('(https?:\\\\/\\\\/[^\\\\s]+)', 'g');\n    const segments = inputText.split(urlRegex);\n    splitParts = segments.map((item) => ({\n      content: item,\n      type: this._checkURLType(item),\n    }));\n    return splitParts;\n  }\n\n  /** editing function when a user click the edit button\n   **/\n  _handleEdit() {\n    const textElement = this.shadowRoot?.querySelector(\n      '.' + clabsPrefix + '--chat-message-response-user'\n    );\n    let previousWidth = this.clientWidth;\n    if (textElement instanceof HTMLElement) {\n      previousWidth = textElement.clientWidth;\n    }\n    this._editing = true;\n    const messageDetails = this._prepareEventDetail();\n    this.previousMessageWidth = previousWidth;\n    messageDetails['action'] = 'MESSAGE: User started a message edit';\n    const startEditEvent = new CustomEvent('on-user-message-edit-request', {\n      detail: messageDetails,\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(startEditEvent);\n  }\n\n  /** record edited changes on message\n   * @param {event} event - lit input event\n   **/\n  _setEditedMessage(event) {\n    this._editedMessage = event.detail.value;\n  }\n\n  /** editing function when a user click the edit button\n   **/\n  _cancelEdit() {\n    this._editing = false;\n    this._editedMessage = '';\n    const messageDetails = this._prepareEventDetail();\n    messageDetails['action'] = 'MESSAGE: User aborted a message edit';\n    const cancelledEditEvent = new CustomEvent(\n      'on-user-message-cancellation-request',\n      {\n        detail: messageDetails,\n        bubbles: true,\n        composed: true,\n      }\n    );\n    this.dispatchEvent(cancelledEditEvent);\n  }\n\n  /** editing function when a user click the edit button\n   **/\n  _validateEdit() {\n    this._editing = false;\n    const messageDetails = this._prepareEventDetail();\n\n    messageDetails['action'] = 'message: user edited a previous query';\n    messageDetails['newMessage'] = this._editedMessage;\n    messageDetails['previousMessage'] = this.rawText;\n    this.rawText = this._editedMessage;\n    this._messageElements = [{ content: this._editedMessage, type: 'text' }];\n    const regenerationEvent = new CustomEvent(\n      'on-user-message-update-request',\n      {\n        detail: messageDetails,\n        bubbles: true,\n        composed: true,\n      }\n    );\n    this.dispatchEvent(regenerationEvent);\n  }\n\n  /** trigger regenerate response event\n   * @param {event} event - regeneration event from subelement\n   */\n  _handleRegenerate(event) {\n    const messageDetails = this._prepareEventDetail();\n    messageDetails['action'] = 'message: user regenerated a chat response';\n    //messageDetails['newMessage'] = this._editedMessage;\n    //messageDetails['rawTextMessage'] = this.rawText;\n    messageDetails['messageElements'] = this._messageElements;\n    event.preventDefault();\n    const regenerationEvent = new CustomEvent('on-message-regeneration', {\n      detail: messageDetails,\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(regenerationEvent);\n  }\n\n  /** trigger message editing start event\n   * @param {event} event - message editing from subelement\n   */\n  _handleMessageEditStart(event) {\n    const messageDetails = this._prepareEventDetail();\n    messageDetails['action'] = 'message: user edited their message';\n    messageDetails['messageElements'] = this._messageElements;\n    event.preventDefault();\n    const messageEditStartEvent = new CustomEvent('on-message-edit-start', {\n      detail: messageDetails,\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(messageEditStartEvent);\n  }\n\n  /** trigger message editing cancel event\n   * @param {event} event - message cancel edit from subelement\n   */\n  _handleMessageEditCancel(event) {\n    const messageDetails = this._prepareEventDetail();\n    messageDetails['action'] = 'message: user canceled their message edit';\n    messageDetails['messageElements'] = this._messageElements;\n    event.preventDefault();\n    const messageEditCancelEvent = new CustomEvent('on-message-edit-cancel', {\n      detail: messageDetails,\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(messageEditCancelEvent);\n  }\n\n  /** feedback function when a user navigates by keyboard and selects the feedback button\n   * @param {event} event - positive event from thumbs up button\n   **/\n  handlePositiveKeyboardInput(event) {\n    if (event.key === 'Enter' || event.key === ' ') {\n      this._handlePositiveFeedback(event);\n      event.preventDefault();\n    }\n  }\n\n  /** feedback function when a user navigates by keyboard and selects the feedback button\n   * @param {event} event - positive event from thumbs up button\n   **/\n  handleNegativeKeyboardInput(event) {\n    if (event.key === 'Enter' || event.key === ' ') {\n      this._handleNegativeFeedback(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * focus on popup element with aria system\n   */\n  _focusOnPopup() {\n    const popUpId = clabsPrefix + '--chat-popup-unique-feedback-' + this.index;\n    const popupElement = this.shadowRoot?.getElementById(popUpId);\n    if (popupElement instanceof HTMLElement) {\n      popupElement.focus();\n    }\n  }\n\n  /** feedback function when a user clicks the feedback button\n   * @param {event} event - positive event from thumbs up button\n   **/\n  _handlePositiveFeedback(event) {\n    const uniqueFeedbackId = this.generateUniqueId();\n    this.positiveFeedbackSelected = !this.positiveFeedbackSelected;\n    this.negativeFeedbackSelected = false;\n\n    const messageDetails = this._prepareEventDetail();\n    if (this.positiveFeedbackSelected) {\n      messageDetails['action'] = 'message: user gave feedback to response';\n      this._focusOnPopup();\n    } else {\n      messageDetails['action'] = 'message: user removed feedback to response';\n    }\n    messageDetails['type'] = 'positive';\n    messageDetails['rawTextMessage'] = this.rawText;\n    messageDetails['messageElements'] = this._messageElements;\n    messageDetails['originalEvent'] = event;\n    messageDetails['feedbackId'] = uniqueFeedbackId;\n    event.preventDefault();\n    const feedbackEvent = new CustomEvent('on-user-feedback-request', {\n      detail: messageDetails,\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(feedbackEvent);\n    if (this.positiveFeedbackSelected) {\n      this._handleDisplayFeedBackForm(event, 'thumbs-up', uniqueFeedbackId);\n    } else {\n      this._hideFeedBackForm();\n    }\n  }\n  /** feedback function when a user clicks the feedback button\n   * @param {event} event - negative event from thumbs up button\n   **/\n  _handleNegativeFeedback(event) {\n    const uniqueFeedbackId = this.generateUniqueId();\n    this.positiveFeedbackSelected = false;\n    this.negativeFeedbackSelected = !this.negativeFeedbackSelected;\n    const messageDetails = this._prepareEventDetail();\n    if (this.negativeFeedbackSelected) {\n      messageDetails['action'] = 'message: user gave feedback to response';\n      this._focusOnPopup();\n    } else {\n      messageDetails['action'] = 'message: user removed feedback to response';\n    }\n    messageDetails['type'] = 'negative';\n    messageDetails['rawTextMessage'] = this.rawText;\n    messageDetails['messageElements'] = this._messageElements;\n    messageDetails['originalEvent'] = event;\n    messageDetails['feedbackId'] = uniqueFeedbackId;\n    event.preventDefault();\n    const feedbackEvent = new CustomEvent('on-user-feedback-request', {\n      detail: messageDetails,\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(feedbackEvent);\n    if (this.negativeFeedbackSelected) {\n      this._handleDisplayFeedBackForm(event, 'thumbs-down', uniqueFeedbackId);\n    } else {\n      this._hideFeedBackForm();\n    }\n  }\n\n  /**\n   * _renderLabel - render default or custom label\n   * @param {string} key - dictionary key for label\n   */\n  _renderLabel = (key) => {\n    let customValue;\n    const labels = this.customLabels || {};\n    if (labels) {\n      switch (key) {\n        case 'message-regenerate-button':\n          customValue = labels[key] || 'Regenerate';\n          break;\n        case 'message-like-button':\n          customValue = labels[key] || 'Thumbs up';\n          break;\n        case 'message-undo-like-button':\n          customValue = labels[key] || 'Remove thumbs up';\n          break;\n        case 'message-dislike-button':\n          customValue = labels[key] || 'Thumbs down';\n          break;\n        case 'message-undo-dislike-button':\n          customValue = labels[key] || 'Remove thumbs down';\n          break;\n        case 'message-enable-editing':\n          customValue = labels[key] || 'Edit';\n          break;\n        case 'message-undo-edit':\n          customValue = labels[key] || 'Undo edit';\n          break;\n        case 'message-validate-edit':\n          customValue = labels[key] || 'Validate edit';\n          break;\n        case 'message-loading-aria-label':\n          customValue = labels[key] || 'Message sent, please wait...';\n          break;\n      }\n    }\n    return customValue || key;\n  };\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n// @ts-ignore\nimport styles from './message.scss?inline';\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nconst { stablePrefix: clabsPrefix } = settings;\n/**\n * Core message component to display a single message\n */\nclass message extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Array of subelements parsed from API reply\n         */\n        this._messageElements = [];\n        /**\n         * string variable edited by textArea\n         */\n        this._editedMessage = '';\n        /**\n         * showFeedbackForm - message decides if selecting feedback buttons displays the full form\n         */\n        this.showFeedBackForm = false;\n        /**\n         * editing state to replace text field with a textarea\n         */\n        this._editing = false;\n        /**\n         * Temporary Light watson icon svg\n         */\n        this.watsonIconLight = '<svg aria-hidden=\"true\" role=\"presentation\"  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><defs><linearGradient id=\"ik7o2yqk8a\" x1=\"1186.526\" y1=\"2863.168\" x2=\"1199.825\" y2=\"2845.109\" gradientTransform=\"matrix(.8312 .55596 -.27409 .40979 -198.894 -1827.398)\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".3\"></stop><stop offset=\"1\" stop-opacity=\"0\"></stop></linearGradient><linearGradient id=\"9hg0dg6llb\" x1=\"1189.388\" y1=\"2911.794\" x2=\"1200.478\" y2=\"2896.735\" gradientTransform=\"rotate(146.223 380.87 -882.286) scale(1 -.493)\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".3\"></stop><stop offset=\".9\" stop-opacity=\"0\"></stop></linearGradient><linearGradient id=\"q1snp4vndc\" x1=\"-4995.033\" y1=\"-20162.835\" x2=\"-4981.733\" y2=\"-20180.895\" gradientTransform=\"rotate(-146.223 -971.422 -5714.55) scale(1 .493)\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".32\"></stop><stop offset=\".354\" stop-opacity=\".798\"></stop><stop offset=\".7\" stop-opacity=\"0\"></stop></linearGradient><linearGradient id=\"8ak2l80n4e\" x1=\"0\" y1=\"32\" x2=\"32\" y2=\"0\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".1\" stop-color=\"#a56eff\"></stop><stop offset=\".9\" stop-color=\"#0f62fe\"></stop></linearGradient><mask id=\"eelbk9r8md\" x=\"0\" y=\"0\" width=\"32\" height=\"32\" maskUnits=\"userSpaceOnUse\"><path d=\"M16 1A14.915 14.915 0 0 0 5.502 5.286l1.4 1.429A12.922 12.922 0 0 1 16 3.001c.977 0 1.929.109 2.845.315-3.402.921-5.916 4.026-5.916 7.715 0 .782.118 1.537.328 2.252a7.978 7.978 0 0 0-2.188-.312c-3.704 0-6.819 2.534-7.726 5.957a12.954 12.954 0 0 1-.345-2.927c0-2.117.492-4.134 1.462-5.996l-1.773-.924A15.037 15.037 0 0 0 .999 16c0 8.271 6.729 15 15 15 3.949 0 7.678-1.522 10.498-4.286l-1.4-1.428A12.926 12.926 0 0 1 15.999 29c-3.648 0-6.945-1.516-9.309-3.945a5.959 5.959 0 0 1-1.621-4.086c0-3.309 2.691-6 6-6a6.006 6.006 0 0 1 5.897 7.107l1.967.367a7.971 7.971 0 0 0-.192-3.726 7.976 7.976 0 0 0 2.187.312c3.71 0 6.829-2.542 7.73-5.974.22.947.34 1.931.34 2.944 0 2.117-.492 4.134-1.462 5.995l1.773.924a15.034 15.034 0 0 0 1.688-6.919C31 7.729 24.272 1 16 1zm4.93 16.03c-3.309 0-6-2.692-6-6s2.691-6 6-6 6 2.691 6 6-2.691 6-6 6z\" style=\"fill:#fff;stroke-width:0\"></path><path style=\"fill:url(#ik7o2yqk8a);stroke-width:0\" d=\"M8 9 0 0h16l2.305 3.304L8 9z\"></path><path style=\"fill:url(#9hg0dg6llb);stroke-width:0\" d=\"m12 31 4.386-9L6 21 2 31h10z\"></path><path style=\"fill:url(#q1snp4vndc);stroke-width:0\" d=\"m24 23 8 9H16l-2.304-3.305L24 23z\"></path><path style=\"stroke-width:0\" d=\"M16 31h-4.283L15 22h2l-1 9z\"></path></mask></defs><g style=\"mask:url(#eelbk9r8md)\"><path style=\"fill:url(#8ak2l80n4e);stroke-width:0\" d=\"M0 0h32v32H0z\"></path></g><circle cx=\"6\" cy=\"6\" r=\"2\" style=\"fill:#001d6c;stroke-width:0\"></circle><circle cx=\"26\" cy=\"26\" r=\"2\" style=\"fill:#001d6c;stroke-width:0\"></circle><path d=\"M16 31c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5zm0-8c-1.654 0-3 1.346-3 3s1.346 3 3 3 3-1.346 3-3-1.346-3-3-3z\" style=\"fill:#001d6c;stroke-width:0\"></path></svg>';\n        /**\n         * Temporary dark watson icon svg\n         */\n        this.watsonIconDark = '<svg aria-hidden=\"true\" role=\"presentation\"  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><defs><linearGradient id=\"8913t7g6za\" x1=\"1196.653\" y1=\"2930.892\" x2=\"1209.953\" y2=\"2912.832\" gradientTransform=\"matrix(.8312 .55596 -.27409 .40979 -188.767 -1860.755)\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".3\"/><stop offset=\"1\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"woevpxiuib\" x1=\"1299.261\" y1=\"2844.072\" x2=\"1310.351\" y2=\"2829.012\" gradientTransform=\"rotate(146.223 440.869 -882.286) scale(1 -.493)\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".3\"/><stop offset=\".9\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"je2bg9iagc\" x1=\"-4885.16\" y1=\"-20230.559\" x2=\"-4871.86\" y2=\"-20248.618\" gradientTransform=\"rotate(-146.223 -911.421 -5714.55) scale(1 .493)\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".32\"/><stop offset=\".354\" stop-opacity=\".798\"/><stop offset=\".7\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"2co5q30b1e\" x1=\"0\" y1=\"32\" x2=\"32\" y2=\"0\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".1\" stop-color=\"#be95ff\"/><stop offset=\".9\" stop-color=\"#4589ff\"/></linearGradient><mask id=\"brch21jdod\" x=\"0\" y=\"0\" width=\"32\" height=\"32\" maskUnits=\"userSpaceOnUse\"><path d=\"M16 1A14.915 14.915 0 0 0 5.502 5.286l1.4 1.429A12.922 12.922 0 0 1 16 3.001c.977 0 1.929.109 2.845.315-3.402.921-5.916 4.026-5.916 7.715 0 .782.118 1.537.328 2.252a7.978 7.978 0 0 0-2.188-.312c-3.704 0-6.819 2.534-7.726 5.957a12.954 12.954 0 0 1-.345-2.927c0-2.117.492-4.134 1.462-5.996l-1.773-.924A15.037 15.037 0 0 0 .999 16c0 8.271 6.729 15 15 15 3.949 0 7.678-1.522 10.498-4.286l-1.4-1.428A12.926 12.926 0 0 1 15.999 29c-3.648 0-6.945-1.516-9.309-3.945a5.959 5.959 0 0 1-1.621-4.086c0-3.309 2.691-6 6-6a6.006 6.006 0 0 1 5.897 7.107l1.967.367a7.971 7.971 0 0 0-.192-3.726 7.976 7.976 0 0 0 2.187.312c3.71 0 6.829-2.542 7.73-5.974.22.947.34 1.931.34 2.944 0 2.117-.492 4.134-1.462 5.995l1.773.924a15.034 15.034 0 0 0 1.688-6.919c0-8.271-6.729-15-15-15zm4.93 16.03c-3.309 0-6-2.692-6-6s2.691-6 6-6 6 2.691 6 6-2.691 6-6 6z\" style=\"fill:#fff;stroke-width:0\"/><path style=\"fill:url(#8913t7g6za);stroke-width:0\" d=\"M8 9 0 0h16l2.305 3.305L8 9z\"/><path style=\"fill:url(#woevpxiuib);stroke-width:0\" d=\"m12 31 4.386-9L6 21 2 31h10z\"/><path style=\"fill:url(#je2bg9iagc);stroke-width:0\" d=\"m24 23 8 9H16l-2.305-3.305L24 23z\"/><path style=\"stroke-width:0\" d=\"M16 31h-4.283L15 22h2l-1 9z\"/></mask></defs><g style=\"mask:url(#brch21jdod)\"><path style=\"fill:url(#2co5q30b1e);stroke-width:0\" d=\"M0 0h32v32H0z\"/></g><circle cx=\"6\" cy=\"6\" r=\"2\" style=\"fill:#f4f4f4;stroke-width:0\"/><circle cx=\"26\" cy=\"26\" r=\"2\" style=\"fill:#f4f4f4;stroke-width:0\"/><path d=\"M16 31c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5zm0-8c-1.654 0-3 1.346-3 3s1.346 3 3 3 3-1.346 3-3-1.346-3-3-3z\" style=\"fill:#f4f4f4;stroke-width:0\"/></svg>';\n        /**\n         * Force interruption boolean set when parent changes stream-content attribute to false;\n         */\n        this._forceStreamEnd = false;\n        /**\n         * Temporary element that can morph based on type to preview streaming content\n         */\n        this.temporaryMessage = {\n            content: '',\n            type: 'text',\n        };\n        /**\n         * Index in token array to simulate streaming\n         */\n        this.streamingIndex = 0;\n        /**\n         * Token array created from slicing rawText\n         */\n        this.tokens = [];\n        /**\n         * Boolean denoting if streaming is currently attempted\n         */\n        this.currentlyStreaming = false;\n        /**\n         * String that increments with tokens added and vut when blocks are identified\n         */\n        this.bufferMessage = '';\n        /**\n         * Current Identified block type\n         */\n        this.currentType = '';\n        /**\n         * base streaming speed\n         */\n        this.baseStreamingSpeed = 8;\n        /**\n         * selection state for thumbs up\n         */\n        this.positiveFeedbackSelected = false;\n        /**\n         * selection state for thumbs down\n         */\n        this.negativeFeedbackSelected = false;\n        /** Desired feedback top/bottom orientation\n         */\n        this._feedbackFormOrientation = 'top';\n        /**\n         * _renderLabel - render default or custom label\n         * @param {string} key - dictionary key for label\n         */\n        this._renderLabel = (key) => {\n            let customValue;\n            const labels = this.customLabels || {};\n            if (labels) {\n                switch (key) {\n                    case 'message-regenerate-button':\n                        customValue = labels[key] || 'Regenerate';\n                        break;\n                    case 'message-like-button':\n                        customValue = labels[key] || 'Thumbs up';\n                        break;\n                    case 'message-undo-like-button':\n                        customValue = labels[key] || 'Remove thumbs up';\n                        break;\n                    case 'message-dislike-button':\n                        customValue = labels[key] || 'Thumbs down';\n                        break;\n                    case 'message-undo-dislike-button':\n                        customValue = labels[key] || 'Remove thumbs down';\n                        break;\n                    case 'message-enable-editing':\n                        customValue = labels[key] || 'Edit';\n                        break;\n                    case 'message-undo-edit':\n                        customValue = labels[key] || 'Undo edit';\n                        break;\n                    case 'message-validate-edit':\n                        customValue = labels[key] || 'Validate edit';\n                        break;\n                    case 'message-loading-aria-label':\n                        customValue = labels[key] || 'Message sent, please wait...';\n                        break;\n                }\n            }\n            return customValue || key;\n        };\n    }\n    /** detect when component is rendered to process rawtext\n     */\n    firstUpdated() {\n        this._getTheme();\n        if (this.hasAttribute('display-color')) {\n            this.style.setProperty('--chat-message-unique-display-color', this.displayColor);\n        }\n        if (this.loadingState) {\n            this._messageElements = [{ content: '', type: 'loading' }];\n            return;\n        }\n        if (this.errorState) {\n            this._messageElements = [{ content: this.rawText, type: 'error' }];\n            return;\n        }\n        if (this.elements == null) {\n            if (this.userSubmitted) {\n                if (this.rawText) {\n                    this._parseText();\n                }\n            }\n            else {\n                if (this._streamContent) {\n                    this._streamText();\n                }\n                else {\n                    if (this.rawText) {\n                        //this._parseText();\n                    }\n                }\n            }\n        }\n        else {\n            this._messageElements = this.elements;\n            //this._readerContent = this._prepareReaderText(this.elements);\n        }\n    }\n    /** _prepareReaderText - convert obecjts into readable text\n     * @param {Object} elements -  array of objects\n     */\n    _prepareReaderText(elements) {\n        var _a;\n        let textToRead = '';\n        /*const userElement = this.shadowRoot?.querySelector(\n          '.' + clabsPrefix + '--chat-message-response-user'\n        );\n        const botElement = this.shadowRoot?.querySelector(\n          '.' + clabsPrefix + '--chat-message-response-bot'\n        );\n        if(userElement instanceof HTMLElement){\n          console.log('user')\n          textToRead = userElement.textContent || userElement.innerText || '';\n        }else if(botElement instanceof HTMLElement){\n          console.log('bot')\n          console.log(botElement)\n          textToRead = botElement.textContent || botElement.innerText || '';\n        }else{\n          console.log('fail')\n          textToRead = elements.map((element) => element.content).join('\\n');\n        }*/\n        if (elements.length == 1) {\n            if (((_a = elements[0]) === null || _a === void 0 ? void 0 : _a.type) === 'loading') {\n                return this._renderLabel('message-loading-aria-label');\n            }\n        }\n        textToRead = elements.map((element) => element.content).join('\\n');\n        const tagRegex = '<[^>]*>';\n        const extrasRegex = '<(script|style)[^>]*>[\\\\s\\\\S]*?<\\\\/\\\\1>';\n        const cleanText = textToRead.replace(new RegExp(extrasRegex, 'gi'), '');\n        const pureText = cleanText.replace(new RegExp(tagRegex, 'g'), '');\n        return pureText.trim();\n    }\n    /** internal LIT function to detect updates to the DOM tree, used to auto update the messageElements attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('bufferMessage')) {\n            const messageUpdateEvent = new CustomEvent('on-structure-change', {\n                detail: { action: 'message: internal change' },\n                bubbles: true,\n                composed: true,\n            });\n            this.dispatchEvent(messageUpdateEvent);\n        }\n        if (changedProperties.has('_streamContent')) {\n            this._forceStreamEnd = !this._streamContent;\n        }\n        if (changedProperties.has('rawText')) {\n            //this._readerContent = this.rawText;\n            if (!this._streamContent) {\n                this._parseText();\n            }\n        }\n        if (changedProperties.has('_messageElements')) {\n            this._readerContent = this._prepareReaderText(this._messageElements);\n        }\n        if (changedProperties.has('compactIcon')) {\n            this.showFeedBackForm = false;\n        }\n        if (changedProperties.has('_readerContent')) {\n            setTimeout(() => {\n                /*const hiddenLabel = this.shadowRoot?.querySelector(\n                  '.' + clabsPrefix + '--chat-message-hidden-label'\n                );\n                if (hiddenLabel instanceof HTMLElement) {\n                  hiddenLabel.setAttribute('role', 'alert');\n                  setTimeout(() => {\n                    hiddenLabel.setAttribute('role', 'heading');\n                  }, 1000);\n                }*/\n            }, 200);\n        }\n    }\n    /**\n     * _getTheme - find current theme by checking parent background color\n     */\n    _getTheme() {\n        if (this.parentElement instanceof HTMLElement) {\n            const parentStyle = getComputedStyle(this.parentElement);\n            const backgroundColor = parentStyle.getPropertyValue('--cds-background');\n            let darkMode = false;\n            if (backgroundColor.startsWith('#') &&\n                parseInt(backgroundColor.replace('#', ''), 16) < 0xffffff / 2) {\n                darkMode = true;\n            }\n            this._parentTheme = darkMode ? 'g100' : 'white';\n        }\n    }\n    /**\n     * handleSlotchange - handle edits to slots when an element is placed in it\n     * @param {event} event - tag click event sent by tagList element\n     */\n    _handleSlotchange(event) {\n        const messageDetails = this._prepareEventDetail();\n        messageDetails['action'] = 'message: slotted content added';\n        event.preventDefault();\n        const messageSlotUpdateEvent = new CustomEvent('on-message-element-slot-update', {\n            detail: messageDetails,\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(messageSlotUpdateEvent);\n    }\n    /** check the returned model response for a specified code delimiter, split and package the string into multiple messages of type 'text' or 'code'\n     * @param {string} string - returned API call response\n     **/\n    _checkForCode(string) {\n        const delimiter = '```';\n        const segments = string.split(delimiter);\n        const splitParts = [];\n        for (let i = 0; i < segments.length; i++) {\n            const segment = segments[i].trim();\n            if (i % 2 === 0) {\n                if (segment.length > 0) {\n                    splitParts.push({ content: segment, type: 'text' });\n                }\n            }\n            else {\n                if (segment.length > 0) {\n                    splitParts.push({ content: segment, type: 'code' });\n                }\n            }\n        }\n        return splitParts;\n    }\n    /** _hideFeedBackForm -  hide popup subelement\n     *\n     **/\n    _hideFeedBackForm() {\n        this.showFeedBackForm = false;\n    }\n    /**\n     * generateUniqueId - create random string to give unique feedback signature\n     */\n    generateUniqueId() {\n        const randomString = Math.random().toString(36).substr(2, 9);\n        return randomString;\n    }\n    /**  _handleDisplayFeedBackForm - target div and place popup appropriately\n     * @param {event} event - target button click event\n     * @param {string} type - thumbs up or down or custom\n     * @param {string} uniqueId - unique code for event\n     **/\n    _handleDisplayFeedBackForm(event, type, uniqueId) {\n        var _a, _b;\n        const targetItem = event.target;\n        this.popupTargetElement = targetItem;\n        //const boundingRect = targetItem.getBoundingClientRect();\n        event.preventDefault();\n        const mainHeight = (_b = (_a = this.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.scrollHeight;\n        if (this.feedbackFormDefinitions) {\n            this._feedbackFormValues = this.feedbackFormDefinitions[type];\n            this._feedbackFormValues.uniqueFeedbackId = this.uniqueFeedbackId;\n            this._feedbackFormValues.parentValues = {\n                offsetTop: this.offsetTop,\n                scrollHeight: mainHeight,\n                uniqueId: uniqueId,\n            };\n        }\n        this.showFeedBackForm = true;\n    }\n    /**\n     * prepare event detail before passing to parent\n     */\n    _prepareEventDetail() {\n        const nullStateMessage = 'not-specified';\n        const eventDetail = {\n            messageOrigin: this.origin ? this.origin : nullStateMessage,\n            messageTime: this.timeStamp ? this.timeStamp : nullStateMessage,\n            displayName: this.displayName ? this.displayName : nullStateMessage,\n            messageIndexInChat: this.index,\n        };\n        return eventDetail;\n    }\n    /** record tag selection\n     * @param {event} event - lit custom event from tagList\n     **/\n    _onTagSelected(event) {\n        const messageDetails = this._prepareEventDetail();\n        const content = event.tagContent;\n        messageDetails['action'] = 'message: tag in tag list element clicked';\n        messageDetails['selectedTagContent'] = content;\n        event.preventDefault();\n        const tagSelectionEvent = new CustomEvent('on-message-element-tag-selected', {\n            detail: messageDetails,\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(tagSelectionEvent);\n    }\n    /**\n     * _childLinkClicked - record when link clicked in linkList\n     * @param {event} event - lit custom event from linkList\n     **/\n    _childLinkClicked(event) {\n        const messageDetails = this._prepareEventDetail();\n        messageDetails['action'] = 'message: link-sub-element in message clicked';\n        messageDetails['event'] = event;\n        messageDetails['selectedURL'] = event.detail.selectedURL;\n        messageDetails['selectedTitle'] = event.detail.selectedTitle;\n        const linkClickedEvent = new CustomEvent('on-message-link-list-item-click', {\n            detail: messageDetails,\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(linkClickedEvent);\n    }\n    /** record element click\n     * @param {event} event - lit custom event from sub element click\n     **/\n    _handleMessageElementClick(event) {\n        const messageDetails = this._prepareEventDetail();\n        messageDetails['action'] = 'message: sub-element in message clicked';\n        messageDetails['event'] = event;\n        //const selectedElement = this._messageElements[index]\n        //messageDetails[\"elementContent\"] = selectedElement.content;\n        //messageDetails[\"elementType\"] = selectedElement.type;\n        //messageDetails[\"indexInMessage\"] = index;\n        event.preventDefault();\n        const subElementSelectionEvent = new CustomEvent('on-message-element-selected', {\n            detail: messageDetails,\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(subElementSelectionEvent);\n    }\n    /**\n     * _checkStreamForBlocks - check if a block has started, if it has only check if it has ended and return the type, content, previous text and status of the parsing\n     */\n    _checkStreamForBlocks() {\n        let result;\n        if (!this.currentType) {\n            result = this._checkBlockStart();\n        }\n        else {\n            result = this._checkBlockEnd();\n        }\n        return result;\n    }\n    /**\n     * _checkBlock - scan incoming stream of tokens to see the type of block detected\n     * @param {string} blockToCheck - string block to check type of to finalize rendering\n     */\n    _checkBlockType(blockToCheck) {\n        const regexPatterns = {\n            code: new RegExp('```'),\n            json: new RegExp('\\\\{'),\n            table: new RegExp('((\\\\w+,\\\\w+)(,[\\\\w+]*)*[\\\\r\\\\n]+)+'),\n            array: new RegExp('(?<!\\\\))\\\\['),\n            url: new RegExp('(http|ftp)'),\n            list: new RegExp('(?:\\\\d+\\\\.\\\\s+|[-*]\\\\s)'),\n            //list: new RegExp('(^|\\\\n)\\\\s*(?:[-*\\\\u2022\\\\u25E6\\\\u25AA\\\\u25CF]\\\\s|\\\\s1\\\\.\\\\s)','m')\n        };\n        for (const type in regexPatterns) {\n            const match = blockToCheck.match(regexPatterns[type]);\n            if (match) {\n                const matchIndex = match.index ? match.index : -1;\n                if (matchIndex > -1) {\n                    return type;\n                }\n            }\n        }\n        return 'text';\n    }\n    /**\n     * _checkBlockStart - scan incoming stream of tokens to see if a typed block has started\n     */\n    _checkBlockStart() {\n        const analysisPriority = [\n            'code',\n            'json',\n            'formula',\n            'table',\n            'array',\n            'molecule',\n            'url',\n            'list',\n        ];\n        const regexPatterns = {\n            code: new RegExp('```'),\n            json: new RegExp('\\\\{'),\n            table: new RegExp('((\\\\w+,\\\\w+)(,[\\\\w+]*)*[\\\\r\\\\n]+)+'),\n            array: new RegExp('\\\\[\\\\\"'),\n            formula: new RegExp('\\\\\\\\\\\\('),\n            //molecule: new RegExp('^[A-Za-z0-9@+\\\\-\\\\[\\\\]\\\\(\\\\)=#%$]+$'),\n            //molecule: new RegExp('^[CNOSPFIBrcln=#$%@\\\\-+\\\\[\\\\]()\\\\/0-9]+$'),\n            //molecule: new RegExp('^([BCOHNSPKFYIWcl][a-zA-Z0-9@+\\\\-\\\\[\\\\]\\\\(\\\\)=#$%]*)+'),\n            //molecule: new RegExp('A-Za-z0-9@#=\\\\+\\\\-\\\\(\\\\)\\\\[\\\\]]+'),\n            //annotation: new RegExp('\\\\[[^\\\\]]*,'),\n            annotation: new RegExp('\\\\(.*?\\\\)\\\\[.*?\\\\]'),\n            //molecule: new RegExp('(?:^|\\\\s)([BCNOPSFIbcnopsdi0-9@+\\\\-\\\\[\\\\]=#%$\\\\\\\\()/.]+)(?=\\\\s|$)'),\n            //molecule: new RegExp('[A-Za-z0-9@+\\\\-=#$%&\\\\\\\\\\\\/()\\\\[\\\\]{}]*$'),\n            //molecule: new RegExp('^[A-Za-z0-9@+\\\\-=#$%&\\\\\\\\\\\\/()\\\\[\\\\]{}]*$','g'),\n            url: new RegExp('(?<!\\\\(|,)\\\\b(http|ftp)\\\\S+'),\n            //url: new RegExp('(?<!\\\\()(http|ftp)'),\n            list: new RegExp('(?:1\\\\.\\\\s+[-*]\\\\s|\\\\d{2,}\\\\.\\\\s+[-*]\\\\s)'),\n            //list: new RegExp('(?:\\\\d+\\\\.\\\\s+|[-*]\\\\s)'),\n            //list: new RegExp('(^|\\\\n)\\\\s*(?:[-*\\\\u2022\\\\u25E6\\\\u25AA\\\\u25CF]\\\\s|\\\\s1\\\\.\\\\s)','m')\n        };\n        for (const type of analysisPriority) {\n            const match = this.bufferMessage.match(regexPatterns[type]);\n            if (match) {\n                const matchIndex = match.index ? match.index : -1;\n                if (matchIndex > -1) {\n                    const preBlockText = this.bufferMessage.substring(0, matchIndex);\n                    const subBuffer = this.bufferMessage.substring(matchIndex);\n                    this.bufferMessage = subBuffer;\n                    return {\n                        status: 'started',\n                        type: type,\n                        content: this.bufferMessage,\n                        preBlockText: preBlockText,\n                    };\n                }\n            }\n        }\n        return {\n            status: '',\n            type: '',\n            content: '',\n            preBlockText: '',\n        };\n    }\n    /**\n     * _checkBlockEnd - if type was identified as being streamed in, look for conditions that indifcate the block is done or a next block has started\n     */\n    _checkBlockEnd() {\n        let stopIndex = -1;\n        switch (this.currentType) {\n            case 'code': {\n                stopIndex = this.bufferMessage.indexOf('```', 3);\n                if (stopIndex !== -1) {\n                    stopIndex += 3;\n                }\n                break;\n            }\n            case 'chart':\n            case 'json': {\n                let offset = 0;\n                for (let k = 0; k < this.bufferMessage.length; k++) {\n                    const char = this.bufferMessage[k];\n                    if (char === '{') {\n                        offset++;\n                    }\n                    if (char === '}') {\n                        offset--;\n                        stopIndex = k;\n                    }\n                }\n                if (offset !== 0) {\n                    stopIndex = -1;\n                }\n                break;\n            }\n            case 'array':\n            case 'tags':\n            case 'carousel':\n                stopIndex = this.bufferMessage.indexOf(']');\n                break;\n            case 'annotation':\n                stopIndex = this.bufferMessage.indexOf(')');\n                break;\n            case 'molecule':\n            case 'formula':\n            case 'url':\n                stopIndex = this.bufferMessage.indexOf('\\n');\n                break;\n            case 'table': {\n                /*const tableEnd = this.bufferMessage.match(/^[^\\r\\n]*(?![\\r\\n]+(\\w+,\\w+))/);\n                stopIndex = tableEnd ? tableEnd.index : -1;*/\n                const CSVLines = this.bufferMessage.split('\\n');\n                let countIndex = 0;\n                let nonCSVcount = 0;\n                let previousLength = 9;\n                for (const line of CSVLines) {\n                    if (!new RegExp('^[\\\\w\\\\s]+(,[\\\\w\\\\s]+)*$').test(line)) {\n                        nonCSVcount++;\n                        if (nonCSVcount > 1) {\n                            stopIndex = countIndex - previousLength;\n                            break;\n                        }\n                    }\n                    previousLength = line.length + 1;\n                    countIndex += previousLength;\n                }\n                break;\n            }\n            case 'list': {\n                //const listEnd = this.bufferMessage.match(/^(?![-*]|\\d+\\.)\\s/m);\n                //stopIndex = listEnd ? listEnd.index : -1;\n                let nonListCount = 0;\n                let listCharacterLength = 0;\n                let previousLength = 0;\n                const listLines = this.bufferMessage.split('\\n');\n                for (const listItem of listLines) {\n                    if (!new RegExp('\\\\s*(?:[-*\\\\u2022\\\\u25E6\\\\u25AA\\\\u25CF]\\\\s|\\\\d+\\\\.\\\\s)').test(listItem)) {\n                        nonListCount++;\n                        if (nonListCount > 1) {\n                            stopIndex = listCharacterLength - previousLength;\n                            break;\n                        }\n                    }\n                    previousLength = listItem.length + 1;\n                    listCharacterLength += previousLength;\n                }\n                break;\n            }\n        }\n        if (stopIndex !== null && stopIndex !== -1) {\n            if (this.currentType === 'array' ||\n                this.currentType === 'carousel' ||\n                this.currentType === 'tags' ||\n                this.currentType === 'chart' ||\n                this.currentType === 'json') {\n                stopIndex++;\n            }\n            if (this.currentType === 'table') {\n                stopIndex--;\n            }\n            const block = this.bufferMessage.substring(0, stopIndex);\n            this.bufferMessage = this.bufferMessage.substring(stopIndex);\n            let exitType = this.currentType;\n            if (exitType === 'array') {\n                try {\n                    JSON.parse(block);\n                    exitType = 'carousel';\n                }\n                catch (error) {\n                    exitType = 'tags';\n                }\n            }\n            if (exitType === 'json') {\n                if (this.bufferMessage.indexOf('$schema') > -1) {\n                    exitType = 'chart';\n                }\n                else {\n                    exitType = 'code';\n                }\n            }\n            return {\n                status: 'ended',\n                type: exitType,\n                content: block,\n                preBlockText: '',\n            };\n        }\n        return {\n            status: 'incomplete',\n            type: this.currentType,\n            content: this.bufferMessage,\n            preBlockText: '',\n        };\n    }\n    /**\n     * _checkAmbiguousBlock - change type of block if subtype confirmed\n     */\n    _checkAmbiguousBlock() {\n        if (this.currentType === 'code') {\n            const smilesRegex = new RegExp('^[CNOSPFIBrcln=#$%@\\\\-+\\\\[\\\\]()\\\\/0-9]+$');\n            //molecule: new RegExp('^[A-Za-z0-9@+\\\\-\\\\[\\\\]\\\\(\\\\)=#%$]+$'),\n            //molecule: new RegExp('^[CNOSPFIBrcln=#$%@\\\\-+\\\\[\\\\]()\\\\/0-9]+$'),\n            //molecule: new RegExp('^([BCOHNSPKFYIWcl][a-zA-Z0-9@+\\\\-\\\\[\\\\]\\\\(\\\\)=#$%]*)+'),\n            //molecule: new RegExp('A-Za-z0-9@#=\\\\+\\\\-\\\\(\\\\)\\\\[\\\\]]+'),\n            if (smilesRegex.test(this.bufferMessage.replace('```', ''))) {\n                this.currentType = 'molecule';\n                this.temporaryMessage.type = 'molecule';\n            }\n        }\n        if (this.currentType === 'json') {\n            if (this.bufferMessage.indexOf('$schema') > -1) {\n                this.currentType = 'chart';\n                this.temporaryMessage.type = 'chart';\n            }\n        }\n        if (this.currentType === 'array') {\n            const urlRegex = new RegExp('(https?:\\\\/\\\\/[^\\\\s]+)', 'g');\n            const items = this.bufferMessage\n                .replace('[', '')\n                .replace(new RegExp(',\\\\s*$'), '')\n                .split(',');\n            if (items.length > 1) {\n                const checkAllURLs = urlRegex.test(items[0]);\n                if (checkAllURLs) {\n                    this.temporaryMessage.type = 'carousel';\n                    this.currentType = 'carousel';\n                }\n                else {\n                    this.temporaryMessage.type = 'tags';\n                    this.currentType = 'tags';\n                }\n            }\n        }\n    }\n    /**\n     * Parse Raw Text buffer into elements\n     */\n    _streamText() {\n        console.log('streaming...');\n        this.currentlyStreaming = true;\n        this.tokens = this._tokenize(this.rawText);\n        //this.tokens = [...this.tokens,...['\\n  ','\\n  ']]\n        this.bufferMessage = '';\n        this.temporaryMessage = { content: '', type: 'text' };\n        this.currentType = '';\n        this.baseStreamingSpeed = this._streamDelay || this.baseStreamingSpeed;\n        this._beginStreaming();\n    }\n    /**\n     * Begin stream animation\n     */\n    _beginStreaming() {\n        if (this.streamingInterval !== null) {\n            clearInterval(this.streamingInterval);\n        }\n        this.streamingInterval = setTimeout(() => {\n            const token = this.tokens[this.streamingIndex] || '';\n            this.streamingIndex++;\n            this.bufferMessage += token;\n            const blockSignal = this._checkStreamForBlocks();\n            if (blockSignal) {\n                if (blockSignal.type !== '') {\n                    if (blockSignal.status === 'started') {\n                        this.currentType = blockSignal.type;\n                        this.temporaryMessage.content = this.bufferMessage;\n                        if (blockSignal.type === 'url') {\n                            this.temporaryMessage.type = 'text';\n                        }\n                        else if (blockSignal.type === 'json') {\n                            this.temporaryMessage.type = 'code';\n                        }\n                        else if (blockSignal.type === 'array') {\n                            this.temporaryMessage.type = 'text';\n                        }\n                        else {\n                            this.temporaryMessage.type = blockSignal.type;\n                        }\n                        if (blockSignal.preBlockText.length > 0) {\n                            if (blockSignal.preBlockText.trim() !== '') {\n                                this._cutPlainText(blockSignal.preBlockText.trim());\n                            }\n                        }\n                    }\n                    if (blockSignal.status === 'incomplete') {\n                        this._checkAmbiguousBlock();\n                        this.temporaryMessage.content = this.bufferMessage;\n                        if (blockSignal.type === 'text') {\n                            const splitter = blockSignal.content.split('\\n');\n                            if (splitter.length > 0) {\n                                for (let i = 0; i < splitter.length - 1; i++) {\n                                    const subLine = splitter[i];\n                                    this._messageElements = [\n                                        ...this._messageElements,\n                                        { content: subLine, type: 'text' },\n                                    ];\n                                    this.bufferMessage = splitter[splitter.length];\n                                }\n                            }\n                        }\n                    }\n                    if (blockSignal.status === 'ended') {\n                        this.currentType = '';\n                        this.temporaryMessage.type = 'text';\n                        if (blockSignal.type === 'url') {\n                            blockSignal.type = this._checkURLType(blockSignal.content);\n                        }\n                        if (blockSignal.type === 'text') {\n                            this._cutPlainText(blockSignal.content);\n                        }\n                        else {\n                            this._messageElements = [\n                                ...this._messageElements,\n                                { content: blockSignal.content, type: blockSignal.type },\n                            ];\n                        }\n                    }\n                }\n                else {\n                    this.temporaryMessage.content = this.bufferMessage;\n                    this.temporaryMessage.type = 'text';\n                }\n            }\n            else {\n                this.temporaryMessage.content = this.bufferMessage;\n                this.temporaryMessage.type = 'text';\n            }\n            /*if (this.temporaryMessage.type === 'text') {\n              this.temporaryMessage.content += '/';\n            }*/\n            this.streamingSpeed =\n                this.baseStreamingSpeed +\n                    Math.random() *\n                        Math.random() *\n                        Math.random() *\n                        this.baseStreamingSpeed *\n                        5;\n            switch (this.temporaryMessage.type) {\n                case 'code':\n                    this.streamingSpeed = this.baseStreamingSpeed / 1;\n                    break;\n                case 'table':\n                    this.streamingSpeed = this.baseStreamingSpeed / 1;\n                    break;\n                case 'carousel':\n                    this.streamingSpeed = this.baseStreamingSpeed / 1;\n                    break;\n                case 'json':\n                case 'chart':\n                    this.streamingSpeed = this.baseStreamingSpeed / 4;\n                    break;\n                case 'molecule':\n                    this.streamingSpeed = this.baseStreamingSpeed * 4;\n                    break;\n                case 'text':\n                    this.streamingSpeed = this.baseStreamingSpeed;\n                    break;\n            }\n            this.streamingSpeed = Math.max(1, this.streamingSpeed);\n            if (this.streamingIndex >= this.tokens.length || this._forceStreamEnd) {\n                if (this.currentlyStreaming) {\n                    this.currentlyStreaming = false;\n                    this._beginStreaming();\n                }\n                else {\n                    if (this.temporaryMessage.content.length > 0) {\n                        const trailingContent = this.temporaryMessage.content;\n                        const finalSegments = trailingContent.trim().split('\\n');\n                        const lastLine = finalSegments.pop();\n                        const lastBlockType = this._checkBlockType(lastLine);\n                        if (lastBlockType !== this.temporaryMessage.type) {\n                            this._messageElements = [\n                                ...this._messageElements,\n                                {\n                                    content: finalSegments.join('\\n').replace(/\\.\\.\\.$/, ''),\n                                    type: this.temporaryMessage.type,\n                                },\n                            ];\n                            this._messageElements = [\n                                ...this._messageElements,\n                                {\n                                    content: lastLine,\n                                    type: lastBlockType,\n                                },\n                            ];\n                        }\n                        else {\n                            this._messageElements = [\n                                ...this._messageElements,\n                                {\n                                    content: trailingContent.replace(/\\.\\.\\.$/, ''),\n                                    type: this.temporaryMessage.type,\n                                },\n                            ];\n                        }\n                    }\n                    this.temporaryMessage.content = '';\n                    this.streamingIndex = 0;\n                    this._signalEndOfStreaming();\n                }\n            }\n            else {\n                this._beginStreaming();\n            }\n        }, this.streamingSpeed);\n    }\n    /** _cutPlainText - cut normal text into subelements to display them as unique items\n     * @param {string} plainText - text to parse\n     */\n    _cutPlainText(plainText) {\n        const splitLines = plainText.split('\\n');\n        const splitLineElements = splitLines.map((line) => ({\n            content: line,\n            type: this._checkLinks(line) ? 'link-list' : 'text',\n        }));\n        this._messageElements = [...this._messageElements, ...splitLineElements];\n    }\n    /** _checkLinks - see if annotated markdown text is strictly a link list\n     * @param {string} blockText - text to parse\n     */\n    _checkLinks(blockText) {\n        //const linkListRegex = new RegExp('^\\\\s*(?:\\\\[[^\\\\]]+\\\\]\\\\([^\\\\)+\\\\)|[^[]+)*\\\\s*$');\n        const linkListRegex = new RegExp('^\\\\[.*?\\\\]\\\\(.*?\\\\)(,\\\\[.*?\\\\]\\\\(.*?\\\\))*$');\n        return linkListRegex.test(blockText.trim());\n    }\n    /**\n     * _signalEndOfStreaming - send custom event to all parents to signal streaming has been finalized\n     */\n    _signalEndOfStreaming() {\n        const endOfStreamingEvent = new CustomEvent('on-message-streaming-done', {\n            detail: { action: 'message component reported end of streaming' },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(endOfStreamingEvent);\n    }\n    /**\n     * _tokenize - simulate tokens being streamed in but slicing the rawText string with the harshest cutting threshold\n     * @param {string} inputText - text to be split into tokens\n     */\n    _tokenize(inputText) {\n        const tokenizerRegex = new RegExp('(\\\\s|,|#|\\\\{|\\\\}|\"|\\\\[|\\\\]|%|\\'|\\\\n|\\\\t|\\\\/|\\\\.|_|<|>|:|-|\\\\(|\\\\)|\\\\?|\\\\||@|&|\\\\*|\\\\+|=|;|\\\\`|~)');\n        const tokens = inputText.split(tokenizerRegex);\n        return tokens;\n    }\n    /**\n     * Parse Raw Text buffer into elements\n     */\n    _parseText() {\n        this.tokens = this._tokenize(this.rawText);\n        this.currentType = '';\n        this.bufferMessage = '';\n        for (const token of this.tokens) {\n            this.bufferMessage += token;\n            const blockSignal = this._checkStreamForBlocks();\n            if (blockSignal) {\n                if (blockSignal.type !== '') {\n                    if (blockSignal.status === 'started') {\n                        this.currentType = blockSignal.type;\n                        if (blockSignal.preBlockText.length > 0) {\n                            if (blockSignal.preBlockText.trim() !== '') {\n                                this._messageElements = [\n                                    ...this._messageElements,\n                                    { content: blockSignal.preBlockText, type: 'text' },\n                                ];\n                            }\n                        }\n                    }\n                    if (blockSignal.status === 'incomplete') {\n                        this._checkAmbiguousBlock();\n                    }\n                    if (blockSignal.status === 'ended') {\n                        this.currentType = '';\n                        if (blockSignal.type === 'url') {\n                            blockSignal.type = this._checkURLType(blockSignal.content);\n                        }\n                        this._messageElements = [\n                            ...this._messageElements,\n                            { content: blockSignal.content, type: blockSignal.type },\n                        ];\n                    }\n                }\n            }\n            this.streamingIndex++;\n            if (this.streamingIndex === this.tokens.length) {\n                if (this.bufferMessage) {\n                    this._messageElements = [\n                        ...this._messageElements,\n                        { content: this.bufferMessage, type: 'text' },\n                    ];\n                }\n            }\n        }\n    }\n    /** parse Raw text param into a sub array of objects to display different elements in a single message block\n     **/\n    _parseTextOld() {\n        const returnedText = this.rawText;\n        const subMessages = [];\n        const codeSplitter = this._checkForCode(returnedText);\n        if (codeSplitter.length == 0 || returnedText == 'undefined') {\n            subMessages.push({\n                content: 'Model reply received but was undefined.',\n                type: 'error',\n            });\n        }\n        else {\n            for (const secondReply of codeSplitter) {\n                if (secondReply.type == 'code') {\n                    subMessages.push(secondReply);\n                }\n                else {\n                    const objectSplitter = this._checkForObjects(secondReply.content);\n                    for (const thirdReply of objectSplitter) {\n                        if (thirdReply.type !== 'non-object') {\n                            subMessages.push(thirdReply);\n                        }\n                        else {\n                            const urlSplitter = this._checkForURLs(thirdReply.content);\n                            for (const fourthReply of urlSplitter) {\n                                if (fourthReply.type == 'text') {\n                                    //subMessages.push(subSubReply);\n                                    const formattedList = this._checkForFormatting(fourthReply.content);\n                                    for (const [index, subItem] of formattedList.entries()) {\n                                        if (index === formattedList.length - 1) {\n                                            subMessages.push(subItem);\n                                        }\n                                        else {\n                                            subMessages.push(subItem);\n                                        }\n                                    }\n                                }\n                                else {\n                                    subMessages.push(fourthReply);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this._messageElements = subMessages;\n    }\n    /** _checkForObjects analyze if objects elements are present and parse them out\n     * @param {string} inputText - text block to be checked\n     */\n    _checkForObjects(inputText) {\n        const splitParts = [];\n        const splitter = inputText.split('\\n');\n        let messageChunks = [];\n        for (const item of splitter) {\n            try {\n                const testJSON = JSON.parse(item);\n                const objectType = this._checkObjectType(testJSON);\n                if (objectType === 'multi-url') {\n                    splitParts.concat(testJSON.map((url) => ({ content: url, type: 'url' })));\n                }\n                else {\n                    splitParts.push({\n                        type: objectType,\n                        content: item,\n                    });\n                }\n                if (messageChunks.length > 0) {\n                    splitParts.push({\n                        type: 'non-object',\n                        content: messageChunks.join('\\n'),\n                    });\n                    messageChunks = [];\n                }\n            }\n            catch (error) {\n                messageChunks.push(item);\n            }\n        }\n        if (messageChunks.length > 0) {\n            splitParts.push({\n                type: 'non-object',\n                content: messageChunks.join('\\n'),\n            });\n            messageChunks = [];\n        }\n        return splitParts;\n    }\n    /** _checkObjectType - check what category of JSON object it is\n     * @param {object} jsonObject - JSON object to be analyzed and aasigned a type, if array check all objects inside to see if carousel or tags, if not make it code or a chart\n     */\n    _checkObjectType(jsonObject) {\n        let jsonType = 'code';\n        if (Array.isArray(jsonObject)) {\n            const urlRegex = new RegExp('(https?://[^\\\\s]+)', 'g');\n            const imageRegex = new RegExp('\\\\.(png|jpg|jpeg|gif|svg)$', 'i');\n            const checkAllImages = jsonObject.every((item) => imageRegex.test(item) && typeof item === 'string');\n            const checkAllURLs = jsonObject.every((item) => urlRegex.test(item) && typeof item === 'string');\n            if (checkAllImages) {\n                jsonType = 'carousel';\n            }\n            else if (checkAllURLs) {\n                jsonType = 'multi-url';\n            }\n            else {\n                jsonType = 'tags';\n            }\n        }\n        else {\n            if ('$schema' in jsonObject) {\n                jsonType = 'chart';\n            }\n            else {\n                jsonType = 'code';\n            }\n        }\n        return jsonType;\n    }\n    /** _checkObjectType - check what category of JSON object it is\n     * @param {object} urlObject - URL string to be parsed and assigned a type\n     */\n    _checkURLType(urlObject) {\n        const imageRegex = new RegExp('\\\\.(png|jpg|jpeg|gif|svg|bmp|webp|ico|tiff|tif)$', 'i');\n        const videoRegex = new RegExp('\\\\.(mp4|avi|flv|mkv|mov|webm|m4v|ogv)$', 'i');\n        const fileRegex = new RegExp('\\\\.(pdf|doc|docx|csv|xls|xlsx|ppt|pptx|txt|rtf|xml|odt|zip|rar|tar|gz)$', 'i');\n        const audioRegex = new RegExp('\\\\.(mp3|flac|wav|ogg|mpa|wma|midi)$', 'i');\n        const urlRegex = new RegExp('(https?:\\\\/\\\\/[^\\\\s]+)', 'g');\n        if (imageRegex.test(urlObject)) {\n            return 'img';\n        }\n        if (videoRegex.test(urlObject)) {\n            return 'video';\n        }\n        if (audioRegex.test(urlObject)) {\n            return 'audio';\n        }\n        if (fileRegex.test(urlObject)) {\n            return 'file';\n        }\n        if (urlRegex.test(urlObject)) {\n            return 'url';\n        }\n        return 'text';\n    }\n    /** _checkForFormatting analyze if text elements like lists are present and parse them out\n     * @param {string} inputText - text block to be checked\n     */\n    _checkForFormatting(inputText) {\n        const splitParts = [];\n        //eslint-disable-next-line\n        const listRegex = new RegExp('^(?:d+.|[\\u2022\\u2023\\u25E6\\u2043-])');\n        const splitMatches = inputText.split('\\n');\n        let currentType = '';\n        let tempString = '';\n        for (const match of splitMatches) {\n            const itemType = listRegex.test(match) ? 'list' : 'text';\n            if (currentType === '') {\n                currentType = itemType;\n                tempString += match;\n            }\n            else if (itemType === currentType) {\n                tempString += '\\n' + match;\n            }\n            else {\n                splitParts.push({ type: currentType, content: tempString.trim() });\n                tempString = match;\n                currentType = itemType;\n            }\n        }\n        if (tempString !== '') {\n            splitParts.push({\n                type: listRegex.test(tempString) ? 'list' : 'text',\n                content: tempString,\n            });\n        }\n        return splitParts;\n    }\n    /** _checkForURLs extract plain and image urls from edxtracted text post code checking\n     * @param {string} inputText - text block to be checked for URLs\n     */\n    _checkForURLs(inputText) {\n        let splitParts = [];\n        const urlRegex = new RegExp('(https?:\\\\/\\\\/[^\\\\s]+)', 'g');\n        const segments = inputText.split(urlRegex);\n        splitParts = segments.map((item) => ({\n            content: item,\n            type: this._checkURLType(item),\n        }));\n        return splitParts;\n    }\n    /** editing function when a user click the edit button\n     **/\n    _handleEdit() {\n        var _a;\n        const textElement = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.' + clabsPrefix + '--chat-message-response-user');\n        let previousWidth = this.clientWidth;\n        if (textElement instanceof HTMLElement) {\n            previousWidth = textElement.clientWidth;\n        }\n        this._editing = true;\n        const messageDetails = this._prepareEventDetail();\n        this.previousMessageWidth = previousWidth;\n        messageDetails['action'] = 'MESSAGE: User started a message edit';\n        const startEditEvent = new CustomEvent('on-user-message-edit-request', {\n            detail: messageDetails,\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(startEditEvent);\n    }\n    /** record edited changes on message\n     * @param {event} event - lit input event\n     **/\n    _setEditedMessage(event) {\n        this._editedMessage = event.detail.value;\n    }\n    /** editing function when a user click the edit button\n     **/\n    _cancelEdit() {\n        this._editing = false;\n        this._editedMessage = '';\n        const messageDetails = this._prepareEventDetail();\n        messageDetails['action'] = 'MESSAGE: User aborted a message edit';\n        const cancelledEditEvent = new CustomEvent('on-user-message-cancellation-request', {\n            detail: messageDetails,\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(cancelledEditEvent);\n    }\n    /** editing function when a user click the edit button\n     **/\n    _validateEdit() {\n        this._editing = false;\n        const messageDetails = this._prepareEventDetail();\n        messageDetails['action'] = 'message: user edited a previous query';\n        messageDetails['newMessage'] = this._editedMessage;\n        messageDetails['previousMessage'] = this.rawText;\n        this.rawText = this._editedMessage;\n        this._messageElements = [{ content: this._editedMessage, type: 'text' }];\n        const regenerationEvent = new CustomEvent('on-user-message-update-request', {\n            detail: messageDetails,\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(regenerationEvent);\n    }\n    /** trigger regenerate response event\n     * @param {event} event - regeneration event from subelement\n     */\n    _handleRegenerate(event) {\n        const messageDetails = this._prepareEventDetail();\n        messageDetails['action'] = 'message: user regenerated a chat response';\n        //messageDetails['newMessage'] = this._editedMessage;\n        //messageDetails['rawTextMessage'] = this.rawText;\n        messageDetails['messageElements'] = this._messageElements;\n        event.preventDefault();\n        const regenerationEvent = new CustomEvent('on-message-regeneration', {\n            detail: messageDetails,\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(regenerationEvent);\n    }\n    /** trigger message editing start event\n     * @param {event} event - message editing from subelement\n     */\n    _handleMessageEditStart(event) {\n        const messageDetails = this._prepareEventDetail();\n        messageDetails['action'] = 'message: user edited their message';\n        messageDetails['messageElements'] = this._messageElements;\n        event.preventDefault();\n        const messageEditStartEvent = new CustomEvent('on-message-edit-start', {\n            detail: messageDetails,\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(messageEditStartEvent);\n    }\n    /** trigger message editing cancel event\n     * @param {event} event - message cancel edit from subelement\n     */\n    _handleMessageEditCancel(event) {\n        const messageDetails = this._prepareEventDetail();\n        messageDetails['action'] = 'message: user canceled their message edit';\n        messageDetails['messageElements'] = this._messageElements;\n        event.preventDefault();\n        const messageEditCancelEvent = new CustomEvent('on-message-edit-cancel', {\n            detail: messageDetails,\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(messageEditCancelEvent);\n    }\n    /** feedback function when a user navigates by keyboard and selects the feedback button\n     * @param {event} event - positive event from thumbs up button\n     **/\n    handlePositiveKeyboardInput(event) {\n        if (event.key === 'Enter' || event.key === ' ') {\n            this._handlePositiveFeedback(event);\n            event.preventDefault();\n        }\n    }\n    /** feedback function when a user navigates by keyboard and selects the feedback button\n     * @param {event} event - positive event from thumbs up button\n     **/\n    handleNegativeKeyboardInput(event) {\n        if (event.key === 'Enter' || event.key === ' ') {\n            this._handleNegativeFeedback(event);\n            event.preventDefault();\n        }\n    }\n    /**\n     * focus on popup element with aria system\n     */\n    _focusOnPopup() {\n        var _a;\n        const popUpId = clabsPrefix + '--chat-popup-unique-feedback-' + this.index;\n        const popupElement = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.getElementById(popUpId);\n        if (popupElement instanceof HTMLElement) {\n            popupElement.focus();\n        }\n    }\n    /** feedback function when a user clicks the feedback button\n     * @param {event} event - positive event from thumbs up button\n     **/\n    _handlePositiveFeedback(event) {\n        const uniqueFeedbackId = this.generateUniqueId();\n        this.positiveFeedbackSelected = !this.positiveFeedbackSelected;\n        this.negativeFeedbackSelected = false;\n        const messageDetails = this._prepareEventDetail();\n        if (this.positiveFeedbackSelected) {\n            messageDetails['action'] = 'message: user gave feedback to response';\n            this._focusOnPopup();\n        }\n        else {\n            messageDetails['action'] = 'message: user removed feedback to response';\n        }\n        messageDetails['type'] = 'positive';\n        messageDetails['rawTextMessage'] = this.rawText;\n        messageDetails['messageElements'] = this._messageElements;\n        messageDetails['originalEvent'] = event;\n        messageDetails['feedbackId'] = uniqueFeedbackId;\n        event.preventDefault();\n        const feedbackEvent = new CustomEvent('on-user-feedback-request', {\n            detail: messageDetails,\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(feedbackEvent);\n        if (this.positiveFeedbackSelected) {\n            this._handleDisplayFeedBackForm(event, 'thumbs-up', uniqueFeedbackId);\n        }\n        else {\n            this._hideFeedBackForm();\n        }\n    }\n    /** feedback function when a user clicks the feedback button\n     * @param {event} event - negative event from thumbs up button\n     **/\n    _handleNegativeFeedback(event) {\n        const uniqueFeedbackId = this.generateUniqueId();\n        this.positiveFeedbackSelected = false;\n        this.negativeFeedbackSelected = !this.negativeFeedbackSelected;\n        const messageDetails = this._prepareEventDetail();\n        if (this.negativeFeedbackSelected) {\n            messageDetails['action'] = 'message: user gave feedback to response';\n            this._focusOnPopup();\n        }\n        else {\n            messageDetails['action'] = 'message: user removed feedback to response';\n        }\n        messageDetails['type'] = 'negative';\n        messageDetails['rawTextMessage'] = this.rawText;\n        messageDetails['messageElements'] = this._messageElements;\n        messageDetails['originalEvent'] = event;\n        messageDetails['feedbackId'] = uniqueFeedbackId;\n        event.preventDefault();\n        const feedbackEvent = new CustomEvent('on-user-feedback-request', {\n            detail: messageDetails,\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(feedbackEvent);\n        if (this.negativeFeedbackSelected) {\n            this._handleDisplayFeedBackForm(event, 'thumbs-down', uniqueFeedbackId);\n        }\n        else {\n            this._hideFeedBackForm();\n        }\n    }\n}\nmessage.styles = styles;\nexport default message;\n__decorate([\n    state()\n], message.prototype, \"_messageElements\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'user-submitted' })\n], message.prototype, \"userSubmitted\", void 0);\n__decorate([\n    property({ type: Array, attribute: 'elements', reflect: true })\n], message.prototype, \"elements\", void 0);\n__decorate([\n    property({ type: String, attribute: 'display-name' })\n], message.prototype, \"displayName\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-buttons' })\n], message.prototype, \"disableButtons\", void 0);\n__decorate([\n    property({ type: String, attribute: 'raw-text', reflect: true })\n], message.prototype, \"rawText\", void 0);\n__decorate([\n    state()\n], message.prototype, \"_editedMessage\", void 0);\n__decorate([\n    property({ type: String, attribute: 'parent-theme' })\n], message.prototype, \"_parentTheme\", void 0);\n__decorate([\n    property({ type: String, attribute: 'origin' })\n], message.prototype, \"origin\", void 0);\n__decorate([\n    state()\n], message.prototype, \"showFeedBackForm\", void 0);\n__decorate([\n    property({ type: String, attribute: 'time-stamp' })\n], message.prototype, \"timeStamp\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'index' })\n], message.prototype, \"index\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'error-state' })\n], message.prototype, \"errorState\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'loading-state', reflect: true })\n], message.prototype, \"loadingState\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'compact-icon' })\n], message.prototype, \"compactIcon\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'stream-delay' })\n], message.prototype, \"_streamDelay\", void 0);\n__decorate([\n    state()\n], message.prototype, \"_editing\", void 0);\n__decorate([\n    property({ type: String, attribute: 'display-color', reflect: true })\n], message.prototype, \"displayColor\", void 0);\n__decorate([\n    state()\n], message.prototype, \"watsonIconLight\", void 0);\n__decorate([\n    state()\n], message.prototype, \"watsonIconDark\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'stream-content' })\n], message.prototype, \"_streamContent\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-complex-feedback' })\n], message.prototype, \"enableComplexFeedback\", void 0);\n__decorate([\n    state()\n], message.prototype, \"_forceStreamEnd\", void 0);\n__decorate([\n    state()\n], message.prototype, \"temporaryMessage\", void 0);\n__decorate([\n    state()\n], message.prototype, \"streamingIndex\", void 0);\n__decorate([\n    state()\n], message.prototype, \"tokens\", void 0);\n__decorate([\n    state()\n], message.prototype, \"currentlyStreaming\", void 0);\n__decorate([\n    state()\n], message.prototype, \"bufferMessage\", void 0);\n__decorate([\n    state()\n], message.prototype, \"currentType\", void 0);\n__decorate([\n    state()\n], message.prototype, \"streamingInterval\", void 0);\n__decorate([\n    state()\n], message.prototype, \"streamingSpeed\", void 0);\n__decorate([\n    state()\n], message.prototype, \"baseStreamingSpeed\", void 0);\n__decorate([\n    state()\n], message.prototype, \"feedbackFormTarget\", void 0);\n__decorate([\n    state()\n], message.prototype, \"positiveFeedbackSelected\", void 0);\n__decorate([\n    state()\n], message.prototype, \"negativeFeedbackSelected\", void 0);\n__decorate([\n    property({ type: Object, attribute: 'feedbackFormDefinitions' })\n], message.prototype, \"feedbackFormDefinitions\", void 0);\n__decorate([\n    state()\n], message.prototype, \"_feedbackFormOrientation\", void 0);\n__decorate([\n    state()\n], message.prototype, \"_feedbackFormValues\", void 0);\n__decorate([\n    state()\n], message.prototype, \"popupTargetElement\", void 0);\n__decorate([\n    state()\n], message.prototype, \"uniqueFeedbackId\", void 0);\n__decorate([\n    property({ type: Object, attribute: 'customLabels' })\n], message.prototype, \"customLabels\", void 0);\n__decorate([\n    state()\n], message.prototype, \"_readerContent\", void 0);\n__decorate([\n    state()\n], message.prototype, \"previousMessageWidth\", void 0);\n"]}