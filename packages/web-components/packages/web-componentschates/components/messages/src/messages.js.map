{"version":3,"sources":["components/messages/src/messages.ts","components/messages/src/messages.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","state","styles","messages","constructor","_computedMessages","_queryInProgress","_autoScroll","_limitScroll","_firstRender","firstUpdated","_a","scrollDiv","shadowRoot","querySelector","_handleScroll","atBottom","scrollTop","clientHeight","scrollHeight","shouldUpdate","changedProperties","has","newHeight","lastMessage","userSubmitted","_previousScrollHeight","updated","_scrollMessage","loading","_updateScroll","_handleSlotchange","event","preventDefault","messageSlotUpdateEvent","CustomEvent","detail","action","bubbles","composed","dispatchEvent","_handleInternalChange","computeMessages","HTMLElement","scrollTimeout","setTimeout","_b","scrollTarget","scrollTo","top","behavior","clearTimeout","type","attribute","prototype","Boolean","reflect","Number","String"],"mappings":"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","file":"messages.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n\n// @ts-ignore\nimport styles from './messages.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class messages extends LitElement {\n  static styles = styles;\n\n  /**\n   * conversation object to display messages straight from the 'message' attribute, overrides any api_url system\n   */\n  @property({ type: Object, attribute: 'messages' })\n  messages;\n\n  /**\n   * computed message object\n   */\n  @state()\n  _computedMessages: any[] = [];\n\n  /**\n   * user-assigned boolean denoting when an api query has begun and returned to 'false' when it is received or an error occured, used to display an empty loading message\n   */\n  @property({ type: Boolean, attribute: 'loading', reflect: true })\n  loading;\n\n  /**\n   * user-assigned boolean denoting when text content is streamed in token by token\n   */\n  @property({ type: Boolean, attribute: 'stream-responses', reflect: true })\n  _streamResponses;\n\n  /**\n   * number value in milliseconds to throttle streaming response\n   */\n  @property({ type: Number, attribute: 'stream-delay' })\n  _streamDelay;\n\n  /**\n   * docked - boolean denoted if parent chat is docked to tell children to minimize\n   */\n  @property({ type: Boolean, attribute: 'docking-enabled' })\n  _dockingEnabled;\n\n  /**\n   * userInterruptedStreaming - boolean denoted the parent chat received an event from it's footer that streaming was canceled\n   */\n  @property({ type: Boolean, attribute: 'user-interrupted-streaming' })\n  userInterruptedStreaming;\n\n  /**\n   * boolean denoting when an api query has begun and returned to 'false' when it is received or an error occured, used to display an empty loading message\n   */\n  @state()\n  _queryInProgress = false;\n\n  /**\n   * string denoting the user name, used for internal logic in the server to differentiate bot responses and user reseponses. default: 'user' but should be the user's real name based on IBM ID or any other data available\n   */\n  @property({ type: String, attribute: 'user-name' })\n  userName;\n\n  /**\n   * string denoting the bot name, default: 'bot' but can be changed to 'Watson' or 'client assistant' or any other name\n   */\n  @property({ type: String, attribute: 'agent-name' })\n  agentName;\n\n  /** boolean denoting if feedback popup show appear for feedback buttons\n   */\n  @property({ type: Boolean, attribute: 'enable-feedback-form' })\n  enableFeedbackForm;\n\n  /** boolean denoting if feedback popup show appear for text selections\n   */\n  @property({ type: Boolean, attribute: 'enable-text-feedback-form' })\n  enableTextFeedbackForm;\n\n  /** JSON dictionary of items describing feedback values\n   */\n  @property({ type: Object, attribute: 'feedbackFormDefinitions' })\n  feedbackFormDefinitions;\n\n  /**\n   * string denoting parent theme\n   */\n  @state()\n  _parentTheme;\n\n  /**\n   * check if scrolled to bottom\n   */\n  @state()\n  _autoScroll = false;\n\n  /**\n   * limit autoscroll when new message arrives\n   */\n  @state()\n  _limitScroll = true;\n\n  /**\n   * target scrollable to div to avoid fetching DOM\n   */\n  private scrollDiv;\n\n  /**\n   * timeout function to scroll\n   */\n  private scrollTimeout;\n\n  /**\n   * previous scrollheight\n   */\n  @state()\n  _previousScrollHeight;\n\n  /**\n   * check if initial render\n   */\n  @state()\n  _firstRender = true;\n\n  /**\n   * custom labels injected from parent\n   */\n  @property({ type: Object, attribute: 'customLabels' })\n  customLabels;\n\n  /**\n   * detect when component is rendered to process rawtext\n   */\n  firstUpdated() {\n    this.scrollDiv = this.shadowRoot?.querySelector(\n      '.clabs--chat-messages-container'\n    );\n  }\n\n  /**\n   * _handlescroll - wheele event to trigger/cancel auto-scroll\n   */\n  _handleScroll() {\n    const atBottom =\n      this.scrollDiv.scrollTop + this.scrollDiv.clientHeight >=\n      this.scrollDiv.scrollHeight - 50;\n    this._limitScroll = false;\n    if (atBottom) {\n      this._autoScroll = true;\n    } else {\n      this._autoScroll = false;\n    }\n  }\n\n  /** shouldUpdate - internal LIT function to predetect updates\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  shouldUpdate(changedProperties) {\n    if (changedProperties.has('messages')) {\n      const newHeight = this.scrollDiv?.scrollHeight;\n      const lastMessage = this.messages[this.messages.length - 1];\n      if (lastMessage) {\n        if (lastMessage.userSubmitted) {\n          this._previousScrollHeight = newHeight - 36;\n        } else {\n          this._previousScrollHeight = newHeight - 36;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  async updated(changedProperties) {\n    super.updated(changedProperties);\n\n    if (changedProperties.has('messages')) {\n      /*if (this._computedMessages.length !== this.messages.length) {\n        console.log('diff');\n      }*/\n      this._computedMessages = [...this.messages];\n    }\n\n    if (changedProperties.has('_computedMessages')) {\n      this._scrollMessage();\n    }\n\n    if (changedProperties.has('loading')) {\n      this._queryInProgress = this.loading;\n      this._autoScroll = true;\n      this._updateScroll();\n    }\n    if (changedProperties.has('_streamResponses')) {\n      this._queryInProgress = this.loading;\n    }\n  }\n\n  /**\n   * handleSlotChange - handle edits to slots when an element is placed in it\n   * @param {event} event - tag click event sent by tagList element\n   */\n  _handleSlotchange(event) {\n    event.preventDefault();\n    const messageSlotUpdateEvent = new CustomEvent('on-messages-slot-update', {\n      detail: { action: 'Messages slot had updated' },\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(messageSlotUpdateEvent);\n    if (this._autoScroll) {\n      this._updateScroll();\n    }\n  }\n\n  /**\n   * handleInternalChange - handle event when children update\n   */\n  _handleInternalChange() {\n    if (this._autoScroll) {\n      this._updateScroll();\n    }\n  }\n\n  /**\n   * handle updating of inner messages object when parent updates\n   */\n  computeMessages() {\n    this._computedMessages = [...this.messages];\n  }\n\n  /**\n   * _scrollMessage - move message down post render\n   */\n  _scrollMessage() {\n    //const newHeight = this.scrollDiv?.scrollHeight;\n    //this._previousScrollHeight = newHeight;\n    this._autoScroll = true;\n    this._limitScroll = true;\n    this._updateScroll();\n  }\n\n  /** auto-scroll chat-messages div when a new message has appeared\n   **/\n  _updateScroll() {\n    if (this.scrollDiv instanceof HTMLElement) {\n      if (!this.scrollTimeout) {\n        this.scrollTimeout = setTimeout(() => {\n          if (this._autoScroll) {\n            let scrollTarget = this.scrollDiv?.scrollHeight;\n            if (this._limitScroll) {\n              scrollTarget = this._previousScrollHeight;\n            }\n            this.scrollDiv?.scrollTo({\n              top: scrollTarget,\n              behavior: 'smooth',\n            });\n          }\n          clearTimeout(this.scrollTimeout);\n          this.scrollTimeout = null;\n        }, 200);\n      }\n    }\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n// @ts-ignore\nimport styles from './messages.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass messages extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * computed message object\n         */\n        this._computedMessages = [];\n        /**\n         * boolean denoting when an api query has begun and returned to 'false' when it is received or an error occured, used to display an empty loading message\n         */\n        this._queryInProgress = false;\n        /**\n         * check if scrolled to bottom\n         */\n        this._autoScroll = false;\n        /**\n         * limit autoscroll when new message arrives\n         */\n        this._limitScroll = true;\n        /**\n         * check if initial render\n         */\n        this._firstRender = true;\n    }\n    /**\n     * detect when component is rendered to process rawtext\n     */\n    firstUpdated() {\n        var _a;\n        this.scrollDiv = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.clabs--chat-messages-container');\n    }\n    /**\n     * _handlescroll - wheele event to trigger/cancel auto-scroll\n     */\n    _handleScroll() {\n        const atBottom = this.scrollDiv.scrollTop + this.scrollDiv.clientHeight >=\n            this.scrollDiv.scrollHeight - 50;\n        this._limitScroll = false;\n        if (atBottom) {\n            this._autoScroll = true;\n        }\n        else {\n            this._autoScroll = false;\n        }\n    }\n    /** shouldUpdate - internal LIT function to predetect updates\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    shouldUpdate(changedProperties) {\n        var _a;\n        if (changedProperties.has('messages')) {\n            const newHeight = (_a = this.scrollDiv) === null || _a === void 0 ? void 0 : _a.scrollHeight;\n            const lastMessage = this.messages[this.messages.length - 1];\n            if (lastMessage) {\n                if (lastMessage.userSubmitted) {\n                    this._previousScrollHeight = newHeight - 36;\n                }\n                else {\n                    this._previousScrollHeight = newHeight - 36;\n                }\n            }\n        }\n        return true;\n    }\n    /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    async updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('messages')) {\n            /*if (this._computedMessages.length !== this.messages.length) {\n              console.log('diff');\n            }*/\n            this._computedMessages = [...this.messages];\n        }\n        if (changedProperties.has('_computedMessages')) {\n            this._scrollMessage();\n        }\n        if (changedProperties.has('loading')) {\n            this._queryInProgress = this.loading;\n            this._autoScroll = true;\n            this._updateScroll();\n        }\n        if (changedProperties.has('_streamResponses')) {\n            this._queryInProgress = this.loading;\n        }\n    }\n    /**\n     * handleSlotChange - handle edits to slots when an element is placed in it\n     * @param {event} event - tag click event sent by tagList element\n     */\n    _handleSlotchange(event) {\n        event.preventDefault();\n        const messageSlotUpdateEvent = new CustomEvent('on-messages-slot-update', {\n            detail: { action: 'Messages slot had updated' },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(messageSlotUpdateEvent);\n        if (this._autoScroll) {\n            this._updateScroll();\n        }\n    }\n    /**\n     * handleInternalChange - handle event when children update\n     */\n    _handleInternalChange() {\n        if (this._autoScroll) {\n            this._updateScroll();\n        }\n    }\n    /**\n     * handle updating of inner messages object when parent updates\n     */\n    computeMessages() {\n        this._computedMessages = [...this.messages];\n    }\n    /**\n     * _scrollMessage - move message down post render\n     */\n    _scrollMessage() {\n        //const newHeight = this.scrollDiv?.scrollHeight;\n        //this._previousScrollHeight = newHeight;\n        this._autoScroll = true;\n        this._limitScroll = true;\n        this._updateScroll();\n    }\n    /** auto-scroll chat-messages div when a new message has appeared\n     **/\n    _updateScroll() {\n        if (this.scrollDiv instanceof HTMLElement) {\n            if (!this.scrollTimeout) {\n                this.scrollTimeout = setTimeout(() => {\n                    var _a, _b;\n                    if (this._autoScroll) {\n                        let scrollTarget = (_a = this.scrollDiv) === null || _a === void 0 ? void 0 : _a.scrollHeight;\n                        if (this._limitScroll) {\n                            scrollTarget = this._previousScrollHeight;\n                        }\n                        (_b = this.scrollDiv) === null || _b === void 0 ? void 0 : _b.scrollTo({\n                            top: scrollTarget,\n                            behavior: 'smooth',\n                        });\n                    }\n                    clearTimeout(this.scrollTimeout);\n                    this.scrollTimeout = null;\n                }, 200);\n            }\n        }\n    }\n}\nmessages.styles = styles;\nexport default messages;\n__decorate([\n    property({ type: Object, attribute: 'messages' })\n], messages.prototype, \"messages\", void 0);\n__decorate([\n    state()\n], messages.prototype, \"_computedMessages\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'loading', reflect: true })\n], messages.prototype, \"loading\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'stream-responses', reflect: true })\n], messages.prototype, \"_streamResponses\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'stream-delay' })\n], messages.prototype, \"_streamDelay\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'docking-enabled' })\n], messages.prototype, \"_dockingEnabled\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'user-interrupted-streaming' })\n], messages.prototype, \"userInterruptedStreaming\", void 0);\n__decorate([\n    state()\n], messages.prototype, \"_queryInProgress\", void 0);\n__decorate([\n    property({ type: String, attribute: 'user-name' })\n], messages.prototype, \"userName\", void 0);\n__decorate([\n    property({ type: String, attribute: 'agent-name' })\n], messages.prototype, \"agentName\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-feedback-form' })\n], messages.prototype, \"enableFeedbackForm\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-text-feedback-form' })\n], messages.prototype, \"enableTextFeedbackForm\", void 0);\n__decorate([\n    property({ type: Object, attribute: 'feedbackFormDefinitions' })\n], messages.prototype, \"feedbackFormDefinitions\", void 0);\n__decorate([\n    state()\n], messages.prototype, \"_parentTheme\", void 0);\n__decorate([\n    state()\n], messages.prototype, \"_autoScroll\", void 0);\n__decorate([\n    state()\n], messages.prototype, \"_limitScroll\", void 0);\n__decorate([\n    state()\n], messages.prototype, \"_previousScrollHeight\", void 0);\n__decorate([\n    state()\n], messages.prototype, \"_firstRender\", void 0);\n__decorate([\n    property({ type: Object, attribute: 'customLabels' })\n], messages.prototype, \"customLabels\", void 0);\n"]}