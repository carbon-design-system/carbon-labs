{"version":3,"sources":["components/molecularElement/src/molecularElement.ts","components/molecularElement/src/molecularElement.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","state","SmileDrawer","settings","stablePrefix","clabsPrefix","styles","molecularElement","constructor","isHovered","_invalid","renderSuccessful","loading","fullscreenMode","_scaling","_viewX","_viewY","firstUpdated","generateUniqueId","width","style","setProperty","height","molecularRenderer","SmiDrawer","_buildOptions","temporaryMolecularRenderer","fullscreenMolecularRenderer","theme","_getTheme","streaming","window","setTimeout","_smilesContent","content","_prepareMolecule","mode","fontSizeLarge","fontSizeSmall","bondThickness","compactDrawing","scale","padding","bondSpacing","bondLength","atomVisualization","thumbNailMode","options","shortBondLength","isomeric","debug","terminalCarbons","explicitHydrogens","overlapSensitivity","overlapResolutionIterations","experimental","themes","dark","C","O","N","F","CL","BR","I","P","S","B","SI","H","BACKGROUND","BONDS","light","randomString","Math","random","toString","substr","_uniqueID","_handleFullScreenScroll","event","preventDefault","stopPropagation","updated","changedProperties","has","_scrollStreamArea","checkPubChemAvailability","_appendCustomStyles","parentElement","HTMLElement","parentStyle","getComputedStyle","backgroundColor","getPropertyValue","darkMode","startsWith","parseInt","replace","_zoomIn","_a","zoomValue","minZoom","maxZoom","delta","sign","deltaY","allSvg","shadowRoot","getElementById","SVGElement","mouseX","offsetX","mouseY","offsetY","newScale","min","max","subElements","querySelectorAll","subElement","setAttribute","shortenWedges","wedgeElements","forEach","wedge","SVGPolygonElement","pointsAttr","getAttribute","points","split","coords","map","point","Number","shortenFactor","x1","y1","x2","y2","x3","y3","textArea","querySelector","scrollLeft","scrollWidth","_openFullscreenView","_closeFullscreenView","_handleMouseOut","_handleMouseOver","_openEditorView","pubChemUrl","open","pubChemResponse","fetch","encodeURIComponent","data","json","cid","pubChemError","_exportToImage","svgDiv","svgData","XMLSerializer","serializeToString","tempCanvas","document","createElement","context","getContext","svgSize","getBoundingClientRect","tempImage","Image","onload","drawImage","imageData","toDataURL","canvasDownloadLink","fileName","title","download","href","click","src","btoa","_b","targetID","testTargetID","canvas","testCanvas","smilesString","RegExp","renderTest","draw","err","renderInProgress","requestUpdate","type","String","attribute","reflect","prototype","Boolean"],"mappings":"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","file":"molecularElement.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport SmileDrawer from 'smiles-drawer';\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nconst { stablePrefix: clabsPrefix } = settings;\n\n// @ts-ignore\nimport styles from './molecularElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class molecularElement extends LitElement {\n  static styles = styles;\n  /**\n   * Array of subelements parsed from API reply\n   */\n  @property({ type: String, attribute: 'content', reflect: true })\n  content;\n\n  /**\n   * Title to be displayed top-left\n   */\n  @property({ type: String, attribute: 'title' })\n  title;\n\n  /**\n   * width - preassigned width from parent\n   */\n  @property({ type: Number, attribute: 'width' })\n  width;\n\n  /**\n   * height - preassigned height from parent\n   */\n  @property({ type: Number, attribute: 'height' })\n  height;\n\n  /**\n   * theme - specified by user or auto-generated from context\n   */\n  @property({ type: String, attribute: 'theme' })\n  theme;\n\n  /**\n   * streaming - denotes if content is being streamed in and incomplete\n   */\n  @property({ type: Boolean, attribute: 'streaming' })\n  streaming;\n\n  /**\n   * Disable all chart option buttons, supercedes all other individual button options\n   */\n  @property({ type: Boolean, attribute: 'disable-options' })\n  disableOptions;\n\n  /**\n   * Disable fullscreen button\n   */\n  @property({ type: Boolean, attribute: 'disable-fullscreen' })\n  disableFullscreen;\n\n  /**\n   * Disable image export button\n   */\n  @property({ type: Boolean, attribute: 'disable-export' })\n  disableExport;\n\n  /**\n   * Thumbnail mode\n   */\n  @property({ type: Boolean, attribute: 'thumbnail-mode' })\n  thumbNailMode;\n\n  /**\n   * is the component hovered upon\n   */\n  @state()\n  isHovered = false;\n\n  /**\n   * Disable code inspector button\n   */\n  @property({ type: Boolean, attribute: 'disable-code-inspector' })\n  disableCodeInspector;\n\n  /**\n   * uniqueID - unique ID egenrated in this component to target correct div when rendering\n   */\n  @state()\n  _uniqueID;\n\n  /**\n   * invalid - if spec fails to render or is missing, an error will be displayed\n   */\n  @state()\n  _invalid = false;\n\n  /**\n   * drawer - drawing function for molecule\n   */\n  @state()\n  drawer;\n\n  /**\n   * renderSuccessful - flag when a render operation has succeeded to begin post-hoc editing\n   */\n  @state()\n  renderSuccessful = false;\n\n  /**\n   * loading - initial state to show loading icon until error or successful render occurs\n   */\n  @state()\n  loading = true;\n\n  /**\n   * fullscreenMode - boolean to denote with fullscreen active\n   */\n  @state()\n  fullscreenMode = false;\n\n  /**\n   * smilesContent -  content string to render\n   */\n  @state()\n  _smilesContent;\n\n  /**\n   * scaling - zoom scaling value;\n   */\n  @state()\n  _scaling = 1;\n\n  /**\n   * viewX - save offset to target zooming\n   */\n  @state()\n  _viewX = 0;\n\n  /**\n   * viewY - save offset to target zooming\n   */\n  @state()\n  _viewY = 0;\n\n  /**\n   * SmilesDrawer rendering object that targets the visible inner SVG\n   */\n  private molecularRenderer: any;\n\n  /**\n   * SmilesDrawer rendering test object that targets an invisible test object, used to check if content is valid\n   */\n  private temporaryMolecularRenderer: any;\n\n  /**\n   * SmilesDrawer rendering for fullscreen\n   */\n  private fullscreenMolecularRenderer: any;\n\n  /**\n   * pubChemUrl - pubchem url to inspect molecule\n   */\n  @state()\n  pubChemUrl;\n\n  /**\n   * renderInProgress - render state while streaming to avoid over-rendering\n   */\n  @state()\n  renderInProgress;\n\n  /** detect when component is rendered to process visualization specification object\n   */\n  firstUpdated() {\n    this.generateUniqueId();\n    if (this.width) {\n      this.style.setProperty('--chat-molecule-width', this.width + 'px');\n    }\n\n    if (this.height) {\n      this.style.setProperty('--chat-molecule-height', this.height + 'px');\n    }\n\n    this.molecularRenderer = new SmileDrawer.SmiDrawer(\n      this._buildOptions('default')\n    );\n    this.temporaryMolecularRenderer = new SmileDrawer.SmiDrawer(\n      this._buildOptions('default')\n    );\n    this.fullscreenMolecularRenderer = new SmileDrawer.SmiDrawer(\n      this._buildOptions('fullscreen')\n    );\n    if (!this.theme) {\n      this._getTheme();\n    }\n    if (!this.streaming) {\n      window.setTimeout(() => {\n        this._smilesContent = this.content;\n        this._prepareMolecule('default');\n      }, 200);\n    }\n  }\n\n  /** _buildOptions\n   * @param {String} mode - fullscreen, test or default\n   */\n  _buildOptions(mode) {\n    let fontSizeLarge = 6;\n    let fontSizeSmall = 3;\n    let bondThickness = 0.7;\n    let compactDrawing = false;\n    let scale: any = null;\n    let padding = 16;\n    let bondSpacing = 0.18 * 10;\n    const bondLength = 15;\n    let atomVisualization = 'default';\n\n    if (mode === 'fullscreen') {\n      fontSizeLarge = 5;\n      fontSizeSmall = 3;\n      compactDrawing = false;\n    } else if (this.thumbNailMode) {\n      fontSizeLarge = 12;\n      fontSizeSmall = 8;\n      bondThickness = 1.2;\n      bondSpacing = 0.18 * 15;\n      compactDrawing = true;\n      atomVisualization = 'balls';\n      padding = 8;\n      scale = 1;\n    }\n\n    const options = {\n      scale: scale,\n      compactDrawing: compactDrawing,\n      fontSizeLarge: fontSizeLarge,\n      fontSizeSmall: fontSizeSmall,\n      bondThickness: bondThickness,\n      padding: padding,\n      bondLength: bondLength,\n      shortBondLength: 0.7,\n      bondSpacing: bondSpacing,\n      atomVisualization: atomVisualization,\n      isomeric: true,\n      debug: false,\n      terminalCarbons: true,\n      explicitHydrogens: false,\n      overlapSensitivity: 0.1,\n      overlapResolutionIterations: this.streaming ? 1 : 10,\n      experimental: false,\n      themes: {\n        dark: {\n          C: '#c6c6c6',\n          O: '#f45d56',\n          N: '#33b1ff',\n          F: '#42be65',\n          CL: '#08bdba',\n          BR: '#ff832b',\n          I: '#be95ff',\n          P: '#ff832b',\n          S: '#fdd13a',\n          B: '#f1c21b',\n          SI: '#f1c21b',\n          H: '#c6c6c6',\n          BACKGROUND: '#161616',\n          BONDS: '#3d3d3d',\n        },\n        light: {\n          C: '#525252',\n          O: '#da1e28',\n          N: '#1192e8',\n          F: '#24a148',\n          CL: '#009d9a',\n          BR: '#ba4e00',\n          I: '#8a3ffc',\n          P: '#db5b00',\n          S: '#d6a602',\n          B: '#c29800',\n          SI: '#cca002',\n          H: '#525252',\n          BACKGROUND: '#f4f4f4',\n          BONDS: '#e0e0e0',\n        },\n      },\n    };\n    return options;\n  }\n\n  /**\n   * generateUniqueId - create random string to give the target visualization div\n   */\n  generateUniqueId() {\n    const randomString: string = Math.random().toString(36).substr(2, 9);\n    this._uniqueID = randomString;\n  }\n\n  /**\n   * _handleFullScreenScroll - block scrolling beyond fullscreen\n   * @param {event} event - scroll/wheel event\n   */\n  _handleFullScreenScroll(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  async updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has('content')) {\n      this._prepareMolecule('default');\n    }\n    if (changedProperties.has('_smilesContent')) {\n      this._scrollStreamArea();\n    }\n    if (changedProperties.has('renderSuccessful')) {\n      await this.checkPubChemAvailability();\n      this._appendCustomStyles();\n    }\n  }\n\n  /**\n   * _getTheme - find current theme by checking parent background color\n   */\n  _getTheme() {\n    if (this.parentElement instanceof HTMLElement) {\n      const parentStyle = getComputedStyle(this.parentElement);\n      const backgroundColor = parentStyle.getPropertyValue('--cds-background');\n      const darkMode =\n        backgroundColor.startsWith('#') &&\n        parseInt(backgroundColor.replace('#', ''), 16) < 0xffffff / 2;\n      this.theme = darkMode ? 'dark' : 'light';\n    }\n  }\n\n  /**\n   * _zoomIn - zooming event on scroll to expand svg element\n   * @param {event} event - mousewheel event\n   */\n  _zoomIn(event) {\n    event.preventDefault();\n    const zoomValue = 0.001;\n    const minZoom = 0.5;\n    const maxZoom = 3.0;\n    const delta = Math.sign(event.deltaY) * zoomValue;\n\n    const allSvg = this.shadowRoot?.getElementById(\n      'clabs--chat-molecule-' + this._uniqueID\n    );\n    if (allSvg instanceof SVGElement) {\n      const mouseX = event.offsetX;\n      const mouseY = event.offsetY;\n      const newScale = Math.min(\n        maxZoom,\n        Math.max(this._scaling - delta, minZoom)\n      );\n      this._viewX =\n        mouseX - (mouseX - this._viewX) * (newScale / this._scaling);\n      this._viewY =\n        mouseY - (mouseY - this._viewY) * (newScale / this._scaling);\n\n      this._scaling = newScale;\n\n      //allSvg.setAttribute('transform','translate('+this._viewX+' '+this._viewY+') scale('+this._scaling+')');\n      const subElements = allSvg.querySelectorAll('g');\n      for (const subElement of subElements) {\n        //allSvg.setAttribute('viewBox', viewX+' '+viewY+' '+newWidth+' '+newHeight);//translate('+viewX+' '+viewY+')\n        subElement.setAttribute(\n          'transform',\n          'translate(' +\n            this._viewY +\n            ' ' +\n            this._viewX +\n            ') scale(' +\n            this._scaling +\n            ')'\n        );\n      }\n    }\n  }\n\n  /**\n   * _appendCustomStyles - change smiles-drawer atom rendering\n   */\n  _appendCustomStyles() {\n    //const enableTextStyling = false;\n    //const enableCircleStyling = false;\n    //const enableZooming = false;\n    const shortenWedges = true;\n\n    /*if(enableZooming){\n\n      const moleculeContainer = this.shadowRoot?.getElementById(clabsPrefix+'--chat-molecule-container-id-'+ this._uniqueID);\n      if(moleculeContainer instanceof HTMLElement){\n        moleculeContainer.addEventListener('wheel',(e)=>this._zoomIn(e))\n      }\n\n    }*/\n\n    if (shortenWedges) {\n      const wedgeElements = this.shadowRoot?.querySelectorAll('polygon');\n      if (wedgeElements) {\n        wedgeElements.forEach((wedge) => {\n          if (wedge instanceof SVGPolygonElement) {\n            const pointsAttr = wedge.getAttribute('points');\n            if (pointsAttr) {\n              const points = pointsAttr.split(' ');\n              const coords = points.map((point) =>\n                point.split(',').map(Number)\n              );\n              const shortenFactor = 0.75;\n              const [x1, y1] = coords[0];\n              let [x2, y2] = coords[1];\n              let [x3, y3] = coords[2];\n\n              x2 = x1 + (x2 - x1) * shortenFactor;\n              y2 = y1 + (y2 - y1) * shortenFactor;\n              x3 = x1 + (x3 - x1) * shortenFactor;\n              y3 = y1 + (y3 - y1) * shortenFactor;\n\n              wedge.setAttribute(\n                'points',\n                x1 + ',' + y1 + ' ' + x2 + ',' + y2 + ' ' + x3 + ',' + y3\n              );\n            }\n          }\n        });\n      }\n    }\n\n    /*if(enableTextStyling){\n      const textElements = this.shadowRoot?.querySelectorAll('text');\n      if(textElements){\n        textElements.forEach(text =>{\n          if(text instanceof SVGTextElement){\n      //text.style.fill = 'red';\n      //text.style.textShadow = 'red'\n      text.style.textShadow='0 0 5px rgba(255, 255, 255, 0.8)'\n      //text.style.stroke = 'black';\n      //text.style.strokeWidth = '3px';\n      //text.style.background = 'none';\n\n      const tspans = text?.querySelectorAll('tspan');\n      tspans.forEach(tspan =>{\n        if(tspan instanceof SVGTSpanElement){\n        tspan.style.stroke='rgba(255, 255, 255)';\n        tspan.style.fontWeight='900'\n        //tspan.style.fill='white';\n        tspan.style.strokeWidth='0.5px';\n        //tspan.style.textShadow='0 0 5px rgba(255, 255, 255, 0.8)'\n        }\n      });\n      }\n\n      })\n     }\n    }\n    if(enableCircleStyling){\n    const mask = this.shadowRoot?.querySelector('mask');\n    if(mask){\n      const circles = mask?.querySelectorAll('circle');\n      if(circles){\n\n      circles.forEach(circle =>{\n        if(circle instanceof SVGCircleElement){\n        //circle.style.opacity='0';\n        circle.setAttribute(\"r\",\"3\")\n        }\n      })\n      }\n    }\n    }*/\n  }\n\n  /**\n   * _scrollStreamArea - scroll div to display latest token added\n   */\n  _scrollStreamArea() {\n    const textArea = this.shadowRoot?.querySelector(\n      '.clabs--chat-molecule-stream-text-content'\n    );\n    if (textArea instanceof HTMLElement) {\n      textArea.scrollLeft = textArea.scrollWidth;\n    }\n  }\n\n  /**\n   * _openFullscreenView -\n   */\n  _openFullscreenView() {\n    this.fullscreenMode = true;\n    window.setTimeout(() => {\n      this._prepareMolecule('fullscreen');\n    }, 200);\n  }\n\n  /**\n   * _openFullscreenView -\n   */\n  _closeFullscreenView() {\n    this.fullscreenMode = false;\n    //this._prepareMolecule(\"default\");\n  }\n\n  /**\n   * _handleMouseOut - see if component lost mouse content\n   */\n  _handleMouseOut() {\n    this.isHovered = false;\n  }\n\n  /**\n   * _handleMouseOut - see if component lost mouse content\n   */\n  _handleMouseOver() {\n    this.isHovered = true;\n  }\n\n  /**\n   * _openEditorView -\n   */\n  async _openEditorView() {\n    if (this.pubChemUrl) {\n      window?.open(this.pubChemUrl, '_blank');\n    }\n  }\n\n  /**\n   * _checkPubChemAvailability - make a call to see if smiles string is available\n   */\n  async checkPubChemAvailability() {\n    try {\n      const pubChemResponse = await fetch(\n        'https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/' +\n          encodeURIComponent(this.content) +\n          '/cids/JSON'\n      );\n      const data = await pubChemResponse.json();\n\n      if (\n        data['IdentifierList'] &&\n        data['IdentifierList']['CID'] &&\n        data['IdentifierList']['CID'].length > 0\n      ) {\n        const cid = data['IdentifierList']['CID'][0];\n        if (cid) {\n          this.pubChemUrl = 'https://pubchem.ncbi.nlm.nih.gov/compound/' + cid;\n        }\n      }\n    } catch (pubChemError) {\n      this.pubChemUrl = null;\n    }\n  }\n\n  /**\n   * _exportImage - if svg, get image object from svg and auto-download\n   */\n  _exportToImage() {\n    window.setTimeout(async () => {\n      const svgDiv = this.shadowRoot?.querySelector(\n        '#' + clabsPrefix + '--chat-molecule-' + this._uniqueID\n      );\n      if (svgDiv instanceof SVGElement) {\n        const svgData = new XMLSerializer().serializeToString(svgDiv);\n        const tempCanvas = document.createElement('canvas');\n        const context = tempCanvas.getContext('2d');\n        const svgSize = svgDiv.getBoundingClientRect();\n        tempCanvas.height = svgSize.height;\n        tempCanvas.width = svgSize.width;\n\n        const tempImage = new Image();\n        /**\n         * loading function when image is finalized and reqady to download\n         */\n        tempImage.onload = () => {\n          context?.drawImage(tempImage, 0, 0);\n          const imageData = tempCanvas.toDataURL('image/png');\n          const canvasDownloadLink = document.createElement('a');\n          const fileName = this.title ? this.title : 'molecule';\n          canvasDownloadLink.download = fileName;\n          canvasDownloadLink.href = imageData;\n          canvasDownloadLink.click();\n        };\n        tempImage.src = 'data:image/svg+xml;base64,' + btoa(svgData);\n      }\n    }, 200);\n  }\n\n  /**\n   * Prepare molecular object for rendering from content string\n   * @param {String} mode - which mode to render with smilesDrawer\n   */\n  _prepareMolecule(mode) {\n    this.loading = false;\n\n    let targetID = 'clabs--chat-molecule-' + this._uniqueID;\n    const testTargetID = 'clabs--chat-molecule-test-' + this._uniqueID;\n    if (mode === 'fullscreen') {\n      targetID = 'clabs--chat-molecule-fullscreen-' + this._uniqueID;\n    }\n\n    const canvas = this.shadowRoot?.getElementById(targetID);\n    const testCanvas = this.shadowRoot?.getElementById(testTargetID);\n    const smilesString = this.content.replace(new RegExp('```', 'g'), '');\n    this._smilesContent = smilesString;\n    let renderTest = false;\n    if (canvas instanceof SVGElement && testCanvas instanceof SVGElement) {\n      try {\n        this.temporaryMolecularRenderer.draw(\n          smilesString,\n          testCanvas,\n          this.theme,\n          () => {\n            renderTest = true;\n            this.renderSuccessful = true;\n          },\n          () => {\n            renderTest = false;\n          }\n        );\n      } catch (err) {\n        renderTest = false;\n      }\n    }\n\n    if (renderTest) {\n      if (this.streaming) {\n        if (!this.renderInProgress) {\n          this.renderInProgress = true;\n          this.renderInProgress = false;\n        } else {\n          return '';\n        }\n      }\n      if (mode === 'fullscreen') {\n        this.fullscreenMolecularRenderer.draw(\n          smilesString,\n          canvas,\n          this.theme,\n          () => {\n            this.renderInProgress = false;\n          },\n          () => {\n            this.renderInProgress = false;\n          }\n        );\n      } else {\n        this.molecularRenderer.draw(\n          smilesString,\n          canvas,\n          this.theme,\n          () => {\n            this.renderInProgress = false;\n          },\n          () => {\n            this.renderInProgress = false;\n          }\n        );\n      }\n      this.requestUpdate();\n    }\n    return '';\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport SmileDrawer from 'smiles-drawer';\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nconst { stablePrefix: clabsPrefix } = settings;\n// @ts-ignore\nimport styles from './molecularElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass molecularElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * is the component hovered upon\n         */\n        this.isHovered = false;\n        /**\n         * invalid - if spec fails to render or is missing, an error will be displayed\n         */\n        this._invalid = false;\n        /**\n         * renderSuccessful - flag when a render operation has succeeded to begin post-hoc editing\n         */\n        this.renderSuccessful = false;\n        /**\n         * loading - initial state to show loading icon until error or successful render occurs\n         */\n        this.loading = true;\n        /**\n         * fullscreenMode - boolean to denote with fullscreen active\n         */\n        this.fullscreenMode = false;\n        /**\n         * scaling - zoom scaling value;\n         */\n        this._scaling = 1;\n        /**\n         * viewX - save offset to target zooming\n         */\n        this._viewX = 0;\n        /**\n         * viewY - save offset to target zooming\n         */\n        this._viewY = 0;\n    }\n    /** detect when component is rendered to process visualization specification object\n     */\n    firstUpdated() {\n        this.generateUniqueId();\n        if (this.width) {\n            this.style.setProperty('--chat-molecule-width', this.width + 'px');\n        }\n        if (this.height) {\n            this.style.setProperty('--chat-molecule-height', this.height + 'px');\n        }\n        this.molecularRenderer = new SmileDrawer.SmiDrawer(this._buildOptions('default'));\n        this.temporaryMolecularRenderer = new SmileDrawer.SmiDrawer(this._buildOptions('default'));\n        this.fullscreenMolecularRenderer = new SmileDrawer.SmiDrawer(this._buildOptions('fullscreen'));\n        if (!this.theme) {\n            this._getTheme();\n        }\n        if (!this.streaming) {\n            window.setTimeout(() => {\n                this._smilesContent = this.content;\n                this._prepareMolecule('default');\n            }, 200);\n        }\n    }\n    /** _buildOptions\n     * @param {String} mode - fullscreen, test or default\n     */\n    _buildOptions(mode) {\n        let fontSizeLarge = 6;\n        let fontSizeSmall = 3;\n        let bondThickness = 0.7;\n        let compactDrawing = false;\n        let scale = null;\n        let padding = 16;\n        let bondSpacing = 0.18 * 10;\n        const bondLength = 15;\n        let atomVisualization = 'default';\n        if (mode === 'fullscreen') {\n            fontSizeLarge = 5;\n            fontSizeSmall = 3;\n            compactDrawing = false;\n        }\n        else if (this.thumbNailMode) {\n            fontSizeLarge = 12;\n            fontSizeSmall = 8;\n            bondThickness = 1.2;\n            bondSpacing = 0.18 * 15;\n            compactDrawing = true;\n            atomVisualization = 'balls';\n            padding = 8;\n            scale = 1;\n        }\n        const options = {\n            scale: scale,\n            compactDrawing: compactDrawing,\n            fontSizeLarge: fontSizeLarge,\n            fontSizeSmall: fontSizeSmall,\n            bondThickness: bondThickness,\n            padding: padding,\n            bondLength: bondLength,\n            shortBondLength: 0.7,\n            bondSpacing: bondSpacing,\n            atomVisualization: atomVisualization,\n            isomeric: true,\n            debug: false,\n            terminalCarbons: true,\n            explicitHydrogens: false,\n            overlapSensitivity: 0.1,\n            overlapResolutionIterations: this.streaming ? 1 : 10,\n            experimental: false,\n            themes: {\n                dark: {\n                    C: '#c6c6c6',\n                    O: '#f45d56',\n                    N: '#33b1ff',\n                    F: '#42be65',\n                    CL: '#08bdba',\n                    BR: '#ff832b',\n                    I: '#be95ff',\n                    P: '#ff832b',\n                    S: '#fdd13a',\n                    B: '#f1c21b',\n                    SI: '#f1c21b',\n                    H: '#c6c6c6',\n                    BACKGROUND: '#161616',\n                    BONDS: '#3d3d3d',\n                },\n                light: {\n                    C: '#525252',\n                    O: '#da1e28',\n                    N: '#1192e8',\n                    F: '#24a148',\n                    CL: '#009d9a',\n                    BR: '#ba4e00',\n                    I: '#8a3ffc',\n                    P: '#db5b00',\n                    S: '#d6a602',\n                    B: '#c29800',\n                    SI: '#cca002',\n                    H: '#525252',\n                    BACKGROUND: '#f4f4f4',\n                    BONDS: '#e0e0e0',\n                },\n            },\n        };\n        return options;\n    }\n    /**\n     * generateUniqueId - create random string to give the target visualization div\n     */\n    generateUniqueId() {\n        const randomString = Math.random().toString(36).substr(2, 9);\n        this._uniqueID = randomString;\n    }\n    /**\n     * _handleFullScreenScroll - block scrolling beyond fullscreen\n     * @param {event} event - scroll/wheel event\n     */\n    _handleFullScreenScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    async updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('content')) {\n            this._prepareMolecule('default');\n        }\n        if (changedProperties.has('_smilesContent')) {\n            this._scrollStreamArea();\n        }\n        if (changedProperties.has('renderSuccessful')) {\n            await this.checkPubChemAvailability();\n            this._appendCustomStyles();\n        }\n    }\n    /**\n     * _getTheme - find current theme by checking parent background color\n     */\n    _getTheme() {\n        if (this.parentElement instanceof HTMLElement) {\n            const parentStyle = getComputedStyle(this.parentElement);\n            const backgroundColor = parentStyle.getPropertyValue('--cds-background');\n            const darkMode = backgroundColor.startsWith('#') &&\n                parseInt(backgroundColor.replace('#', ''), 16) < 0xffffff / 2;\n            this.theme = darkMode ? 'dark' : 'light';\n        }\n    }\n    /**\n     * _zoomIn - zooming event on scroll to expand svg element\n     * @param {event} event - mousewheel event\n     */\n    _zoomIn(event) {\n        var _a;\n        event.preventDefault();\n        const zoomValue = 0.001;\n        const minZoom = 0.5;\n        const maxZoom = 3.0;\n        const delta = Math.sign(event.deltaY) * zoomValue;\n        const allSvg = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.getElementById('clabs--chat-molecule-' + this._uniqueID);\n        if (allSvg instanceof SVGElement) {\n            const mouseX = event.offsetX;\n            const mouseY = event.offsetY;\n            const newScale = Math.min(maxZoom, Math.max(this._scaling - delta, minZoom));\n            this._viewX =\n                mouseX - (mouseX - this._viewX) * (newScale / this._scaling);\n            this._viewY =\n                mouseY - (mouseY - this._viewY) * (newScale / this._scaling);\n            this._scaling = newScale;\n            //allSvg.setAttribute('transform','translate('+this._viewX+' '+this._viewY+') scale('+this._scaling+')');\n            const subElements = allSvg.querySelectorAll('g');\n            for (const subElement of subElements) {\n                //allSvg.setAttribute('viewBox', viewX+' '+viewY+' '+newWidth+' '+newHeight);//translate('+viewX+' '+viewY+')\n                subElement.setAttribute('transform', 'translate(' +\n                    this._viewY +\n                    ' ' +\n                    this._viewX +\n                    ') scale(' +\n                    this._scaling +\n                    ')');\n            }\n        }\n    }\n    /**\n     * _appendCustomStyles - change smiles-drawer atom rendering\n     */\n    _appendCustomStyles() {\n        var _a;\n        //const enableTextStyling = false;\n        //const enableCircleStyling = false;\n        //const enableZooming = false;\n        const shortenWedges = true;\n        /*if(enableZooming){\n    \n          const moleculeContainer = this.shadowRoot?.getElementById(clabsPrefix+'--chat-molecule-container-id-'+ this._uniqueID);\n          if(moleculeContainer instanceof HTMLElement){\n            moleculeContainer.addEventListener('wheel',(e)=>this._zoomIn(e))\n          }\n    \n        }*/\n        if (shortenWedges) {\n            const wedgeElements = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelectorAll('polygon');\n            if (wedgeElements) {\n                wedgeElements.forEach((wedge) => {\n                    if (wedge instanceof SVGPolygonElement) {\n                        const pointsAttr = wedge.getAttribute('points');\n                        if (pointsAttr) {\n                            const points = pointsAttr.split(' ');\n                            const coords = points.map((point) => point.split(',').map(Number));\n                            const shortenFactor = 0.75;\n                            const [x1, y1] = coords[0];\n                            let [x2, y2] = coords[1];\n                            let [x3, y3] = coords[2];\n                            x2 = x1 + (x2 - x1) * shortenFactor;\n                            y2 = y1 + (y2 - y1) * shortenFactor;\n                            x3 = x1 + (x3 - x1) * shortenFactor;\n                            y3 = y1 + (y3 - y1) * shortenFactor;\n                            wedge.setAttribute('points', x1 + ',' + y1 + ' ' + x2 + ',' + y2 + ' ' + x3 + ',' + y3);\n                        }\n                    }\n                });\n            }\n        }\n        /*if(enableTextStyling){\n          const textElements = this.shadowRoot?.querySelectorAll('text');\n          if(textElements){\n            textElements.forEach(text =>{\n              if(text instanceof SVGTextElement){\n          //text.style.fill = 'red';\n          //text.style.textShadow = 'red'\n          text.style.textShadow='0 0 5px rgba(255, 255, 255, 0.8)'\n          //text.style.stroke = 'black';\n          //text.style.strokeWidth = '3px';\n          //text.style.background = 'none';\n    \n          const tspans = text?.querySelectorAll('tspan');\n          tspans.forEach(tspan =>{\n            if(tspan instanceof SVGTSpanElement){\n            tspan.style.stroke='rgba(255, 255, 255)';\n            tspan.style.fontWeight='900'\n            //tspan.style.fill='white';\n            tspan.style.strokeWidth='0.5px';\n            //tspan.style.textShadow='0 0 5px rgba(255, 255, 255, 0.8)'\n            }\n          });\n          }\n    \n          })\n         }\n        }\n        if(enableCircleStyling){\n        const mask = this.shadowRoot?.querySelector('mask');\n        if(mask){\n          const circles = mask?.querySelectorAll('circle');\n          if(circles){\n    \n          circles.forEach(circle =>{\n            if(circle instanceof SVGCircleElement){\n            //circle.style.opacity='0';\n            circle.setAttribute(\"r\",\"3\")\n            }\n          })\n          }\n        }\n        }*/\n    }\n    /**\n     * _scrollStreamArea - scroll div to display latest token added\n     */\n    _scrollStreamArea() {\n        var _a;\n        const textArea = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.clabs--chat-molecule-stream-text-content');\n        if (textArea instanceof HTMLElement) {\n            textArea.scrollLeft = textArea.scrollWidth;\n        }\n    }\n    /**\n     * _openFullscreenView -\n     */\n    _openFullscreenView() {\n        this.fullscreenMode = true;\n        window.setTimeout(() => {\n            this._prepareMolecule('fullscreen');\n        }, 200);\n    }\n    /**\n     * _openFullscreenView -\n     */\n    _closeFullscreenView() {\n        this.fullscreenMode = false;\n        //this._prepareMolecule(\"default\");\n    }\n    /**\n     * _handleMouseOut - see if component lost mouse content\n     */\n    _handleMouseOut() {\n        this.isHovered = false;\n    }\n    /**\n     * _handleMouseOut - see if component lost mouse content\n     */\n    _handleMouseOver() {\n        this.isHovered = true;\n    }\n    /**\n     * _openEditorView -\n     */\n    async _openEditorView() {\n        if (this.pubChemUrl) {\n            window === null || window === void 0 ? void 0 : window.open(this.pubChemUrl, '_blank');\n        }\n    }\n    /**\n     * _checkPubChemAvailability - make a call to see if smiles string is available\n     */\n    async checkPubChemAvailability() {\n        try {\n            const pubChemResponse = await fetch('https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/' +\n                encodeURIComponent(this.content) +\n                '/cids/JSON');\n            const data = await pubChemResponse.json();\n            if (data['IdentifierList'] &&\n                data['IdentifierList']['CID'] &&\n                data['IdentifierList']['CID'].length > 0) {\n                const cid = data['IdentifierList']['CID'][0];\n                if (cid) {\n                    this.pubChemUrl = 'https://pubchem.ncbi.nlm.nih.gov/compound/' + cid;\n                }\n            }\n        }\n        catch (pubChemError) {\n            this.pubChemUrl = null;\n        }\n    }\n    /**\n     * _exportImage - if svg, get image object from svg and auto-download\n     */\n    _exportToImage() {\n        window.setTimeout(async () => {\n            var _a;\n            const svgDiv = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('#' + clabsPrefix + '--chat-molecule-' + this._uniqueID);\n            if (svgDiv instanceof SVGElement) {\n                const svgData = new XMLSerializer().serializeToString(svgDiv);\n                const tempCanvas = document.createElement('canvas');\n                const context = tempCanvas.getContext('2d');\n                const svgSize = svgDiv.getBoundingClientRect();\n                tempCanvas.height = svgSize.height;\n                tempCanvas.width = svgSize.width;\n                const tempImage = new Image();\n                /**\n                 * loading function when image is finalized and reqady to download\n                 */\n                tempImage.onload = () => {\n                    context === null || context === void 0 ? void 0 : context.drawImage(tempImage, 0, 0);\n                    const imageData = tempCanvas.toDataURL('image/png');\n                    const canvasDownloadLink = document.createElement('a');\n                    const fileName = this.title ? this.title : 'molecule';\n                    canvasDownloadLink.download = fileName;\n                    canvasDownloadLink.href = imageData;\n                    canvasDownloadLink.click();\n                };\n                tempImage.src = 'data:image/svg+xml;base64,' + btoa(svgData);\n            }\n        }, 200);\n    }\n    /**\n     * Prepare molecular object for rendering from content string\n     * @param {String} mode - which mode to render with smilesDrawer\n     */\n    _prepareMolecule(mode) {\n        var _a, _b;\n        this.loading = false;\n        let targetID = 'clabs--chat-molecule-' + this._uniqueID;\n        const testTargetID = 'clabs--chat-molecule-test-' + this._uniqueID;\n        if (mode === 'fullscreen') {\n            targetID = 'clabs--chat-molecule-fullscreen-' + this._uniqueID;\n        }\n        const canvas = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.getElementById(targetID);\n        const testCanvas = (_b = this.shadowRoot) === null || _b === void 0 ? void 0 : _b.getElementById(testTargetID);\n        const smilesString = this.content.replace(new RegExp('```', 'g'), '');\n        this._smilesContent = smilesString;\n        let renderTest = false;\n        if (canvas instanceof SVGElement && testCanvas instanceof SVGElement) {\n            try {\n                this.temporaryMolecularRenderer.draw(smilesString, testCanvas, this.theme, () => {\n                    renderTest = true;\n                    this.renderSuccessful = true;\n                }, () => {\n                    renderTest = false;\n                });\n            }\n            catch (err) {\n                renderTest = false;\n            }\n        }\n        if (renderTest) {\n            if (this.streaming) {\n                if (!this.renderInProgress) {\n                    this.renderInProgress = true;\n                    this.renderInProgress = false;\n                }\n                else {\n                    return '';\n                }\n            }\n            if (mode === 'fullscreen') {\n                this.fullscreenMolecularRenderer.draw(smilesString, canvas, this.theme, () => {\n                    this.renderInProgress = false;\n                }, () => {\n                    this.renderInProgress = false;\n                });\n            }\n            else {\n                this.molecularRenderer.draw(smilesString, canvas, this.theme, () => {\n                    this.renderInProgress = false;\n                }, () => {\n                    this.renderInProgress = false;\n                });\n            }\n            this.requestUpdate();\n        }\n        return '';\n    }\n}\nmolecularElement.styles = styles;\nexport default molecularElement;\n__decorate([\n    property({ type: String, attribute: 'content', reflect: true })\n], molecularElement.prototype, \"content\", void 0);\n__decorate([\n    property({ type: String, attribute: 'title' })\n], molecularElement.prototype, \"title\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'width' })\n], molecularElement.prototype, \"width\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'height' })\n], molecularElement.prototype, \"height\", void 0);\n__decorate([\n    property({ type: String, attribute: 'theme' })\n], molecularElement.prototype, \"theme\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'streaming' })\n], molecularElement.prototype, \"streaming\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-options' })\n], molecularElement.prototype, \"disableOptions\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-fullscreen' })\n], molecularElement.prototype, \"disableFullscreen\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-export' })\n], molecularElement.prototype, \"disableExport\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'thumbnail-mode' })\n], molecularElement.prototype, \"thumbNailMode\", void 0);\n__decorate([\n    state()\n], molecularElement.prototype, \"isHovered\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-code-inspector' })\n], molecularElement.prototype, \"disableCodeInspector\", void 0);\n__decorate([\n    state()\n], molecularElement.prototype, \"_uniqueID\", void 0);\n__decorate([\n    state()\n], molecularElement.prototype, \"_invalid\", void 0);\n__decorate([\n    state()\n], molecularElement.prototype, \"drawer\", void 0);\n__decorate([\n    state()\n], molecularElement.prototype, \"renderSuccessful\", void 0);\n__decorate([\n    state()\n], molecularElement.prototype, \"loading\", void 0);\n__decorate([\n    state()\n], molecularElement.prototype, \"fullscreenMode\", void 0);\n__decorate([\n    state()\n], molecularElement.prototype, \"_smilesContent\", void 0);\n__decorate([\n    state()\n], molecularElement.prototype, \"_scaling\", void 0);\n__decorate([\n    state()\n], molecularElement.prototype, \"_viewX\", void 0);\n__decorate([\n    state()\n], molecularElement.prototype, \"_viewY\", void 0);\n__decorate([\n    state()\n], molecularElement.prototype, \"pubChemUrl\", void 0);\n__decorate([\n    state()\n], molecularElement.prototype, \"renderInProgress\", void 0);\n"]}