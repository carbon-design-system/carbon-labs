{"version":3,"sources":["components/tagListElement/src/tagListElement.ts","components/tagListElement/src/tagListElement.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","state","styles","tagListElement","constructor","_tagList","_invalid","_errorMessage","isAction","isInLine","selectionIndex","selectedValues","firstUpdated","content","undefined","_prepareTagList","requestUpdate","updated","changedProperties","has","_handleTagClick","event","preventDefault","source","getAttribute","index","tagSelectedEvent","CustomEvent","detail","tagContent","tagLabel","tagIndexInList","selectionList","bubbles","composed","dispatchEvent","tagList","JSON","parse","Array","isArray","stringCheck","every","item","error","items","replace","split","prototype","type","String","attribute","reflect","Boolean"],"mappings":"AAAA;ACCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAI,IAAI,IAAI,IAAI,CAACA,UAAU,IAAK,UAAUC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACnF,IAAIC,CAAC,GAAGC,SAAS,CAACC,MAAM;IAAEC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGH,MAAM,GAAGE,IAAI,KAAK,IAAI,GAAGA,IAAI,GAAGK,MAAM,CAACC,wBAAwB,CAACR,MAAM,EAAEC,GAAG,CAAC,GAAGC,IAAI;IAAEO,CAAC;EAC5H,IAAI,OAAOC,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACC,QAAQ,KAAK,UAAU,EAAEL,CAAC,GAAGI,OAAO,CAACC,QAAQ,CAACZ,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAAC,KAC1H,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE,IAAIH,CAAC,GAAGV,UAAU,CAACa,CAAC,CAAC,EAAEN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACH,CAAC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACT,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,GAAGG,CAAC,CAACT,MAAM,EAAEC,GAAG,CAAC,KAAKK,CAAC;EACjJ,OAAOH,CAAC,GAAG,CAAC,IAAIG,CAAC,IAAIC,MAAM,CAACM,cAAc,CAACb,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,EAAEA,CAAC;AACjE,CAAC;ADJD,SAASQ,UAAU,QAAQ,KAAK;AAChC,SAASC,QAAQ,EAAEC,KAAK,QAAQ,mBAAmB;AAEnD;AAAA;AACA,OAAOC,MAAM,MAAM,yBAA8B;AACjD;ACKA;AACA,GDNA;ACKA;AACA;ADHA,MAAqBC,cAAe,SAAQJ,UAAU,CAAA;EAAtDK,WAAAA,CAAA,EAAA;ICMQ,KAAK,CAAC,GAAGf,SAAS,CAAC;IDJzB;ACMF;AACA;IDHE,IAAA,CAAAgB,QAAQ,GAAU,EAAE;IAEpB;ACIF;AACA;IDDE,IAAA,CAAAC,QAAQ,GAAG,KAAK;IAEhB;ACEF;AACA;IDCE,IAAA,CAAAC,aAAa,GAAG,EAAE;IAclB;ACZF;AACA;IDeE,IAAA,CAAAC,QAAQ,GAAG,IAAI;IAQf;ACpBF;AACA;IDuBE,IAAA,CAAAC,QAAQ,GAAG,IAAI;IAQf;AC5BF;AACA;ID+BE,IAAA,CAAAC,cAAc,GAAG,CAAA,CAAE;IAEnB;AC9BF;AACA;IDiCE,IAAA,CAAAC,cAAc,GAAG,CAAA,CAAE;EA+ErB;EA7EE;AC/BF;EDiCEC,YAAYA,CAAA,EAAA;IACV,IAAI,IAAI,CAACC,OAAO,KAAKC,SAAS,EAAE;MAC9B,IAAI,CAACC,eAAe,CAAA,CAAE;MACtB,IAAI,CAACC,aAAa,CAAA,CAAE;IACtB,CAAC,MAAM;MACL,IAAI,CAACV,QAAQ,GAAG,IAAI;MACpB,IAAI,CAACC,aAAa,GAAG,mCAAmC;MACxD,IAAI,CAACS,aAAa,CAAA,CAAE;IACtB;EACF;EAEA;AC/BF;AACA;EDiCEC,OAAOA,CAACC,iBAAiB,EAAA;IACvB,KAAK,CAACD,OAAO,CAACC,iBAAiB,CAAC;IAChC,IAAIA,iBAAiB,CAACC,GAAG,CAAC,SAAS,CAAC,EAAE;MACpC,IAAI,CAACJ,eAAe,CAAA,CAAE;IACxB;EACF;EAEA;AChCF;AACA;AACA;EDkCEK,eAAeA,CAACC,KAAK,EAAA;IACnBA,KAAK,CAACC,cAAc,CAAA,CAAE;IACtB,MAAMC,MAAM,GAAGF,KAAK,CAACpC,MAAM,CAACuC,YAAY,CAAC,cAAc,CAAC;IACxD,MAAMC,KAAK,GAAGJ,KAAK,CAACpC,MAAM,CAACuC,YAAY,CAAC,YAAY,CAAC;IAErD,IAAI,CAAC,IAAI,CAACd,cAAc,CAACe,KAAK,CAAC,EAAE;MAC/B,IAAI,CAACf,cAAc,CAACe,KAAK,CAAC,GAAG,IAAI;MACjC,IAAI,CAACd,cAAc,CAACc,KAAK,CAAC,GAAGF,MAAM;IACrC,CAAC,MAAM;MACL,OAAO,IAAI,CAACb,cAAc,CAACe,KAAK,CAAC;MACjC,OAAO,IAAI,CAACd,cAAc,CAACc,KAAK,CAAC;IACnC;IACA,MAAMC,gBAAgB,GAAG,IAAIC,WAAW,CAAC,iBAAiB,EAAE;MAC1DC,MAAM,EAAE;QACNC,UAAU,EAAEN,MAAM;QAClBO,QAAQ,EAAEP,MAAM;QAChBQ,cAAc,EAAEN,KAAK;QACrBO,aAAa,EAAE,IAAI,CAACrB;MChChB,CDiCL;MACDsB,OAAO,EAAE,IAAI;MACbC,QAAQ,EAAE;IChCR,CDiCH,CAAC;IACF,IAAI,CAACC,aAAa,CAACT,gBAAgB,CAAC;IACpC,IAAI,CAACV,aAAa,CAAA,CAAE;EACtB;EAEA;ACjCF;AACA;EDmCED,eAAeA,CAAA,EAAA;IACb,IAAI;MACF,MAAMqB,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACzB,OAAO,CAAC;MACxC,IAAI,CAAC0B,KAAK,CAACC,OAAO,CAACJ,OAAO,CAAC,EAAE;QAC3B,IAAI,CAAC9B,QAAQ,GAAG,IAAI;QACpB,IAAI,CAACC,aAAa,GAAG,0CAA0C;MACjE;MACA,MAAMkC,WAAW,GAAGL,OAAO,CAACM,KAAK,CAAEC,IAAI,IAAK,OAAOA,IAAI,KAAK,QAAQ,CAAC;MACrE,IAAI,CAACF,WAAW,EAAE;QAChB,IAAI,CAACnC,QAAQ,GAAG,IAAI;QACpB,IAAI,CAACC,aAAa,GAChB,uDAAuD;MAC3D;MAEA,IAAI,CAACF,QAAQ,GAAG+B,OAAO;IACzB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd;MACA,MAAMC,KAAK,GAAG,IAAI,CAAChC,OAAO,CAACiC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;MACxE,IAAI,CAAC1C,QAAQ,GAAGwC,KAAK;IACvB;EACF;ACjCF;AD9GS1C,cAAA,CAAAD,MAAM,GAAGA,MAAH;ACgHf,eDjHqBC,cAAc;AAMjCpB,UAAA,CAAA,CADCkB,KAAK,CAAA,CAAE,CC+GT,EAAEE,cAAc,CAAC6C,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CD9GxB;AAMrBjE,UAAA,CAAA,CADCkB,KAAK,CAAA,CAAE,CC4GT,EAAEE,cAAc,CAAC6C,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CD3G5B;AAMjBjE,UAAA,CAAA,CADCkB,KAAK,CAAA,CAAE,CCyGT,EAAEE,cAAc,CAAC6C,SAAS,EAAE,eAAe,EAAE,KAAK,CAAC,CDxG/B;AAMnBjE,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAEiD,IAAI,EAAEC,MAAM;EAAEC,SAAS,EAAE,SAAS;EAAEC,OAAO,EAAE;AAAI,CAAE,CAAC,CCsGjE,EAAEjD,cAAc,CAAC6C,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,CDrGpC;AAMRjE,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAEiD,IAAI,EAAEC,MAAM;EAAEC,SAAS,EAAE;AAAa,CAAE,CAAC,CCmGtD,EAAEhD,cAAc,CAAC6C,SAAS,EAAE,YAAY,EAAE,KAAK,CAAC,CDlGpC;AAMXjE,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAEiD,IAAI,EAAEC,MAAM;EAAEC,SAAS,EAAE;AAAW,CAAE,CAAC,CCgGpD,EAAEhD,cAAc,CAAC6C,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CD/F7B;AAMhBjE,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAEiD,IAAI,EAAEC,MAAM;EAAEC,SAAS,EAAE;AAAY,CAAE,CAAC,CC6FrD,EAAEhD,cAAc,CAAC6C,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CD5FpC;AAMVjE,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAEiD,IAAI,EAAEC,MAAM;EAAEC,SAAS,EAAE;AAAW,CAAE,CAAC,CC0FpD,EAAEhD,cAAc,CAAC6C,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CDzF7B;AAMhBjE,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAEiD,IAAI,EAAEI,OAAO;EAAEF,SAAS,EAAE;AAAc,CAAE,CAAC,CCuFxD,EAAEhD,cAAc,CAAC6C,SAAS,EAAE,aAAa,EAAE,KAAK,CAAC,CDtFpC;AAMZjE,UAAA,CAAA,CADCkB,KAAK,CAAA,CAAE,CCoFT,EAAEE,cAAc,CAAC6C,SAAS,EAAE,gBAAgB,EAAE,KAAK,CAAC,CDnF/B;AAMpBjE,UAAA,CAAA,CADCkB,KAAK,CAAA,CAAE,CCiFT,EAAEE,cAAc,CAAC6C,SAAS,EAAE,gBAAgB,EAAE,KAAK,CAAC,CDhF/B","file":"tagListElement.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n\n// @ts-ignore\nimport styles from './tagListElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class tagListElement extends LitElement {\n  static styles = styles;\n  /**\n   * Array of subelements parsed from API reply\n   */\n  @state()\n  _tagList: any[] = [];\n\n  /**\n   * Error state value\n   */\n  @state()\n  _invalid = false;\n\n  /**\n   * Error state value\n   */\n  @state()\n  _errorMessage = '';\n\n  /**\n   * Array of subelements parsed from API reply\n   */\n  @property({ type: String, attribute: 'content', reflect: true })\n  content;\n\n  /**\n   * ActionIcon - dictate which icon to use for action\n   */\n  @property({ type: String, attribute: 'action-icon' })\n  actionIcon;\n\n  /**\n   * isAction - use quick action buttons\n   */\n  @property({ type: String, attribute: 'is-action' })\n  isAction = true;\n\n  /**\n   * MonoLabel - singulat label for all buttons\n   */\n  @property({ type: String, attribute: 'mono-label' })\n  monoLabel;\n\n  /**\n   * isInLine - place buttons using flex\n   */\n  @property({ type: String, attribute: 'is-inline' })\n  isInLine = true;\n\n  /**\n   * multi - allow multi-selections\n   */\n  @property({ type: Boolean, attribute: 'multi-select' })\n  multiSelect;\n\n  /**\n   * selectionIndex - array of active tags when selected\n   */\n  @state()\n  selectionIndex = {};\n\n  /**\n   * selectedValues - array of selected values in list\n   */\n  @state()\n  selectedValues = {};\n\n  /** detect when component is rendered to process visualization specification object\n   */\n  firstUpdated() {\n    if (this.content !== undefined) {\n      this._prepareTagList();\n      this.requestUpdate();\n    } else {\n      this._invalid = true;\n      this._errorMessage = 'TagList: Content is empty string.';\n      this.requestUpdate();\n    }\n  }\n\n  /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has('content')) {\n      this._prepareTagList();\n    }\n  }\n\n  /**\n   * _handleTagClick - send event to parent when tag is selected\n   * @param {object} event - tag click event\n   */\n  _handleTagClick(event) {\n    event.preventDefault();\n    const source = event.target.getAttribute('data-content');\n    const index = event.target.getAttribute('data-index');\n\n    if (!this.selectionIndex[index]) {\n      this.selectionIndex[index] = true;\n      this.selectedValues[index] = source;\n    } else {\n      delete this.selectionIndex[index];\n      delete this.selectedValues[index];\n    }\n    const tagSelectedEvent = new CustomEvent('on-tag-selected', {\n      detail: {\n        tagContent: source,\n        tagLabel: source,\n        tagIndexInList: index,\n        selectionList: this.selectedValues,\n      },\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(tagSelectedEvent);\n    this.requestUpdate();\n  }\n\n  /**\n   * _prepareTagList - check if content string is a proper array of values\n   */\n  _prepareTagList() {\n    try {\n      const tagList = JSON.parse(this.content);\n      if (!Array.isArray(tagList)) {\n        this._invalid = true;\n        this._errorMessage = 'TagList: Parsed content is not an array.';\n      }\n      const stringCheck = tagList.every((item) => typeof item === 'string');\n      if (!stringCheck) {\n        this._invalid = true;\n        this._errorMessage =\n          'TagList: Content array contains a non-string element.';\n      }\n\n      this._tagList = tagList;\n    } catch (error) {\n      //attempt to fix array:\n      const items = this.content.replace(/\"/g, '').replace('[', '').split(',');\n      this._tagList = items;\n    }\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n// @ts-ignore\nimport styles from './tagListElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass tagListElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Array of subelements parsed from API reply\n         */\n        this._tagList = [];\n        /**\n         * Error state value\n         */\n        this._invalid = false;\n        /**\n         * Error state value\n         */\n        this._errorMessage = '';\n        /**\n         * isAction - use quick action buttons\n         */\n        this.isAction = true;\n        /**\n         * isInLine - place buttons using flex\n         */\n        this.isInLine = true;\n        /**\n         * selectionIndex - array of active tags when selected\n         */\n        this.selectionIndex = {};\n        /**\n         * selectedValues - array of selected values in list\n         */\n        this.selectedValues = {};\n    }\n    /** detect when component is rendered to process visualization specification object\n     */\n    firstUpdated() {\n        if (this.content !== undefined) {\n            this._prepareTagList();\n            this.requestUpdate();\n        }\n        else {\n            this._invalid = true;\n            this._errorMessage = 'TagList: Content is empty string.';\n            this.requestUpdate();\n        }\n    }\n    /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('content')) {\n            this._prepareTagList();\n        }\n    }\n    /**\n     * _handleTagClick - send event to parent when tag is selected\n     * @param {object} event - tag click event\n     */\n    _handleTagClick(event) {\n        event.preventDefault();\n        const source = event.target.getAttribute('data-content');\n        const index = event.target.getAttribute('data-index');\n        if (!this.selectionIndex[index]) {\n            this.selectionIndex[index] = true;\n            this.selectedValues[index] = source;\n        }\n        else {\n            delete this.selectionIndex[index];\n            delete this.selectedValues[index];\n        }\n        const tagSelectedEvent = new CustomEvent('on-tag-selected', {\n            detail: {\n                tagContent: source,\n                tagLabel: source,\n                tagIndexInList: index,\n                selectionList: this.selectedValues,\n            },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(tagSelectedEvent);\n        this.requestUpdate();\n    }\n    /**\n     * _prepareTagList - check if content string is a proper array of values\n     */\n    _prepareTagList() {\n        try {\n            const tagList = JSON.parse(this.content);\n            if (!Array.isArray(tagList)) {\n                this._invalid = true;\n                this._errorMessage = 'TagList: Parsed content is not an array.';\n            }\n            const stringCheck = tagList.every((item) => typeof item === 'string');\n            if (!stringCheck) {\n                this._invalid = true;\n                this._errorMessage =\n                    'TagList: Content array contains a non-string element.';\n            }\n            this._tagList = tagList;\n        }\n        catch (error) {\n            //attempt to fix array:\n            const items = this.content.replace(/\"/g, '').replace('[', '').split(',');\n            this._tagList = items;\n        }\n    }\n}\ntagListElement.styles = styles;\nexport default tagListElement;\n__decorate([\n    state()\n], tagListElement.prototype, \"_tagList\", void 0);\n__decorate([\n    state()\n], tagListElement.prototype, \"_invalid\", void 0);\n__decorate([\n    state()\n], tagListElement.prototype, \"_errorMessage\", void 0);\n__decorate([\n    property({ type: String, attribute: 'content', reflect: true })\n], tagListElement.prototype, \"content\", void 0);\n__decorate([\n    property({ type: String, attribute: 'action-icon' })\n], tagListElement.prototype, \"actionIcon\", void 0);\n__decorate([\n    property({ type: String, attribute: 'is-action' })\n], tagListElement.prototype, \"isAction\", void 0);\n__decorate([\n    property({ type: String, attribute: 'mono-label' })\n], tagListElement.prototype, \"monoLabel\", void 0);\n__decorate([\n    property({ type: String, attribute: 'is-inline' })\n], tagListElement.prototype, \"isInLine\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'multi-select' })\n], tagListElement.prototype, \"multiSelect\", void 0);\n__decorate([\n    state()\n], tagListElement.prototype, \"selectionIndex\", void 0);\n__decorate([\n    state()\n], tagListElement.prototype, \"selectedValues\", void 0);\n"]}