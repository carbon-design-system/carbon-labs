{"version":3,"sources":["components/textElement/src/textElement.ts","components/textElement/src/textElement.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","state","styles","textElement","constructor","enableHtmlRendering","disableNewLines","_textElements","textSubElements","_showSummarization","_translationRegistry","_animationList","firstUpdated","_a","content","_formatText","hasAttribute","disableChevrons","style","setProperty","textHighlightColor","updated","changedProperties","has","_updateHighlightTarget","event","carouselIndex","detail","currentIndex","foundItem","find","item","annotationIndex","forEach","element","active","registryID","subElementIndex","requestUpdate","_toggleSummarization","selectedAnnotationIndex","trueAnnotationIndex","setTimeout","_handleAnnotationClick","_b","targetElement","originalTarget","srcElement","source","dataset","index","annotationClickEventDetails","originalEvent","annotationContent","indexInElementsArray","elementsArray","elementIndex","parseInt","text","_annotationURLs","_arrangeSources","_annotationIndex","annotationClickEvent","CustomEvent","bubbles","composed","dispatchEvent","split","_capitalizeText","lines","capitalizedLines","map","line","trimStart","charAt","toUpperCase","slice","join","annotationRegex","RegExp","temporaryAnnotationList","temporaryTextArray","regexResult","inputText","newLines","trim","newLine","exec","push","type","checkHtmlContent","_checkForHTML","textType","currentLine","capitalize","streaming","prevObject","_annotationList","_animateFadeIn","animationList","words","word","HTMlRegex","test","_formatTextOld","slicedTextArray","k","match","annotatedSentence","lastIndex","finalizedText","linkRegex","lastSentence","String","attribute","reflect","prototype","Boolean","Array"],"mappings":"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","file":"textElement.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n\n// @ts-ignore\nimport styles from './textElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nexport default class textElement extends LitElement {\n  static styles = styles;\n\n  /**\n   * Content text to display in textElement\n   */\n  @property({ type: String, attribute: 'content', reflect: true })\n  content;\n\n  /**\n   * Content text to display in textElement\n   */\n  @property({ type: Boolean, attribute: 'align-right' })\n  alignRight;\n\n  /**\n   * Capitalization boolean to edit AI returned text or not\n   */\n  @property({ type: Boolean, attribute: 'capitalize' })\n  capitalize;\n\n  /**\n   * Highlight color chosen by user\n   */\n  @property({ type: String, attribute: 'text-highlight-color' })\n  textHighlightColor;\n\n  /**\n   * Annotation boolean to append citation events/styling\n   */\n  @property({ type: Boolean, attribute: 'enable-annotations' })\n  enableAnnotations;\n\n  /**\n   * remove all chevrons and dropdowns, put carousel at the end\n   */\n  @property({ type: Boolean, attribute: 'enable-summarization' })\n  enableSummarization;\n\n  /**\n   * html boolean to render html content (TEMPORARY, for experimental use only)\n   */\n  @property({ type: Boolean, attribute: 'enable-html-rendering' })\n  enableHtmlRendering = false;\n\n  /**\n   * enableTextHighlighting - show colored background for text\n   */\n  @property({ type: Boolean, attribute: 'enable-text-highlighting' })\n  enableTextHighlighting;\n\n  /**\n   * Newline boolean to disable splitting text by newlines\n   */\n  @property({ type: Boolean, attribute: 'disable-new-lines' })\n  disableNewLines = false;\n\n  /**\n   * Feedback mode is enabled\n   */\n  @property({ type: Boolean, attribute: 'enable-complex-feedback' })\n  enableComplexFeedback;\n\n  /**\n   * Hide chevron buttons\n   */\n  @property({ type: Boolean, attribute: 'disable-chevrons' })\n  disableChevrons;\n\n  /**\n   * Internal element array to be rendered\n   */\n  @state()\n  _textElements: {\n    text: string;\n    type: string;\n    active: boolean;\n    content: string;\n  }[] = [];\n\n  /**\n   * External element array to be rendered\n   */\n  @property({ type: Array, attribute: 'textSubElements' })\n  textSubElements: {\n    text: string;\n    type: string;\n    active: boolean;\n    content: string;\n    color: string;\n  }[] = [];\n\n  /**\n   * highlightCard data url\n   */\n  @state()\n  _annotationURLs;\n\n  /**\n   * annotation url list\n   */\n  @state()\n  _annotationList;\n\n  /**\n   * target annotation index\n   */\n  @state()\n  _annotationIndex;\n\n  /**\n   * show summarizations or not\n   */\n  @state()\n  _showSummarization = false;\n\n  /**\n   * translate textpiece ids to annotation IDs\n   */\n  @state()\n  _translationRegistry: { annotationIndex: number; subElementIndex: number }[] =\n    [];\n\n  /**\n   * selected annotation index in order of appearence\n   */\n  @state()\n  selectedAnnotationIndex;\n\n  /**\n   * Streaming flag from message parent\n   */\n  @property({ type: Boolean, attribute: 'streaming' })\n  streaming;\n\n  /**\n   * Spliced sub element list of plain text to fade in text\n   */\n  @state()\n  _animationList: {\n    text: string;\n    type: string;\n    active: boolean;\n    content: string;\n    color: string;\n  }[] = [];\n\n  /** detect when component is rendered to process text object\n   */\n  firstUpdated() {\n    if (this.textSubElements?.length > 1) {\n      this._textElements = this.textSubElements;\n    } else {\n      if (this.content) {\n        this._formatText();\n      }\n    }\n\n    if (this.hasAttribute('enable-summarization')) {\n      this.disableChevrons = true;\n    }\n\n    if (this.hasAttribute('text-highlight-color')) {\n      this.style.setProperty(\n        '--chat-text-element-highlight-color',\n        this.textHighlightColor\n      );\n    }\n\n    this.style.setProperty(\n      '--chat-text-content-annotation-element-height',\n      '0px'\n    );\n  }\n\n  /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n   * @param {Object} changedProperties - returned inner DOM update object\n   **/\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (\n      changedProperties.has('content') &&\n      !(this.textSubElements.length > 0)\n    ) {\n      this._formatText();\n    }\n  }\n\n  /** updateHighlightTarget - when the carousel element returns a change event, update current highlight\n   * @param {event} event - slide event\n   */\n  _updateHighlightTarget(event) {\n    const carouselIndex = event?.detail?.currentIndex;\n    if (carouselIndex >= 0) {\n      const foundItem = this._translationRegistry.find(\n        (item) => item.annotationIndex === carouselIndex + 1\n      );\n\n      this._textElements.forEach((element) => {\n        element.active = false;\n      });\n      if (foundItem || foundItem === 0) {\n        const registryID = foundItem.subElementIndex;\n        if (typeof registryID === 'number') {\n          this._textElements[registryID - 1].active = true;\n        }\n      }\n\n      this.requestUpdate();\n    }\n  }\n\n  /**\n   * _toggleSummarization - toggle whether to show summarization or not\n   */\n  _toggleSummarization() {\n    this._showSummarization = !this._showSummarization;\n    if (!this._showSummarization) {\n      this._textElements.forEach((element) => {\n        element.active = false;\n      });\n    } else {\n      if (!this.selectedAnnotationIndex) {\n        this.selectedAnnotationIndex = 0;\n      }\n      const trueAnnotationIndex = this.selectedAnnotationIndex + 1;\n      const foundItem = this._translationRegistry.find(\n        (item) => item.annotationIndex === trueAnnotationIndex\n      );\n      if (foundItem) {\n        const registryID = foundItem.subElementIndex;\n        if (typeof registryID === 'number') {\n          this._textElements[registryID - 1].active = true;\n          setTimeout(() => {\n            this.style.setProperty(\n              '--chat-text-content-annotation-element-height',\n              '400px'\n            );\n          }, 20);\n        }\n      }\n    }\n  }\n\n  /** _handleAnnotationClick - open and load Card element when annotation dropdown clicked\n   * @param {event} event - click event\n   */\n  _handleAnnotationClick(event) {\n    const targetElement =\n      event?.originalTarget || event?.target || event?.srcElement;\n    const source = targetElement?.dataset?.source;\n    this.style.setProperty(\n      '--chat-text-content-annotation-element-height',\n      '0px'\n    );\n\n    const index = targetElement?.dataset?.index;\n\n    const annotationClickEventDetails = {\n      originalEvent: event,\n      annotationContent: source,\n      indexInElementsArray: index,\n      elementsArray: this._textElements,\n    };\n    if (index) {\n      this._textElements.forEach((element, elementIndex) => {\n        if (elementIndex !== parseInt(index)) {\n          element.active = false;\n        }\n      });\n      this._textElements[parseInt(index)].active =\n        !this._textElements[parseInt(index)].active;\n\n      if (this._textElements[parseInt(index)].active) {\n        annotationClickEventDetails['action'] = 'annotation popup closed';\n        this._showSummarization = true;\n      } else {\n        annotationClickEventDetails['action'] = 'annotation popup opened';\n        this._showSummarization = false;\n      }\n      annotationClickEventDetails['isOpened'] =\n        this._textElements[parseInt(index)].active;\n      annotationClickEventDetails['textContent'] =\n        this._textElements[parseInt(index)].text;\n\n      if (this._textElements[parseInt(index)].active) {\n        if (source) {\n          this._annotationURLs = this._arrangeSources(source);\n          setTimeout(() => {\n            this.style.setProperty(\n              '--chat-text-content-annotation-element-height',\n              '400px'\n            );\n          }, 20);\n          this._annotationIndex = parseInt(index);\n        } else {\n          this._annotationURLs = null;\n          this._annotationIndex = null;\n        }\n      } else {\n        this._annotationURLs = null;\n        this._annotationIndex = null;\n      }\n\n      const foundItem = this._translationRegistry.find(\n        (item) => item.subElementIndex === parseInt(index) + 1\n      );\n      if (typeof foundItem?.annotationIndex === 'number') {\n        if (foundItem) {\n          this.selectedAnnotationIndex = foundItem.annotationIndex - 1;\n          this.requestUpdate();\n        }\n      }\n    }\n\n    const annotationClickEvent = new CustomEvent('on-text-annotation-click', {\n      detail: annotationClickEventDetails,\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(annotationClickEvent);\n  }\n\n  /** _arrangeSources - cut content into array of sources\n   * @param {string} content - string content to be sliced\n   */\n  _arrangeSources(content) {\n    return content.split(',');\n  }\n\n  /** _capitalizeText - capitalize incoming string when flag is enabled\n   * @param {string} text - text to capitalize and return\n   */\n  _capitalizeText(text) {\n    const lines = text.split(/(?<=[.!?]\\s)|(?<=\\n)/g);\n    const capitalizedLines = lines.map(\n      (line) =>\n        line.trimStart().charAt(0).toUpperCase() + line.trimStart().slice(1)\n    );\n    return capitalizedLines.join('');\n  }\n\n  /** _formatText - slice text content when markdowns are detected\n   */\n  _formatText() {\n    const annotationRegex = new RegExp(\n      '(\\\\[([^\\\\]]+)\\\\]\\\\(([^)]+)\\\\))|([^\\\\[]+)',\n      'g'\n    );\n    const temporaryAnnotationList: string[] = [];\n    const temporaryTextArray: {\n      text: string;\n      type: string;\n      active: boolean;\n      content: string;\n    }[] = [];\n    let regexResult;\n    const inputText = this.content;\n    const newLines = inputText.trim().split('\\n');\n    for (const newLine of newLines) {\n      while ((regexResult = annotationRegex.exec(newLine)) != null) {\n        if (regexResult[1]) {\n          temporaryTextArray.push({\n            text: regexResult[2],\n            type: 'annotation',\n            content: regexResult[3],\n            active: false,\n          });\n          temporaryAnnotationList.push(regexResult[3]);\n          this._translationRegistry.push({\n            annotationIndex: temporaryAnnotationList.length,\n            subElementIndex: temporaryTextArray.length,\n          });\n        } else if (regexResult[4]) {\n          const checkHtmlContent = this._checkForHTML(regexResult[4]);\n          const textType = checkHtmlContent ? 'html' : 'default';\n          const currentLine = regexResult[4];\n          temporaryTextArray.push({\n            text: this.capitalize\n              ? this._capitalizeText(currentLine)\n              : currentLine,\n            type: textType,\n            active: false,\n            content: '',\n          });\n        }\n      }\n      if (!this.disableNewLines && !this.streaming) {\n        if (temporaryTextArray.length > 1) {\n          if (temporaryTextArray[temporaryTextArray.length - 1]) {\n            const prevObject =\n              temporaryTextArray[temporaryTextArray.length - 1];\n            if (prevObject?.type === 'new-line') {\n              continue;\n            }\n          }\n        }\n        temporaryTextArray.push({\n          text: '',\n          type: 'new-line',\n          active: false,\n          content: '',\n        });\n      }\n    }\n    this._annotationList = temporaryAnnotationList;\n    if (this.streaming) {\n      this._animateFadeIn(temporaryTextArray);\n    } else {\n      if (this._annotationList.length > 0) {\n        //this.enableSummarization = true;\n        //this.disableChevrons = true;\n      }\n      this._textElements = temporaryTextArray;\n    }\n  }\n\n  /**\n   * _animateFadeIn() - bring in new text one by one\n   * @param { object } temporaryTextArray - array of text elements\n   */\n  _animateFadeIn(temporaryTextArray) {\n    const animationList: {\n      text: string;\n      type: string;\n      active: boolean;\n      content: string;\n    }[] = [];\n    for (const item of temporaryTextArray) {\n      if (item.type === 'default') {\n        const words = item.text.split(' ');\n        for (const word of words) {\n          animationList.push({\n            text: word + ' ',\n            type: 'default',\n            content: '',\n            active: false,\n          });\n        }\n      } else {\n        animationList.push(item);\n      }\n    }\n    this._textElements = animationList;\n  }\n\n  /**\n   * _checkForHTML - see if complete html is present in text block\n   * @param {string} text - text to be checked for html tags\n   */\n  _checkForHTML(text) {\n    //const HTMlRegex = new RegExp('^<([a-z]+)([^<]+)*(?:>(.*)<\\\\/\\\\1>|\\\\s+\\\\/>)$');\n    //const HTMlRegex = new RegExp('^<\\s*[a-zA-Z]+,*?>')\n    const HTMlRegex = new RegExp('<[^>]+>', 'g');\n    //const HTMlRegex = new RegExp('^([a-zA-Z][a-zA-Z0-9]*)\\\\b[^>]*>(?:[^<]*(?:[^<]*(?:<([a-zA-Z][a-zA-Z0-9]*)\\\\b[^>]|*>[^<]*<\\\\/\\\\2>)*[^<]*)*<\\\\/\\\\1>$')\n    return HTMlRegex.test(text);\n  }\n  /** _formatTextOld - slice text content when markdowns are detected\n   */\n  _formatTextOld() {\n    const temporaryTextArray: {\n      text: string;\n      type: string;\n      active: boolean;\n      content: string;\n    }[] = [];\n    //const annotationRegex = new RegExp('(.*?)\\\\[([^\\\\[]+)\\\\]\\\\(([^\\\\)]+)\\\\)','g');\n    //const annotationRegex = new RegExp(\"(.*?)(?:\\\\[([^\\\\[]+)\\\\])\\\\(([^)]+)\\\\)\",\"g\");\n    //const annotationRegex = new RegExp('\\\\[([^\\\\]]+)\\\\]\\\\(([^)]+)\\\\)', 'g');\n    const annotationRegex = new RegExp(\n      '\\\\[([^\\\\]]+)\\\\]\\\\(((?:[^)(]+|\\\\([^)]+\\\\))*)\\\\)',\n      'g'\n    );\n    //const annotationRegex = new RegExp('\\\\[([^\\\\]]+)\\\\]\\\\(([^)]+)\\\\)','g')\n    const inputText = this.content;\n    const slicedTextArray = this.disableNewLines\n      ? [inputText]\n      : inputText.split('\\n');\n\n    for (let k = 0; k < slicedTextArray.length; k++) {\n      let match;\n      const annotatedSentence = slicedTextArray[k];\n      let lastIndex = 0;\n      while ((match = annotationRegex.exec(annotatedSentence)) !== null) {\n        if (match.index > lastIndex) {\n          const finalizedText = annotatedSentence.slice(lastIndex, match.index);\n          temporaryTextArray.push({\n            text: this.capitalize\n              ? this._capitalizeText(finalizedText)\n              : finalizedText,\n            type: 'default',\n            active: false,\n            content: '',\n          });\n        }\n        const linkRegex = new RegExp('^https?:\\\\/\\\\/\\\\S+$');\n\n        temporaryTextArray.push({\n          text: match[1],\n          type: linkRegex.test(match[2]) ? 'link' : 'annotation',\n          content: match[2],\n          active: false,\n        });\n        lastIndex = annotationRegex.lastIndex;\n      }\n      if (lastIndex < annotatedSentence.length) {\n        const lastSentence = annotatedSentence.slice(lastIndex);\n        temporaryTextArray.push({\n          text: this.capitalize\n            ? this._capitalizeText(lastSentence)\n            : lastSentence,\n          type: 'default',\n          content: '',\n          active: false,\n        });\n      }\n    }\n    this._textElements = temporaryTextArray;\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\n// @ts-ignore\nimport styles from './textElement.scss?inline';\n/**\n * Input component using search typeahead api\n */\nclass textElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * html boolean to render html content (TEMPORARY, for experimental use only)\n         */\n        this.enableHtmlRendering = false;\n        /**\n         * Newline boolean to disable splitting text by newlines\n         */\n        this.disableNewLines = false;\n        /**\n         * Internal element array to be rendered\n         */\n        this._textElements = [];\n        /**\n         * External element array to be rendered\n         */\n        this.textSubElements = [];\n        /**\n         * show summarizations or not\n         */\n        this._showSummarization = false;\n        /**\n         * translate textpiece ids to annotation IDs\n         */\n        this._translationRegistry = [];\n        /**\n         * Spliced sub element list of plain text to fade in text\n         */\n        this._animationList = [];\n    }\n    /** detect when component is rendered to process text object\n     */\n    firstUpdated() {\n        var _a;\n        if (((_a = this.textSubElements) === null || _a === void 0 ? void 0 : _a.length) > 1) {\n            this._textElements = this.textSubElements;\n        }\n        else {\n            if (this.content) {\n                this._formatText();\n            }\n        }\n        if (this.hasAttribute('enable-summarization')) {\n            this.disableChevrons = true;\n        }\n        if (this.hasAttribute('text-highlight-color')) {\n            this.style.setProperty('--chat-text-element-highlight-color', this.textHighlightColor);\n        }\n        this.style.setProperty('--chat-text-content-annotation-element-height', '0px');\n    }\n    /** updated - internal LIT function to detect updates to the DOM tree, used to auto update the specification attribute\n     * @param {Object} changedProperties - returned inner DOM update object\n     **/\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('content') &&\n            !(this.textSubElements.length > 0)) {\n            this._formatText();\n        }\n    }\n    /** updateHighlightTarget - when the carousel element returns a change event, update current highlight\n     * @param {event} event - slide event\n     */\n    _updateHighlightTarget(event) {\n        var _a;\n        const carouselIndex = (_a = event === null || event === void 0 ? void 0 : event.detail) === null || _a === void 0 ? void 0 : _a.currentIndex;\n        if (carouselIndex >= 0) {\n            const foundItem = this._translationRegistry.find((item) => item.annotationIndex === carouselIndex + 1);\n            this._textElements.forEach((element) => {\n                element.active = false;\n            });\n            if (foundItem || foundItem === 0) {\n                const registryID = foundItem.subElementIndex;\n                if (typeof registryID === 'number') {\n                    this._textElements[registryID - 1].active = true;\n                }\n            }\n            this.requestUpdate();\n        }\n    }\n    /**\n     * _toggleSummarization - toggle whether to show summarization or not\n     */\n    _toggleSummarization() {\n        this._showSummarization = !this._showSummarization;\n        if (!this._showSummarization) {\n            this._textElements.forEach((element) => {\n                element.active = false;\n            });\n        }\n        else {\n            if (!this.selectedAnnotationIndex) {\n                this.selectedAnnotationIndex = 0;\n            }\n            const trueAnnotationIndex = this.selectedAnnotationIndex + 1;\n            const foundItem = this._translationRegistry.find((item) => item.annotationIndex === trueAnnotationIndex);\n            if (foundItem) {\n                const registryID = foundItem.subElementIndex;\n                if (typeof registryID === 'number') {\n                    this._textElements[registryID - 1].active = true;\n                    setTimeout(() => {\n                        this.style.setProperty('--chat-text-content-annotation-element-height', '400px');\n                    }, 20);\n                }\n            }\n        }\n    }\n    /** _handleAnnotationClick - open and load Card element when annotation dropdown clicked\n     * @param {event} event - click event\n     */\n    _handleAnnotationClick(event) {\n        var _a, _b;\n        const targetElement = (event === null || event === void 0 ? void 0 : event.originalTarget) || (event === null || event === void 0 ? void 0 : event.target) || (event === null || event === void 0 ? void 0 : event.srcElement);\n        const source = (_a = targetElement === null || targetElement === void 0 ? void 0 : targetElement.dataset) === null || _a === void 0 ? void 0 : _a.source;\n        this.style.setProperty('--chat-text-content-annotation-element-height', '0px');\n        const index = (_b = targetElement === null || targetElement === void 0 ? void 0 : targetElement.dataset) === null || _b === void 0 ? void 0 : _b.index;\n        const annotationClickEventDetails = {\n            originalEvent: event,\n            annotationContent: source,\n            indexInElementsArray: index,\n            elementsArray: this._textElements,\n        };\n        if (index) {\n            this._textElements.forEach((element, elementIndex) => {\n                if (elementIndex !== parseInt(index)) {\n                    element.active = false;\n                }\n            });\n            this._textElements[parseInt(index)].active =\n                !this._textElements[parseInt(index)].active;\n            if (this._textElements[parseInt(index)].active) {\n                annotationClickEventDetails['action'] = 'annotation popup closed';\n                this._showSummarization = true;\n            }\n            else {\n                annotationClickEventDetails['action'] = 'annotation popup opened';\n                this._showSummarization = false;\n            }\n            annotationClickEventDetails['isOpened'] =\n                this._textElements[parseInt(index)].active;\n            annotationClickEventDetails['textContent'] =\n                this._textElements[parseInt(index)].text;\n            if (this._textElements[parseInt(index)].active) {\n                if (source) {\n                    this._annotationURLs = this._arrangeSources(source);\n                    setTimeout(() => {\n                        this.style.setProperty('--chat-text-content-annotation-element-height', '400px');\n                    }, 20);\n                    this._annotationIndex = parseInt(index);\n                }\n                else {\n                    this._annotationURLs = null;\n                    this._annotationIndex = null;\n                }\n            }\n            else {\n                this._annotationURLs = null;\n                this._annotationIndex = null;\n            }\n            const foundItem = this._translationRegistry.find((item) => item.subElementIndex === parseInt(index) + 1);\n            if (typeof (foundItem === null || foundItem === void 0 ? void 0 : foundItem.annotationIndex) === 'number') {\n                if (foundItem) {\n                    this.selectedAnnotationIndex = foundItem.annotationIndex - 1;\n                    this.requestUpdate();\n                }\n            }\n        }\n        const annotationClickEvent = new CustomEvent('on-text-annotation-click', {\n            detail: annotationClickEventDetails,\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(annotationClickEvent);\n    }\n    /** _arrangeSources - cut content into array of sources\n     * @param {string} content - string content to be sliced\n     */\n    _arrangeSources(content) {\n        return content.split(',');\n    }\n    /** _capitalizeText - capitalize incoming string when flag is enabled\n     * @param {string} text - text to capitalize and return\n     */\n    _capitalizeText(text) {\n        const lines = text.split(/(?<=[.!?]\\s)|(?<=\\n)/g);\n        const capitalizedLines = lines.map((line) => line.trimStart().charAt(0).toUpperCase() + line.trimStart().slice(1));\n        return capitalizedLines.join('');\n    }\n    /** _formatText - slice text content when markdowns are detected\n     */\n    _formatText() {\n        const annotationRegex = new RegExp('(\\\\[([^\\\\]]+)\\\\]\\\\(([^)]+)\\\\))|([^\\\\[]+)', 'g');\n        const temporaryAnnotationList = [];\n        const temporaryTextArray = [];\n        let regexResult;\n        const inputText = this.content;\n        const newLines = inputText.trim().split('\\n');\n        for (const newLine of newLines) {\n            while ((regexResult = annotationRegex.exec(newLine)) != null) {\n                if (regexResult[1]) {\n                    temporaryTextArray.push({\n                        text: regexResult[2],\n                        type: 'annotation',\n                        content: regexResult[3],\n                        active: false,\n                    });\n                    temporaryAnnotationList.push(regexResult[3]);\n                    this._translationRegistry.push({\n                        annotationIndex: temporaryAnnotationList.length,\n                        subElementIndex: temporaryTextArray.length,\n                    });\n                }\n                else if (regexResult[4]) {\n                    const checkHtmlContent = this._checkForHTML(regexResult[4]);\n                    const textType = checkHtmlContent ? 'html' : 'default';\n                    const currentLine = regexResult[4];\n                    temporaryTextArray.push({\n                        text: this.capitalize\n                            ? this._capitalizeText(currentLine)\n                            : currentLine,\n                        type: textType,\n                        active: false,\n                        content: '',\n                    });\n                }\n            }\n            if (!this.disableNewLines && !this.streaming) {\n                if (temporaryTextArray.length > 1) {\n                    if (temporaryTextArray[temporaryTextArray.length - 1]) {\n                        const prevObject = temporaryTextArray[temporaryTextArray.length - 1];\n                        if ((prevObject === null || prevObject === void 0 ? void 0 : prevObject.type) === 'new-line') {\n                            continue;\n                        }\n                    }\n                }\n                temporaryTextArray.push({\n                    text: '',\n                    type: 'new-line',\n                    active: false,\n                    content: '',\n                });\n            }\n        }\n        this._annotationList = temporaryAnnotationList;\n        if (this.streaming) {\n            this._animateFadeIn(temporaryTextArray);\n        }\n        else {\n            if (this._annotationList.length > 0) {\n                //this.enableSummarization = true;\n                //this.disableChevrons = true;\n            }\n            this._textElements = temporaryTextArray;\n        }\n    }\n    /**\n     * _animateFadeIn() - bring in new text one by one\n     * @param { object } temporaryTextArray - array of text elements\n     */\n    _animateFadeIn(temporaryTextArray) {\n        const animationList = [];\n        for (const item of temporaryTextArray) {\n            if (item.type === 'default') {\n                const words = item.text.split(' ');\n                for (const word of words) {\n                    animationList.push({\n                        text: word + ' ',\n                        type: 'default',\n                        content: '',\n                        active: false,\n                    });\n                }\n            }\n            else {\n                animationList.push(item);\n            }\n        }\n        this._textElements = animationList;\n    }\n    /**\n     * _checkForHTML - see if complete html is present in text block\n     * @param {string} text - text to be checked for html tags\n     */\n    _checkForHTML(text) {\n        //const HTMlRegex = new RegExp('^<([a-z]+)([^<]+)*(?:>(.*)<\\\\/\\\\1>|\\\\s+\\\\/>)$');\n        //const HTMlRegex = new RegExp('^<\\s*[a-zA-Z]+,*?>')\n        const HTMlRegex = new RegExp('<[^>]+>', 'g');\n        //const HTMlRegex = new RegExp('^([a-zA-Z][a-zA-Z0-9]*)\\\\b[^>]*>(?:[^<]*(?:[^<]*(?:<([a-zA-Z][a-zA-Z0-9]*)\\\\b[^>]|*>[^<]*<\\\\/\\\\2>)*[^<]*)*<\\\\/\\\\1>$')\n        return HTMlRegex.test(text);\n    }\n    /** _formatTextOld - slice text content when markdowns are detected\n     */\n    _formatTextOld() {\n        const temporaryTextArray = [];\n        //const annotationRegex = new RegExp('(.*?)\\\\[([^\\\\[]+)\\\\]\\\\(([^\\\\)]+)\\\\)','g');\n        //const annotationRegex = new RegExp(\"(.*?)(?:\\\\[([^\\\\[]+)\\\\])\\\\(([^)]+)\\\\)\",\"g\");\n        //const annotationRegex = new RegExp('\\\\[([^\\\\]]+)\\\\]\\\\(([^)]+)\\\\)', 'g');\n        const annotationRegex = new RegExp('\\\\[([^\\\\]]+)\\\\]\\\\(((?:[^)(]+|\\\\([^)]+\\\\))*)\\\\)', 'g');\n        //const annotationRegex = new RegExp('\\\\[([^\\\\]]+)\\\\]\\\\(([^)]+)\\\\)','g')\n        const inputText = this.content;\n        const slicedTextArray = this.disableNewLines\n            ? [inputText]\n            : inputText.split('\\n');\n        for (let k = 0; k < slicedTextArray.length; k++) {\n            let match;\n            const annotatedSentence = slicedTextArray[k];\n            let lastIndex = 0;\n            while ((match = annotationRegex.exec(annotatedSentence)) !== null) {\n                if (match.index > lastIndex) {\n                    const finalizedText = annotatedSentence.slice(lastIndex, match.index);\n                    temporaryTextArray.push({\n                        text: this.capitalize\n                            ? this._capitalizeText(finalizedText)\n                            : finalizedText,\n                        type: 'default',\n                        active: false,\n                        content: '',\n                    });\n                }\n                const linkRegex = new RegExp('^https?:\\\\/\\\\/\\\\S+$');\n                temporaryTextArray.push({\n                    text: match[1],\n                    type: linkRegex.test(match[2]) ? 'link' : 'annotation',\n                    content: match[2],\n                    active: false,\n                });\n                lastIndex = annotationRegex.lastIndex;\n            }\n            if (lastIndex < annotatedSentence.length) {\n                const lastSentence = annotatedSentence.slice(lastIndex);\n                temporaryTextArray.push({\n                    text: this.capitalize\n                        ? this._capitalizeText(lastSentence)\n                        : lastSentence,\n                    type: 'default',\n                    content: '',\n                    active: false,\n                });\n            }\n        }\n        this._textElements = temporaryTextArray;\n    }\n}\ntextElement.styles = styles;\nexport default textElement;\n__decorate([\n    property({ type: String, attribute: 'content', reflect: true })\n], textElement.prototype, \"content\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'align-right' })\n], textElement.prototype, \"alignRight\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'capitalize' })\n], textElement.prototype, \"capitalize\", void 0);\n__decorate([\n    property({ type: String, attribute: 'text-highlight-color' })\n], textElement.prototype, \"textHighlightColor\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-annotations' })\n], textElement.prototype, \"enableAnnotations\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-summarization' })\n], textElement.prototype, \"enableSummarization\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-html-rendering' })\n], textElement.prototype, \"enableHtmlRendering\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-text-highlighting' })\n], textElement.prototype, \"enableTextHighlighting\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-new-lines' })\n], textElement.prototype, \"disableNewLines\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-complex-feedback' })\n], textElement.prototype, \"enableComplexFeedback\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-chevrons' })\n], textElement.prototype, \"disableChevrons\", void 0);\n__decorate([\n    state()\n], textElement.prototype, \"_textElements\", void 0);\n__decorate([\n    property({ type: Array, attribute: 'textSubElements' })\n], textElement.prototype, \"textSubElements\", void 0);\n__decorate([\n    state()\n], textElement.prototype, \"_annotationURLs\", void 0);\n__decorate([\n    state()\n], textElement.prototype, \"_annotationList\", void 0);\n__decorate([\n    state()\n], textElement.prototype, \"_annotationIndex\", void 0);\n__decorate([\n    state()\n], textElement.prototype, \"_showSummarization\", void 0);\n__decorate([\n    state()\n], textElement.prototype, \"_translationRegistry\", void 0);\n__decorate([\n    state()\n], textElement.prototype, \"selectedAnnotationIndex\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'streaming' })\n], textElement.prototype, \"streaming\", void 0);\n__decorate([\n    state()\n], textElement.prototype, \"_animationList\", void 0);\n"]}