{"version":3,"sources":["components/feedback/src/feedback.ts","components/feedback/src/feedback.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","html","property","state","v4","uuidv4","HostListener","HostListenerMixin","styles","Feedback","constructor","_model_id","_input","_output","feedbackList","isModelOpen","isEditable","disableSave","isUpdateMode","highlighted","formData","feedbackId","generationId","startIndex","endIndex","selectedText","suggestedText","feedbackType","comment","feedbacks","pageX","pageY","textPositions","Selection","selection","connectedCallback","event","CustomEvent","detail","message","data","id","input_value","output_value","model","dispatchEvent","window","addEventListener","setUserSelect","_handleTextSelection","e","getSelection","toString","trim","resetFeedbackForm","minOffset","Math","min","anchorOffset","focusOffset","maxOffset","max","requestUpdate","_handleTextInput","value","_handleTextArea","_handleFormData","map","item","push","handleFeedbackUpdate","_handleFeedback","feedback","includes","filter","_toggle","_toggleEdit","handleFeedbackDelete","calculateTextPosition","_a","slotElement","shadowRoot","querySelector","assignedNodes","flatten","textNode","find","node","nodeType","Node","TEXT_NODE","textContent","positions","range","document","createRange","setStart","setEnd","rect","getBoundingClientRect","highlightedText","text","beforeHighlight","substring","afterHighlight","resetHiglightedText","resetSelection","preventDefault","element","getElementById","style","userSelect","attribute","type","String","prototype","reflect"],"mappings":"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","file":"feedback.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement, TemplateResult, html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport HostListener from '@carbon/web-components/es/globals/decorators/host-listener.js';\nimport HostListenerMixin from '@carbon/web-components/es/globals/mixins/host-listener.js';\n\n// @ts-ignore\nimport styles from './feedback.scss?inline';\nimport { FeedbackData } from '../defs';\n\n/**\n * Feedback component to record and give feedback on AI generated content\n */\nexport class Feedback extends HostListenerMixin(LitElement) {\n  static styles = styles;\n\n  /**\n   * Model ID or Model Name for which feedback is recording\n   */\n  @property({ attribute: 'model', type: String })\n  private _model_id = '';\n\n  /**\n   * User Input to the model\n   */\n  @property({ attribute: 'input', type: String })\n  private _input = '';\n\n  /**\n   * Output generated by AI Model\n   */\n  @property({ attribute: 'output', type: String })\n  private _output = '';\n\n  /**\n   * ID generated For a particular input and output\n   */\n  @property({ attribute: 'generation-id', type: String, reflect: true })\n  generationId;\n\n  @property()\n  private feedbackList: FeedbackData[] = [];\n  /**\n   * State variable for Feedback Model\n   */\n  @state()\n  private isModelOpen = false;\n\n  /**\n   * State variable for Edit selected text\n   */\n  @state()\n  private isEditable = false;\n\n  /**\n   * To store data of selected text\n   */\n  @state()\n  private selection;\n\n  @state()\n  disableSave = false;\n\n  @state()\n  private isUpdateMode = false;\n\n  @state()\n  highlighted: TemplateResult | null = null;\n\n  /**\n   * Getter for selection\n   */\n  get Selection() {\n    return this.selection;\n  }\n\n  /**\n   * Object for recording the feedback\n   */\n  @state()\n  private formData: FeedbackData = {\n    feedbackId: '',\n    generationId: '',\n    startIndex: 0,\n    endIndex: 0,\n    selectedText: '',\n    suggestedText: '',\n    feedbackType: [],\n    comment: '',\n  };\n\n  /**\n   * Array for storing checkbox values selected by user\n   */\n  feedbacks: string[] = [];\n  pageX = 0;\n  pageY = 0;\n\n  /**\n   * For Mounting the web component\n   */\n  connectedCallback(): void {\n    super.connectedCallback();\n    if (this._model_id && (this._input || this._output)) {\n      const event = new CustomEvent('on-generation', {\n        detail: {\n          message: 'generated content',\n          data: {\n            id: this.generationId,\n            input_value: this._input,\n            output_value: this._output,\n            model: this._model_id,\n          },\n        },\n      });\n      this.dispatchEvent(event);\n    }\n\n    window.addEventListener('mousedown', () => {\n      this.setUserSelect('auto');\n      this.selection = null;\n    });\n  }\n\n  /**\n   * Click event handler that is attached to this component to get the selection / selected text\n   * @param {Event} e Event from elements\n   * @private\n   */\n  @HostListener('mouseup')\n  _handleTextSelection(e) {\n    if (this.isModelOpen) {\n      this.selection = null;\n      return;\n    }\n    this.pageX = e.pageX;\n    this.pageY = e.pageY;\n    const selection = window.getSelection();\n\n    this.selection = selection;\n    const selectedText = selection?.toString().trim();\n\n    if (selectedText && selection) {\n      this.resetFeedbackForm();\n      const minOffset = Math.min(selection.anchorOffset, selection.focusOffset);\n      const maxOffset = Math.max(selection.anchorOffset, selection.focusOffset);\n      this.formData.generationId = this.generationId;\n      this.formData.selectedText = selectedText;\n      this.formData.startIndex = minOffset;\n      this.formData.endIndex = maxOffset;\n      this.requestUpdate();\n    } else {\n      this.selection = null;\n    }\n  }\n\n  /**\n   * Input event handler that is attached to the feedback (corrected value) form input\n   *\n   * @param {object} event Event object of the corrected value from input box\n   * @param {object} event.target input element\n   * @private\n   */\n  _handleTextInput({ target }: Event) {\n    const { value } = target as HTMLInputElement;\n    this.formData.suggestedText = value;\n  }\n\n  /**\n   * Input event handler that is attached to the feedback (comments) form input\n   *\n   * @param {object} event Event object of the corrected value from input box\n   * @param {object} event.target input element\n   * @private\n   */\n  _handleTextArea(event) {\n    this.formData.comment = event?.target.value;\n    if (this.formData.comment !== '') {\n      this.disableSave = false;\n    } else {\n      this.disableSave = true;\n    }\n  }\n\n  /**\n   * Submit/Record the feedback data to backend\n   * @private\n   */\n  _handleFormData() {\n    if (this.isUpdateMode) {\n      this.feedbackList = this.feedbackList.map((item) => {\n        if (item.feedbackId === this.formData.feedbackId) {\n          return { ...item, ...this.formData };\n        }\n        return item;\n      });\n    } else {\n      if (!this.formData.feedbackId) {\n        this.formData.feedbackId = uuidv4();\n      }\n      if (!this.formData.suggestedText) {\n        this.formData.suggestedText = this.formData.selectedText;\n      }\n      this.feedbackList.push(this.formData);\n    }\n\n    const event = new CustomEvent('on-feedback-save', {\n      detail: this.formData,\n    });\n\n    this.dispatchEvent(event);\n\n    this.selection = null;\n    this.resetFeedbackForm();\n    this.feedbacks = [];\n    this.isModelOpen = false;\n    this.isEditable = false;\n    this.requestUpdate('feedbackList', []);\n  }\n\n  /**\n   *\n   * @param {FeedbackData} data Feedback Object\n   */\n  handleFeedbackUpdate(data: FeedbackData) {\n    const {\n      comment,\n      endIndex,\n      feedbackId,\n      feedbackType,\n      generationId,\n      selectedText,\n      startIndex,\n      suggestedText,\n    } = data;\n    this.formData.feedbackId = feedbackId;\n    this.formData.generationId = generationId;\n    this.formData.selectedText = selectedText;\n    this.formData.suggestedText = suggestedText;\n    this.formData.feedbackType = feedbackType;\n    this.formData.startIndex = startIndex;\n    this.formData.endIndex = endIndex;\n    this.formData.comment = comment;\n    this.isEditable = true;\n    this.isUpdateMode = true;\n    this.isModelOpen = true;\n  }\n\n  /**\n   * Checkbox Input event handler that is attached to the feedback form input\n   *\n   * @param {object} event Event object of the corrected value from input box\n   * @param {object} event.target input element\n   * @private\n   */\n  _handleFeedback(event) {\n    const feedback = event.target.value;\n    if (!this.formData.feedbackType.includes(feedback)) {\n      this.formData.feedbackType.push(feedback);\n    } else {\n      this.formData.feedbackType = this.formData.feedbackType.filter(\n        (item) => item != feedback\n      );\n    }\n    this.disableSave = this.formData.feedbackType.includes('OTHER');\n  }\n\n  /**\n   * Method for toggling the Feedback Modal\n   */\n  _toggle() {\n    this.isModelOpen = !this.isModelOpen;\n    this.isUpdateMode = false;\n    this.isEditable = false;\n  }\n\n  /**\n   * Method for toggling improved text field\n   */\n  _toggleEdit() {\n    this.isEditable = !this.isEditable;\n  }\n\n  /**\n   *\n   * @param {string} id feedback id\n   *\n   */\n  handleFeedbackDelete(id) {\n    this.feedbackList = this.feedbackList.filter(\n      (item) => item.feedbackId !== id\n    );\n    const event = new CustomEvent('on-feedback-delete', {\n      detail: { feedbackId: id },\n    });\n    this.dispatchEvent(event);\n  }\n\n  /**\n   *\n   */\n  resetFeedbackForm() {\n    this.formData = {\n      feedbackId: '',\n      generationId: '',\n      startIndex: 0,\n      endIndex: 0,\n      selectedText: '',\n      suggestedText: '',\n      feedbackType: [],\n      comment: '',\n    };\n  }\n\n  @state()\n  private textPositions: any[] = [];\n\n  /**\n   *\n   */\n  calculateTextPosition() {\n    const slotElement = this.shadowRoot?.querySelector('slot');\n    const assignedNodes = slotElement?.assignedNodes({ flatten: true });\n    const textNode = assignedNodes?.find(\n      (node) =>\n        node.nodeType === Node.TEXT_NODE && node.textContent?.trim() !== ''\n    );\n\n    const positions: any[] = [];\n    this.textPositions = [];\n    if (textNode) {\n      for (const { startIndex, endIndex } of this.feedbackList) {\n        const range = document.createRange();\n        range.setStart(textNode, startIndex);\n        range.setEnd(textNode, endIndex);\n        const rect = range.getBoundingClientRect();\n        positions.push(rect);\n        this.textPositions.push(rect);\n      }\n    }\n    this.textPositions = positions;\n    return positions;\n  }\n\n  /**\n   *\n   * @param {FeedbackData} feedback feedback object\n   */\n  highlightedText(feedback: FeedbackData) {\n    const text = this._output;\n    const { startIndex, endIndex } = feedback;\n    if (\n      text &&\n      startIndex >= 0 &&\n      endIndex <= text.length &&\n      endIndex > startIndex\n    ) {\n      const beforeHighlight = text.substring(0, startIndex);\n      const highlightedText = text.substring(startIndex, endIndex);\n      const afterHighlight = text.substring(endIndex);\n\n      this.highlighted = html`${beforeHighlight}<span\n          class=\"highlight-selection\"\n          >${highlightedText}</span\n        >${afterHighlight}`;\n    }\n  }\n\n  /**\n   * To Reset the higlighted text\n   */\n  resetHiglightedText() {\n    this.highlighted = null;\n  }\n\n  /**\n   * To Reset the selection text\n   * @param {object} event Event object of the button clicked\n   */\n  resetSelection(event) {\n    event.preventDefault();\n    this.setUserSelect('none');\n    this.selection = null;\n  }\n\n  /**\n   * To remove the text selection\n   * @param {string} value value for `user-select` css property\n   */\n  setUserSelect(value: string) {\n    const element = this.shadowRoot?.getElementById('container');\n    if (element) {\n      element.style.userSelect = value;\n    }\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport HostListener from '@carbon/web-components/es/globals/decorators/host-listener.js';\nimport HostListenerMixin from '@carbon/web-components/es/globals/mixins/host-listener.js';\n// @ts-ignore\nimport styles from './feedback.scss?inline';\n/**\n * Feedback component to record and give feedback on AI generated content\n */\nexport class Feedback extends HostListenerMixin(LitElement) {\n    constructor() {\n        super(...arguments);\n        /**\n         * Model ID or Model Name for which feedback is recording\n         */\n        this._model_id = '';\n        /**\n         * User Input to the model\n         */\n        this._input = '';\n        /**\n         * Output generated by AI Model\n         */\n        this._output = '';\n        this.feedbackList = [];\n        /**\n         * State variable for Feedback Model\n         */\n        this.isModelOpen = false;\n        /**\n         * State variable for Edit selected text\n         */\n        this.isEditable = false;\n        this.disableSave = false;\n        this.isUpdateMode = false;\n        this.highlighted = null;\n        /**\n         * Object for recording the feedback\n         */\n        this.formData = {\n            feedbackId: '',\n            generationId: '',\n            startIndex: 0,\n            endIndex: 0,\n            selectedText: '',\n            suggestedText: '',\n            feedbackType: [],\n            comment: '',\n        };\n        /**\n         * Array for storing checkbox values selected by user\n         */\n        this.feedbacks = [];\n        this.pageX = 0;\n        this.pageY = 0;\n        this.textPositions = [];\n    }\n    /**\n     * Getter for selection\n     */\n    get Selection() {\n        return this.selection;\n    }\n    /**\n     * For Mounting the web component\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (this._model_id && (this._input || this._output)) {\n            const event = new CustomEvent('on-generation', {\n                detail: {\n                    message: 'generated content',\n                    data: {\n                        id: this.generationId,\n                        input_value: this._input,\n                        output_value: this._output,\n                        model: this._model_id,\n                    },\n                },\n            });\n            this.dispatchEvent(event);\n        }\n        window.addEventListener('mousedown', () => {\n            this.setUserSelect('auto');\n            this.selection = null;\n        });\n    }\n    /**\n     * Click event handler that is attached to this component to get the selection / selected text\n     * @param {Event} e Event from elements\n     * @private\n     */\n    _handleTextSelection(e) {\n        if (this.isModelOpen) {\n            this.selection = null;\n            return;\n        }\n        this.pageX = e.pageX;\n        this.pageY = e.pageY;\n        const selection = window.getSelection();\n        this.selection = selection;\n        const selectedText = selection === null || selection === void 0 ? void 0 : selection.toString().trim();\n        if (selectedText && selection) {\n            this.resetFeedbackForm();\n            const minOffset = Math.min(selection.anchorOffset, selection.focusOffset);\n            const maxOffset = Math.max(selection.anchorOffset, selection.focusOffset);\n            this.formData.generationId = this.generationId;\n            this.formData.selectedText = selectedText;\n            this.formData.startIndex = minOffset;\n            this.formData.endIndex = maxOffset;\n            this.requestUpdate();\n        }\n        else {\n            this.selection = null;\n        }\n    }\n    /**\n     * Input event handler that is attached to the feedback (corrected value) form input\n     *\n     * @param {object} event Event object of the corrected value from input box\n     * @param {object} event.target input element\n     * @private\n     */\n    _handleTextInput({ target }) {\n        const { value } = target;\n        this.formData.suggestedText = value;\n    }\n    /**\n     * Input event handler that is attached to the feedback (comments) form input\n     *\n     * @param {object} event Event object of the corrected value from input box\n     * @param {object} event.target input element\n     * @private\n     */\n    _handleTextArea(event) {\n        this.formData.comment = event === null || event === void 0 ? void 0 : event.target.value;\n        if (this.formData.comment !== '') {\n            this.disableSave = false;\n        }\n        else {\n            this.disableSave = true;\n        }\n    }\n    /**\n     * Submit/Record the feedback data to backend\n     * @private\n     */\n    _handleFormData() {\n        if (this.isUpdateMode) {\n            this.feedbackList = this.feedbackList.map((item) => {\n                if (item.feedbackId === this.formData.feedbackId) {\n                    return { ...item, ...this.formData };\n                }\n                return item;\n            });\n        }\n        else {\n            if (!this.formData.feedbackId) {\n                this.formData.feedbackId = uuidv4();\n            }\n            if (!this.formData.suggestedText) {\n                this.formData.suggestedText = this.formData.selectedText;\n            }\n            this.feedbackList.push(this.formData);\n        }\n        const event = new CustomEvent('on-feedback-save', {\n            detail: this.formData,\n        });\n        this.dispatchEvent(event);\n        this.selection = null;\n        this.resetFeedbackForm();\n        this.feedbacks = [];\n        this.isModelOpen = false;\n        this.isEditable = false;\n        this.requestUpdate('feedbackList', []);\n    }\n    /**\n     *\n     * @param {FeedbackData} data Feedback Object\n     */\n    handleFeedbackUpdate(data) {\n        const { comment, endIndex, feedbackId, feedbackType, generationId, selectedText, startIndex, suggestedText, } = data;\n        this.formData.feedbackId = feedbackId;\n        this.formData.generationId = generationId;\n        this.formData.selectedText = selectedText;\n        this.formData.suggestedText = suggestedText;\n        this.formData.feedbackType = feedbackType;\n        this.formData.startIndex = startIndex;\n        this.formData.endIndex = endIndex;\n        this.formData.comment = comment;\n        this.isEditable = true;\n        this.isUpdateMode = true;\n        this.isModelOpen = true;\n    }\n    /**\n     * Checkbox Input event handler that is attached to the feedback form input\n     *\n     * @param {object} event Event object of the corrected value from input box\n     * @param {object} event.target input element\n     * @private\n     */\n    _handleFeedback(event) {\n        const feedback = event.target.value;\n        if (!this.formData.feedbackType.includes(feedback)) {\n            this.formData.feedbackType.push(feedback);\n        }\n        else {\n            this.formData.feedbackType = this.formData.feedbackType.filter((item) => item != feedback);\n        }\n        this.disableSave = this.formData.feedbackType.includes('OTHER');\n    }\n    /**\n     * Method for toggling the Feedback Modal\n     */\n    _toggle() {\n        this.isModelOpen = !this.isModelOpen;\n        this.isUpdateMode = false;\n        this.isEditable = false;\n    }\n    /**\n     * Method for toggling improved text field\n     */\n    _toggleEdit() {\n        this.isEditable = !this.isEditable;\n    }\n    /**\n     *\n     * @param {string} id feedback id\n     *\n     */\n    handleFeedbackDelete(id) {\n        this.feedbackList = this.feedbackList.filter((item) => item.feedbackId !== id);\n        const event = new CustomEvent('on-feedback-delete', {\n            detail: { feedbackId: id },\n        });\n        this.dispatchEvent(event);\n    }\n    /**\n     *\n     */\n    resetFeedbackForm() {\n        this.formData = {\n            feedbackId: '',\n            generationId: '',\n            startIndex: 0,\n            endIndex: 0,\n            selectedText: '',\n            suggestedText: '',\n            feedbackType: [],\n            comment: '',\n        };\n    }\n    /**\n     *\n     */\n    calculateTextPosition() {\n        var _a;\n        const slotElement = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('slot');\n        const assignedNodes = slotElement === null || slotElement === void 0 ? void 0 : slotElement.assignedNodes({ flatten: true });\n        const textNode = assignedNodes === null || assignedNodes === void 0 ? void 0 : assignedNodes.find((node) => { var _a; return node.nodeType === Node.TEXT_NODE && ((_a = node.textContent) === null || _a === void 0 ? void 0 : _a.trim()) !== ''; });\n        const positions = [];\n        this.textPositions = [];\n        if (textNode) {\n            for (const { startIndex, endIndex } of this.feedbackList) {\n                const range = document.createRange();\n                range.setStart(textNode, startIndex);\n                range.setEnd(textNode, endIndex);\n                const rect = range.getBoundingClientRect();\n                positions.push(rect);\n                this.textPositions.push(rect);\n            }\n        }\n        this.textPositions = positions;\n        return positions;\n    }\n    /**\n     *\n     * @param {FeedbackData} feedback feedback object\n     */\n    highlightedText(feedback) {\n        const text = this._output;\n        const { startIndex, endIndex } = feedback;\n        if (text &&\n            startIndex >= 0 &&\n            endIndex <= text.length &&\n            endIndex > startIndex) {\n            const beforeHighlight = text.substring(0, startIndex);\n            const highlightedText = text.substring(startIndex, endIndex);\n            const afterHighlight = text.substring(endIndex);\n            this.highlighted = html `${beforeHighlight}<span\n          class=\"highlight-selection\"\n          >${highlightedText}</span\n        >${afterHighlight}`;\n        }\n    }\n    /**\n     * To Reset the higlighted text\n     */\n    resetHiglightedText() {\n        this.highlighted = null;\n    }\n    /**\n     * To Reset the selection text\n     * @param {object} event Event object of the button clicked\n     */\n    resetSelection(event) {\n        event.preventDefault();\n        this.setUserSelect('none');\n        this.selection = null;\n    }\n    /**\n     * To remove the text selection\n     * @param {string} value value for `user-select` css property\n     */\n    setUserSelect(value) {\n        var _a;\n        const element = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.getElementById('container');\n        if (element) {\n            element.style.userSelect = value;\n        }\n    }\n}\nFeedback.styles = styles;\n__decorate([\n    property({ attribute: 'model', type: String })\n], Feedback.prototype, \"_model_id\", void 0);\n__decorate([\n    property({ attribute: 'input', type: String })\n], Feedback.prototype, \"_input\", void 0);\n__decorate([\n    property({ attribute: 'output', type: String })\n], Feedback.prototype, \"_output\", void 0);\n__decorate([\n    property({ attribute: 'generation-id', type: String, reflect: true })\n], Feedback.prototype, \"generationId\", void 0);\n__decorate([\n    property()\n], Feedback.prototype, \"feedbackList\", void 0);\n__decorate([\n    state()\n], Feedback.prototype, \"isModelOpen\", void 0);\n__decorate([\n    state()\n], Feedback.prototype, \"isEditable\", void 0);\n__decorate([\n    state()\n], Feedback.prototype, \"selection\", void 0);\n__decorate([\n    state()\n], Feedback.prototype, \"disableSave\", void 0);\n__decorate([\n    state()\n], Feedback.prototype, \"isUpdateMode\", void 0);\n__decorate([\n    state()\n], Feedback.prototype, \"highlighted\", void 0);\n__decorate([\n    state()\n], Feedback.prototype, \"formData\", void 0);\n__decorate([\n    HostListener('mouseup')\n], Feedback.prototype, \"_handleTextSelection\", null);\n__decorate([\n    state()\n], Feedback.prototype, \"textPositions\", void 0);\n"]}