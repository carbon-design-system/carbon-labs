{"version":3,"sources":["components/feedback/src/feedback.template.ts","components/feedback/src/feedback.template.js"],"names":["html","Edit16","FEEDBACK_TYPE","FeedbackDescription","ModalData","openFeedbackFlag","customElementClass","_toggle","toggle","isModelOpen","pageX","pageY","openModal","formData","isEditable","_handleTextInput","handleTextInput","_handleFeedback","handleFeedback","_handleTextArea","handleTextArea","_handleFormData","handleFormData","handleFeedbackDelete","_toggleEdit","toggleEdit","isUpdateMode","disableSave","heading","notificationSubtitle","selectedText","slot","suggestedText","Object","keys","map","item","feedbackType","includes","comment","bind","feedbackId","showSlug","_input","input","_model_id","model","renderIcons","feedback","position","handleFeedbackUpdate","highlightedText","resetHiglightedText","bottom","height","left","width","feedbackTemplate","Selection","feedbackList","textPositions","handleSlotchange","highlighted","calculateTextPosition","resetSelection","length","index"],"mappings":"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","file":"feedback.template.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { html } from 'lit';\nimport Edit16 from '@carbon/web-components/es/icons/edit/16.js';\nimport '@carbon/web-components/es/components/modal/index.js';\nimport '@carbon/web-components/es/components/textarea/index.js';\nimport '@carbon/web-components/es/components/button/index.js';\nimport '@carbon/web-components/es/components/checkbox/index.js';\nimport '@carbon/web-components/es/components/form-group/index.js';\nimport '@carbon/web-components/es/components/slug/index.js';\nimport '@carbon/web-components/es/components/tooltip/index.js';\nimport '@carbon/web-components/es/components/icon-button/index.js';\nimport '@carbon/web-components/es/components/notification/index.js';\nimport {\n  FEEDBACK_TYPE,\n  FeedbackData,\n  FeedbackDescription,\n  ModalData,\n} from '../defs';\n\n/**\n * Lit template for Feedback Flag\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nfunction openFeedbackFlag(customElementClass) {\n  const { _toggle: toggle, isModelOpen, pageX, pageY } = customElementClass;\n  return html`\n    <div\n      @mousedown=${toggle}\n      class=\"feedback-flag\"\n      style=\"top: ${pageY -\n      40}px; left: ${pageX}px; font-weight: bold; display: ${isModelOpen\n        ? 'none'\n        : 'block'}\">\n      <slot name=\"icon\"></slot>\n    </div>\n  `;\n}\n\n/**\n * Lit template for Feedback Modal\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nfunction openModal(customElementClass) {\n  const {\n    formData,\n    isEditable,\n    isModelOpen,\n    _handleTextInput: handleTextInput,\n    _handleFeedback: handleFeedback,\n    _handleTextArea: handleTextArea,\n    _handleFormData: handleFormData,\n    handleFeedbackDelete,\n    _toggleEdit: toggleEdit,\n    _toggle: toggle,\n    isUpdateMode,\n    disableSave,\n  } = customElementClass;\n\n  return html`\n    <cds-modal\n      id=\"feedback-modal\"\n      ?open=${isModelOpen}\n      ?has-scrolling-content=${true}\n      @cds-modal-closed=${toggle}>\n      <cds-modal-header>\n        <cds-modal-close-button></cds-modal-close-button>\n        <cds-modal-heading>${ModalData.heading}</cds-modal-heading>\n      </cds-modal-header>\n      <cds-modal-body>\n        <cds-inline-notification\n          data-modal-primary-focus\n          hide-close-button\n          style=\"min-width: 30rem; margin-bottom: .5rem\"\n          subtitle=${ModalData.notificationSubtitle}\n          kind=\"info\">\n        </cds-inline-notification>\n        <div style=\"margin-block-end:0.5rem\">\n          <cds-form-group>\n            <div class=\"label\">Selected text</div>\n            <p class=\"selected-text\">\n              ${formData.selectedText}\n              <cds-icon-button @click=${toggleEdit} size=\"xs\">\n                ${Edit16({ slot: 'icon' })}\n                <span slot=\"tooltip-content\">Improved text</span>\n              </cds-icon-button>\n            </p>\n          </cds-form-group>\n        </div>\n\n        ${isEditable\n          ? html`\n              <div style=\"margin-block-end:0.5rem\">\n                <cds-form-group style=\"margin-bottom-end:0.5rem\">\n                  <cds-text-input\n                    label=\"Improved text\"\n                    value=${formData.suggestedText\n                      ? formData.suggestedText\n                      : formData.selectedText}\n                    @input=${handleTextInput}>\n                  </cds-text-input>\n                </cds-form-group>\n              </div>\n            `\n          : null}\n\n        <div style=\"margin-block-end:0.5rem\">\n          <cds-checkbox-group\n            style=\"margin-bottom-end:0.5rem\"\n            @cds-checkbox-changed=${handleFeedback}\n            legend-text=\"Content Quality Feedback\">\n            ${Object.keys(FeedbackDescription).map((item) => {\n              return html`\n                <cds-checkbox\n                  value=${FEEDBACK_TYPE[item]}\n                  label-text=${FeedbackDescription[item]}\n                  ?checked=${formData.feedbackType.includes(\n                    FEEDBACK_TYPE[item]\n                  )}></cds-checkbox>\n              `;\n            })}\n          </cds-checkbox-group>\n        </div>\n        <div style=\"margin-block-end:0.5rem\">\n          <cds-textarea\n            rows=\"4\"\n            value=${formData.comment}\n            @input=${handleTextArea}>\n            <span slot=\"label-text\">Comments:</span>\n          </cds-textarea>\n        </div>\n      </cds-modal-body>\n      <cds-modal-footer>\n        ${isUpdateMode\n          ? html`\n              <cds-modal-footer-button\n                kind=\"danger\"\n                @click=${handleFeedbackDelete.bind(\n                  customElementClass,\n                  formData.feedbackId\n                )}\n                data-modal-close\n                >Delete</cds-modal-footer-button\n              >\n              <cds-modal-footer-button\n                kind=\"primary\"\n                @click=${handleFormData}\n                ?disabled=${disableSave}\n                >Update</cds-modal-footer-button\n              >\n            `\n          : html`\n              <cds-modal-footer-button kind=\"secondary\" data-modal-close\n                >Cancel</cds-modal-footer-button\n              >\n              <cds-modal-footer-button\n                kind=\"primary\"\n                ?disabled=${disableSave}\n                @click=${handleFormData}\n                >Save</cds-modal-footer-button\n              >\n            `}\n      </cds-modal-footer>\n    </cds-modal>\n  `;\n}\n\n/**\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nfunction showSlug(customElementClass) {\n  const { _input: input, _model_id: model } = customElementClass;\n  return html`\n    <cds-slug size=\"2xs\" alignment=\"bottom-left\">\n      <div slot=\"body-text\">\n        <p class=\"secondary\">Input</p>\n        <p class=\"bold\">${input}</p>\n        ${model\n          ? html` <hr />\n              <p class=\"secondary\">Model type</p>\n              <p class=\"bold\">${model}</p>`\n          : null}\n        <hr />\n        <p class=\"secondary\">\n          To provide feedback on a specific part of a paragraph, simply select\n          the portion of text you want to comment on.\n        </p>\n      </div>\n    </cds-slug>\n  `;\n}\n\n/**\n *\n * @param {FeedbackData} feedback Feedback object\n * @param {DOMRect} position Position of feedback in sentence\n * @param {object} customElementClass Class functionality for the custom element\n */\nfunction renderIcons(feedback: FeedbackData, position, customElementClass) {\n  const { handleFeedbackUpdate, highlightedText, resetHiglightedText } =\n    customElementClass;\n  return html`\n    <span\n      class=\"highlight blink_me\"\n      @mouseover=${highlightedText.bind(customElementClass, feedback)}\n      @mouseout=${resetHiglightedText}\n      @click=${handleFeedbackUpdate.bind(customElementClass, feedback)}\n      style=\"position:absolute; top: ${position?.bottom -\n      position?.height +\n      5}px; left: ${position?.left + position?.width}px;\"></span>\n  `;\n}\n\n/**\n * Lit template for Feedback component\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nexport function feedbackTemplate(customElementClass) {\n  const {\n    isModelOpen,\n    Selection,\n    feedbackList,\n    textPositions,\n    handleSlotchange,\n    highlighted,\n    calculateTextPosition,\n    resetSelection,\n  } = customElementClass;\n  return html`\n    <div\n      style=\"display:flex; justify-content: space-between; align-items: center; padding: 0.5rem 0;position:relative\">\n      <div class=\"slug\" @click=${resetSelection}>\n        ${feedbackList.length !== 0\n          ? html`<span class=\"notify\"></span>`\n          : null}${showSlug(customElementClass)}\n      </div>\n    </div>\n    ${Selection ? openFeedbackFlag(customElementClass) : null}\n    <div id=\"container\">\n      ${feedbackList.length !== 0 && textPositions.length !== 0\n        ? feedbackList.map((feedback, index) =>\n            renderIcons(feedback, textPositions[index], customElementClass)\n          )\n        : null}\n      ${highlighted\n        ? highlighted\n        : html`<slot\n            @mouseover=${calculateTextPosition}\n            @slotchange=${handleSlotchange}></slot>`}\n      ${isModelOpen ? openModal(customElementClass) : null}\n    </div>\n  `;\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { html } from 'lit';\nimport Edit16 from '@carbon/web-components/es/icons/edit/16.js';\nimport '@carbon/web-components/es/components/modal/index.js';\nimport '@carbon/web-components/es/components/textarea/index.js';\nimport '@carbon/web-components/es/components/button/index.js';\nimport '@carbon/web-components/es/components/checkbox/index.js';\nimport '@carbon/web-components/es/components/form-group/index.js';\nimport '@carbon/web-components/es/components/slug/index.js';\nimport '@carbon/web-components/es/components/tooltip/index.js';\nimport '@carbon/web-components/es/components/icon-button/index.js';\nimport '@carbon/web-components/es/components/notification/index.js';\nimport { FEEDBACK_TYPE, FeedbackDescription, ModalData, } from '../defs';\n/**\n * Lit template for Feedback Flag\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nfunction openFeedbackFlag(customElementClass) {\n    const { _toggle: toggle, isModelOpen, pageX, pageY } = customElementClass;\n    return html `\n    <div\n      @mousedown=${toggle}\n      class=\"feedback-flag\"\n      style=\"top: ${pageY -\n        40}px; left: ${pageX}px; font-weight: bold; display: ${isModelOpen\n        ? 'none'\n        : 'block'}\">\n      <slot name=\"icon\"></slot>\n    </div>\n  `;\n}\n/**\n * Lit template for Feedback Modal\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nfunction openModal(customElementClass) {\n    const { formData, isEditable, isModelOpen, _handleTextInput: handleTextInput, _handleFeedback: handleFeedback, _handleTextArea: handleTextArea, _handleFormData: handleFormData, handleFeedbackDelete, _toggleEdit: toggleEdit, _toggle: toggle, isUpdateMode, disableSave, } = customElementClass;\n    return html `\n    <cds-modal\n      id=\"feedback-modal\"\n      ?open=${isModelOpen}\n      ?has-scrolling-content=${true}\n      @cds-modal-closed=${toggle}>\n      <cds-modal-header>\n        <cds-modal-close-button></cds-modal-close-button>\n        <cds-modal-heading>${ModalData.heading}</cds-modal-heading>\n      </cds-modal-header>\n      <cds-modal-body>\n        <cds-inline-notification\n          data-modal-primary-focus\n          hide-close-button\n          style=\"min-width: 30rem; margin-bottom: .5rem\"\n          subtitle=${ModalData.notificationSubtitle}\n          kind=\"info\">\n        </cds-inline-notification>\n        <div style=\"margin-block-end:0.5rem\">\n          <cds-form-group>\n            <div class=\"label\">Selected text</div>\n            <p class=\"selected-text\">\n              ${formData.selectedText}\n              <cds-icon-button @click=${toggleEdit} size=\"xs\">\n                ${Edit16({ slot: 'icon' })}\n                <span slot=\"tooltip-content\">Improved text</span>\n              </cds-icon-button>\n            </p>\n          </cds-form-group>\n        </div>\n\n        ${isEditable\n        ? html `\n              <div style=\"margin-block-end:0.5rem\">\n                <cds-form-group style=\"margin-bottom-end:0.5rem\">\n                  <cds-text-input\n                    label=\"Improved text\"\n                    value=${formData.suggestedText\n            ? formData.suggestedText\n            : formData.selectedText}\n                    @input=${handleTextInput}>\n                  </cds-text-input>\n                </cds-form-group>\n              </div>\n            `\n        : null}\n\n        <div style=\"margin-block-end:0.5rem\">\n          <cds-checkbox-group\n            style=\"margin-bottom-end:0.5rem\"\n            @cds-checkbox-changed=${handleFeedback}\n            legend-text=\"Content Quality Feedback\">\n            ${Object.keys(FeedbackDescription).map((item) => {\n        return html `\n                <cds-checkbox\n                  value=${FEEDBACK_TYPE[item]}\n                  label-text=${FeedbackDescription[item]}\n                  ?checked=${formData.feedbackType.includes(FEEDBACK_TYPE[item])}></cds-checkbox>\n              `;\n    })}\n          </cds-checkbox-group>\n        </div>\n        <div style=\"margin-block-end:0.5rem\">\n          <cds-textarea\n            rows=\"4\"\n            value=${formData.comment}\n            @input=${handleTextArea}>\n            <span slot=\"label-text\">Comments:</span>\n          </cds-textarea>\n        </div>\n      </cds-modal-body>\n      <cds-modal-footer>\n        ${isUpdateMode\n        ? html `\n              <cds-modal-footer-button\n                kind=\"danger\"\n                @click=${handleFeedbackDelete.bind(customElementClass, formData.feedbackId)}\n                data-modal-close\n                >Delete</cds-modal-footer-button\n              >\n              <cds-modal-footer-button\n                kind=\"primary\"\n                @click=${handleFormData}\n                ?disabled=${disableSave}\n                >Update</cds-modal-footer-button\n              >\n            `\n        : html `\n              <cds-modal-footer-button kind=\"secondary\" data-modal-close\n                >Cancel</cds-modal-footer-button\n              >\n              <cds-modal-footer-button\n                kind=\"primary\"\n                ?disabled=${disableSave}\n                @click=${handleFormData}\n                >Save</cds-modal-footer-button\n              >\n            `}\n      </cds-modal-footer>\n    </cds-modal>\n  `;\n}\n/**\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nfunction showSlug(customElementClass) {\n    const { _input: input, _model_id: model } = customElementClass;\n    return html `\n    <cds-slug size=\"2xs\" alignment=\"bottom-left\">\n      <div slot=\"body-text\">\n        <p class=\"secondary\">Input</p>\n        <p class=\"bold\">${input}</p>\n        ${model\n        ? html ` <hr />\n              <p class=\"secondary\">Model type</p>\n              <p class=\"bold\">${model}</p>`\n        : null}\n        <hr />\n        <p class=\"secondary\">\n          To provide feedback on a specific part of a paragraph, simply select\n          the portion of text you want to comment on.\n        </p>\n      </div>\n    </cds-slug>\n  `;\n}\n/**\n *\n * @param {FeedbackData} feedback Feedback object\n * @param {DOMRect} position Position of feedback in sentence\n * @param {object} customElementClass Class functionality for the custom element\n */\nfunction renderIcons(feedback, position, customElementClass) {\n    const { handleFeedbackUpdate, highlightedText, resetHiglightedText } = customElementClass;\n    return html `\n    <span\n      class=\"highlight blink_me\"\n      @mouseover=${highlightedText.bind(customElementClass, feedback)}\n      @mouseout=${resetHiglightedText}\n      @click=${handleFeedbackUpdate.bind(customElementClass, feedback)}\n      style=\"position:absolute; top: ${(position === null || position === void 0 ? void 0 : position.bottom) -\n        (position === null || position === void 0 ? void 0 : position.height) +\n        5}px; left: ${(position === null || position === void 0 ? void 0 : position.left) + (position === null || position === void 0 ? void 0 : position.width)}px;\"></span>\n  `;\n}\n/**\n * Lit template for Feedback component\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nexport function feedbackTemplate(customElementClass) {\n    const { isModelOpen, Selection, feedbackList, textPositions, handleSlotchange, highlighted, calculateTextPosition, resetSelection, } = customElementClass;\n    return html `\n    <div\n      style=\"display:flex; justify-content: space-between; align-items: center; padding: 0.5rem 0;position:relative\">\n      <div class=\"slug\" @click=${resetSelection}>\n        ${feedbackList.length !== 0\n        ? html `<span class=\"notify\"></span>`\n        : null}${showSlug(customElementClass)}\n      </div>\n    </div>\n    ${Selection ? openFeedbackFlag(customElementClass) : null}\n    <div id=\"container\">\n      ${feedbackList.length !== 0 && textPositions.length !== 0\n        ? feedbackList.map((feedback, index) => renderIcons(feedback, textPositions[index], customElementClass))\n        : null}\n      ${highlighted\n        ? highlighted\n        : html `<slot\n            @mouseover=${calculateTextPosition}\n            @slotchange=${handleSlotchange}></slot>`}\n      ${isModelOpen ? openModal(customElementClass) : null}\n    </div>\n  `;\n}\n"]}