{"version":3,"sources":["services/feedback/FeedbackApi.ts","services/feedback/FeedbackApi.js"],"names":["_host","import","meta","env","VITE_FEEDBACK_API","FeedbackApi","constructor","BASE_URL","_post","endpoint","data","response","fetch","method","body","JSON","stringify","headers","_handleResponse","ok","errorData","json","Error","detail","message","recordGeneration","recordFeedback","getInstance","instance"],"mappings":"AAAA;ACCA;AACA;AACA;AACA;AACA;AACA;AACA;ADEA;ACAA;AACA;AACA;ADEA,MAAMA,KAAK;AACT;AACCC,MAAM,CAACC,IAAI,CAACC,GAAG,IAAIF,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,iBAAiB,IACrD,qBAAqB;AAEvB;ACDA;AACA;ADGA,MAAMC,WAAW,CAAA;EAIf;ACJF;AACA;EDMEC,WAAAA,CAAA,EAAA;IACE,IAAI,CAACC,QAAQ,GAAGP,KAAK;EACvB;EAEA;ACLF;AACA;AACA;AACA;AACA;AACA;AACA;EDOY,MAAMQ,KAAKA,CAACC,QAAgB,EAAEC,IAAI,EAAA;IAC1C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACL,QAAQ,IAAIE,QAAQ,EAAE,EAAE;MAC3DI,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;MAC1BO,OAAO,EAAE;QACP,cAAc,EAAE;MCLZ;IACJ,CDMH,CAAC;IACF,OAAO,IAAI,CAACC,eAAe,CAACP,QAAQ,CAAC;EACvC;EAEA;ACNF;AACA;AACA;AACA;AACA;AACA;EDQY,MAAMO,eAAeA,CAACP,QAAQ,EAAA;IACtC,IAAI,CAACA,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAA,CAAE;MACvC,MAAM,IAAIC,KAAK,CACb,CAAAF,SAAS,KAAA,IAAA,IAATA,SAAS,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAATA,SAAS,CAAEG,MAAM,MAAIH,SAAS,KAAA,IAAA,IAATA,SAAS,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAATA,SAAS,CAAEI,OAAO,CAAA,IAAI,sBAAsB,CAClE;IACH;IACA,OAAO,MAAMb,QAAQ,CAACU,IAAI,CAAA,CAAE;EAC9B;EAEA;ACTF;AACA;AACA;AACA;AACA;AACA;EDWE,MAAMI,gBAAgBA,CAACf,IAAI,EAAA;IACzB,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACH,KAAK,CAAC,mBAAmB,EAAEE,IAAI,CAAC;IAC5D,OAAOC,QAAQ;EACjB;EAEA;ACVF;AACA;AACA;AACA;AACA;AACA;EDYE,MAAMe,cAAcA,CAAChB,IAAI,EAAA;IACvB,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACH,KAAK,CAAC,UAAU,EAAEE,IAAI,CAAC;IACnD,OAAOC,QAAQ;EACjB;EAEA;ACXF;AACA;EDaS,OAAOgB,WAAWA,CAAA,EAAA;IACvB,IAAI,CAACtB,WAAW,CAACuB,QAAQ,EAAE;MACzBvB,WAAW,CAACuB,QAAQ,GAAG,IAAIvB,WAAW,CAAA,CAAE;IAC1C;IACA,OAAOA,WAAW,CAACuB,QAAQ;EAC7B;ACXF;ADcA,eAAevB,WAAW","file":"FeedbackApi.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @constant {string | string} Host for the API calls\n * @private\n */\nconst _host =\n  //@ts-ignore\n  (import.meta.env && import.meta.env.VITE_FEEDBACK_API) ||\n  'http://0.0.0.0:8000';\n\n/**\n * Class for calling feedback Api Endpoints\n */\nclass FeedbackApi {\n  private static instance: FeedbackApi;\n  private BASE_URL: string;\n\n  /**\n   * Constructor of FeedbackApi Class\n   */\n  constructor() {\n    this.BASE_URL = _host;\n  }\n\n  /**\n   * Wrapper function for fetch api call\n   *\n   * @param {string} endpoint Endpoint to call\n   * @param {any} data Payload data send to endpoint\n   * @returns {Promise<any>} Response data from endpoint\n   *\n   */\n  protected async _post(endpoint: string, data) {\n    const response = await fetch(`${this.BASE_URL}/${endpoint}`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    });\n    return this._handleResponse(response);\n  }\n\n  /**\n   * Handles the response get from api\n   *\n   * @param {string} response Endpoint to call\n   * @returns {Promise<any>} Response data from endpoint\n   *\n   */\n  protected async _handleResponse(response) {\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(\n        errorData?.detail || errorData?.message || 'Something went wrong'\n      );\n    }\n    return await response.json();\n  }\n\n  /**\n   * Record Generated data from AI Model\n   *\n   * @param {object} data Payload data send to endpoint\n   * @returns {Promise<any>} Response data from endpoint\n   *\n   */\n  async recordGeneration(data) {\n    const response = await this._post('generated_content', data);\n    return response;\n  }\n\n  /**\n   * Record Feedback data given for generated content on AI Model\n   *\n   * @param {object} data Payload data send to endpoint\n   * @returns {Promise<any>} Response data from endpoint\n   *\n   */\n  async recordFeedback(data) {\n    const response = await this._post('feedback', data);\n    return response;\n  }\n\n  /**\n   * Get the existing instance of this class if available\n   */\n  public static getInstance(): FeedbackApi {\n    if (!FeedbackApi.instance) {\n      FeedbackApi.instance = new FeedbackApi();\n    }\n    return FeedbackApi.instance;\n  }\n}\n\nexport default FeedbackApi;\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * @constant {string | string} Host for the API calls\n * @private\n */\nconst _host = \n//@ts-ignore\n(import.meta.env && import.meta.env.VITE_FEEDBACK_API) ||\n    'http://0.0.0.0:8000';\n/**\n * Class for calling feedback Api Endpoints\n */\nclass FeedbackApi {\n    /**\n     * Constructor of FeedbackApi Class\n     */\n    constructor() {\n        this.BASE_URL = _host;\n    }\n    /**\n     * Wrapper function for fetch api call\n     *\n     * @param {string} endpoint Endpoint to call\n     * @param {any} data Payload data send to endpoint\n     * @returns {Promise<any>} Response data from endpoint\n     *\n     */\n    async _post(endpoint, data) {\n        const response = await fetch(`${this.BASE_URL}/${endpoint}`, {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8',\n            },\n        });\n        return this._handleResponse(response);\n    }\n    /**\n     * Handles the response get from api\n     *\n     * @param {string} response Endpoint to call\n     * @returns {Promise<any>} Response data from endpoint\n     *\n     */\n    async _handleResponse(response) {\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.detail) || (errorData === null || errorData === void 0 ? void 0 : errorData.message) || 'Something went wrong');\n        }\n        return await response.json();\n    }\n    /**\n     * Record Generated data from AI Model\n     *\n     * @param {object} data Payload data send to endpoint\n     * @returns {Promise<any>} Response data from endpoint\n     *\n     */\n    async recordGeneration(data) {\n        const response = await this._post('generated_content', data);\n        return response;\n    }\n    /**\n     * Record Feedback data given for generated content on AI Model\n     *\n     * @param {object} data Payload data send to endpoint\n     * @returns {Promise<any>} Response data from endpoint\n     *\n     */\n    async recordFeedback(data) {\n        const response = await this._post('feedback', data);\n        return response;\n    }\n    /**\n     * Get the existing instance of this class if available\n     */\n    static getInstance() {\n        if (!FeedbackApi.instance) {\n            FeedbackApi.instance = new FeedbackApi();\n        }\n        return FeedbackApi.instance;\n    }\n}\nexport default FeedbackApi;\n"]}