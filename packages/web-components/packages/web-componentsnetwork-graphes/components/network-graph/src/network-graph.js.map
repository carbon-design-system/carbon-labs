{"version":3,"sources":["components/network-graph/src/network-graph.js","components/network-graph/src/network-graph.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","LitElement","property","ForceGraph2D","NetworkGraph","constructor","nodeLabel","nodeTooltipLabel","minimumZoom","maximumZoom","canvasBgColor","linkColor","borderAccent","linkWidth","nodeTextColor","nodeColor","textSize","isNodeDraggable","isPanInteraction","isZoomInteraction","isPointerInteraction","particleWidth","numberOfParticles","particleColor","data","tooltipStyles","zoomToFit","firstUpdated","_a","_b","_c","_d","graphContainer","shadowRoot","getElementById","parentHeight","offsetParent","clientHeight","parentWidth","canvasHeight","canvasWidth","graph","width","height","nodeId","graphData","minZoom","maxZoom","backgroundColor","enableNodeDrag","enablePanInteraction","cooldownTicks","enableZoomInteraction","enablePointerInteraction","onNodeClick","node","event","CustomEvent","detail","dispatchEvent","onNodeRightClick","onNodeDrag","nodeDrag","onNodeHover","prevNode","tooltip","querySelector","style","position","padding","color","value","entries","linkCanvasObject","actualLink","ctx","globalScale","link","strokeStyle","lineWidth","source","beginPath","moveTo","x","y","lineTo","stroke","nodeCanvasObject","actualNode","label","fontSize","font","textWidth","measureText","bckgDimensions","map","n","widthWithPadding","heightWithPadding","fillStyle","bgColor","fillRect","strokeRect","textAlign","textBaseline","fillText","__bckgDimensions","nodePointerAreaPaint","linkDirectionalParticles","linkDirectionalParticleWidth","linkDirectionalParticleColor","onEngineStop","attribute","type","String","prototype","Number","Function","Boolean"],"mappings":"AAAA,IAAIA,UAAU,GAAI,IAAI,IAAI,IAAI,CAACA,UAAU,IAAK,UAAUC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACnF,IAAIC,CAAC,GAAGC,SAAS,CAACC,MAAM;IAAEC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGH,MAAM,GAAGE,IAAI,KAAK,IAAI,GAAGA,IAAI,GAAGK,MAAM,CAACC,wBAAwB,CAACR,MAAM,EAAEC,GAAG,CAAC,GAAGC,IAAI;IAAEO,CAAC;EAC5H,IAAI,OAAOC,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACC,QAAQ,KAAK,UAAU,EAAEL,CAAC,GAAGI,OAAO,CAACC,QAAQ,CAACZ,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAAC,KAC1H,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE,IAAIH,CAAC,GAAGV,UAAU,CAACa,CAAC,CAAC,EAAEN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACH,CAAC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACT,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,GAAGG,CAAC,CAACT,MAAM,EAAEC,GAAG,CAAC,KAAKK,CAAC;EACjJ,OAAOH,CAAC,GAAG,CAAC,IAAIG,CAAC,IAAIC,MAAM,CAACM,cAAc,CAACb,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,EAAEA,CAAC;AACjE,CAAC;ACLD;ADOA;AACA;AACA;AACA;AACA;AACA;AACA;ACLA,SAASQ,UAAU,QAAQ,KAAK;AAChC,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,OAAOC,YAA2B,MAAM,aAAa;AAGrD;ADKA;AACA;ACHA,OAAM,MAAOC,YAAa,SAAQH,UAAU,CAAA;EAA5CI,WAAAA,CAAA,EAAA;IDMQ,KAAK,CAAC,GAAGd,SAAS,CAAC;ICLzB;ADOF;AACA;ICJE,IAAA,CAAAe,SAAS,GAAG,IAAI;IAEhB;ADKF;AACA;ICFE,IAAA,CAAAC,gBAAgB,GAAG,IAAI;IAcvB;ADTF;AACA;ICYE,IAAA,CAAAC,WAAW,GAAG,CAAC;IAEf;ADXF;AACA;ICcE,IAAA,CAAAC,WAAW,GAAG,IAAI;IAElB;ADbF;AACA;ICgBE,IAAA,CAAAC,aAAa,GAAG,aAAa;IAE7B;ADfF;AACA;ICkBE,IAAA,CAAAC,SAAS,GAAG,MAAM;IAElB;ADjBF;AACA;ICoBE,IAAA,CAAAC,YAAY,GAAG,SAAS;IAExB;ADnBF;AACA;ICsBE,IAAA,CAAAC,SAAS,GAAG,CAAC;IAEb;ADrBF;AACA;ICwBE,IAAA,CAAAC,aAAa,GAAG,MAAM;IAEtB;ADvBF;AACA;IC0BE,IAAA,CAAAC,SAAS,GAAG,SAAS;IAErB;ADzBF;AACA;IC4BE,IAAA,CAAAC,QAAQ,GAAG,EAAE;IAQb;ADjCF;AACA;ICoCE,IAAA,CAAAC,eAAe,GAAG,IAAI;IAEtB;ADnCF;AACA;ICsCE,IAAA,CAAAC,gBAAgB,GAAG,IAAI;IAEvB;ADrCF;AACA;ICwCE,IAAA,CAAAC,iBAAiB,GAAG,IAAI;IAExB;ADvCF;AACA;IC0CE,IAAA,CAAAC,oBAAoB,GAAG,IAAI;IAE3B;ADzCF;AACA;IC4CE,IAAA,CAAAC,aAAa,GAAG,CAAC;IAEjB;AD3CF;AACA;IC8CE,IAAA,CAAAC,iBAAiB,GAAG,CAAC;IAErB;AD7CF;AACA;ICgDE,IAAA,CAAAC,aAAa,GAAG,SAAS;IAEzB;AD/CF;AACA;ICkDE,IAAA,CAAAC,IAAI,GAAqB,IAAI;IAE7B;ADjDF;AACA;ICoDE,IAAA,CAAAC,aAAa,GAAG,IAAI;IAEpB;ADnDF;AACA;ICsDE,IAAA,CAAAC,SAAS,GAAG,IAAI;EA8KlB;EA5KE;ADpDF;AACA;ECsDEC,YAAYA,CAAA,EAAA;IDpDN,IAAIC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;ICqDtB,MAAMC,cAAc,GAAG,CAAAJ,EAAA,GAAA,IAAI,CAACK,UAAU,MAAA,IAAA,IAAAL,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,EAAA,CAAEM,cAAc,CAAC,iBAAiB,CAAC;IACzE,MAAMC,YAAY,GAAG,CAAAN,EAAA,GAAAG,cAAc,KAAA,IAAA,IAAdA,cAAc,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAdA,cAAc,CAAEI,YAAY,MAAA,IAAA,IAAAP,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,EAAA,CAAEQ,YAAY;IAC/D,MAAMC,WAAW,GAAG,CAAAR,EAAA,GAAAE,cAAc,KAAA,IAAA,IAAdA,cAAc,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAdA,cAAc,CAAEI,YAAY,MAAA,IAAA,IAAAN,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,EAAA,CAAEO,YAAY;IAE9D,MAAME,YAAY,GAAG,IAAI,CAACA,YAAY,GAClC,IAAI,CAACA,YAAY,GACjBJ,YAAY,GACZA,YAAY,GACZ,IAAI;IACR,MAAMK,WAAW,GAAG,IAAI,CAACA,WAAW,GAChC,IAAI,CAACA,WAAW,GAChBF,WAAW,GACXA,WAAW,GACX,IAAI;IAER,IAAI,IAAI,CAACd,IAAI,KAAI,CAAAO,EAAA,GAAA,IAAI,CAACE,UAAU,MAAA,IAAA,IAAAF,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,EAAA,CAAEG,cAAc,CAAC,iBAAiB,CAAC,CAAA,EAAE;MACnE,MAAMO,KAAK,GAAGtC,YAAY,CAAA,CAAE;MAC5B,IAAIqC,WAAW,EAAE;QACfC,KAAK,CAACC,KAAK,CAACF,WAAW,CAAC;MAC1B;MACA,IAAID,YAAY,EAAE;QAChBE,KAAK,CAACE,MAAM,CAACJ,YAAY,CAAC;MAC5B;MAEAE,KAAK,CAAC,IAAI,CAACR,UAAU,CAACC,cAAc,CAAC,iBAAiB,CAAgB,CAAC,CACpEU,MAAM,CAAC,IAAI,CAACtC,SAAS,CAAC,CACtBA,SAAS,CAAC,IAAI,CAACC,gBAAgB,CAAC,CAChCsC,SAAS,CAAC,IAAI,CAACrB,IAAI,CAAC,CACpBsB,OAAO,CAAC,IAAI,CAACtC,WAAW,CAAC,CACzBuC,OAAO,CAAC,IAAI,CAACtC,WAAW,CAAC,CACzBuC,eAAe,CAAC,IAAI,CAACtC,aAAa,CAAC,CACnCuC,cAAc,CAAC,IAAI,CAAChC,eAAe,CAAC,CACpCiC,oBAAoB,CAAC,IAAI,CAAChC,gBAAgB,CAAC,CAC3CiC,aAAa,CAAC,GAAG,CAAC,CAClBC,qBAAqB,CAAC,IAAI,CAACjC,iBAAiB,CAAC,CAC7CkC,wBAAwB,CAAC,IAAI,CAACjC,oBAAoB,CAAC,CACnDkC,WAAW,CAAEC,IAAI,IAAI;QACpB,MAAMC,KAAK,GAAG,IAAIC,WAAW,CAAC,eAAe,EAAE;UAC7CC,MAAM,EAAEH;QDtDJ,CCuDL,CAAC;QAEF,IAAI,CAACI,aAAa,CAACH,KAAK,CAAC;MAC3B,CAAC,CAAC,CACDI,gBAAgB,CAAEL,IAAI,IAAI;QACzB,MAAMC,KAAK,GAAG,IAAIC,WAAW,CAAC,qBAAqB,EAAE;UACnDC,MAAM,EAAEH;QDvDJ,CCwDL,CAAC;QAEF,IAAI,CAACI,aAAa,CAACH,KAAK,CAAC;MAC3B,CAAC,CAAC,CACDK,UAAU,CAAC,IAAI,CAACC,QAAQ,CAAC,CACzBC,WAAW,CAAC,CAACR,IAAI,EAAES,QAAQ,KAAI;QDxDxB,IAAIpC,EAAE;QCyDZ,MAAMqC,OAAO,GAAG,CAAArC,EAAA,GAAA,IAAI,CAACK,UAAU,MAAA,IAAA,IAAAL,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,EAAA,CAAEsC,aAAa,CAC5C,gBAAgB,CACF;QAChB,IAAID,OAAO,EAAE;UACXA,OAAO,CAACE,KAAK,CAACC,QAAQ,GAAG,UAAU;UACnCH,OAAO,CAACE,KAAK,CAACnB,eAAe,GAAG,MAAM;UACtCiB,OAAO,CAACE,KAAK,CAACE,OAAO,GAAG,KAAK;UAC7BJ,OAAO,CAACE,KAAK,CAACG,KAAK,GAAG,MAAM;UAC5B,IAAI,IAAI,CAAC7C,aAAa,EAAE;YACtB,KAAK,MAAM,CAACrC,GAAG,EAAEmF,KAAK,CAAC,IAAI7E,MAAM,CAAC8E,OAAO,CAAC,IAAI,CAAC/C,aAAa,CAAC,EAAE;cAC7DwC,OAAO,CAACE,KAAK,CAAC/E,GAAG,CAAC,GAAGmF,KAAK;YAC5B;UACF;QACF;QACA,MAAMf,KAAK,GAAG,IAAIC,WAAW,CAAC,eAAe,EAAE;UAC7CC,MAAM,EAAE;YAAEH,IAAI;YAAES;UAAQ;QDzDpB,CC0DL,CAAC;QAEF,IAAI,CAACL,aAAa,CAACH,KAAK,CAAC;MAC3B,CAAC,CAAC,CACDiB,gBAAgB,CAAC,CAACC,UAAU,EAAEC,GAAG,EAAEC,WAAW,KAAI;QACjD,MAAMC,IAAI,GAAGH,UAAyB;QACtCC,GAAG,CAACG,WAAW,GAAG,IAAI,CAACnE,SAAS;QAChCgE,GAAG,CAACI,SAAS,GAAG,IAAI,CAAClE,SAAS,GAAG+D,WAAW;QAE5C,IAAIC,IAAI,CAACG,MAAM,IAAIH,IAAI,CAAC1F,MAAM,EAAE;UAC9BwF,GAAG,CAACM,SAAS,CAAA,CAAE;UACfN,GAAG,CAACO,MAAM,CAACL,IAAI,CAACG,MAAM,CAACG,CAAC,EAAEN,IAAI,CAACG,MAAM,CAACI,CAAC,CAAC;UACxCT,GAAG,CAACU,MAAM,CAACR,IAAI,CAAC1F,MAAM,CAACgG,CAAC,EAAEN,IAAI,CAAC1F,MAAM,CAACiG,CAAC,CAAC;UACxCT,GAAG,CAACW,MAAM,CAAA,CAAE;QACd;MACF,CAAC,CAAC,CACDvE,SAAS,CAAC,KAAK,CAAC,CAChBwE,gBAAgB,CAAC,CAACC,UAAU,EAAEb,GAAG,EAAEC,WAAW,KAAI;QACjD,MAAMrB,IAAI,GAAGiC,UAAwB;QACrC,MAAMC,KAAK,GAAGlC,IAAI,CAAC,IAAI,CAACjD,SAAS,CAAW;QAC5C,MAAMoF,QAAQ,GAAG,IAAI,CAAC1E,QAAQ,GAAG4D,WAAW;QAC5CD,GAAG,CAACgB,IAAI,GAAG,GAAGD,QAAQ,eAAe;QACrC,MAAME,SAAS,GAAGjB,GAAG,CAACkB,WAAW,CAACJ,KAAK,CAAC,CAAC/C,KAAK;QAC9C,MAAMoD,cAAc,GAAG,CAACF,SAAS,EAAEF,QAAQ,CAAC,CAACK,GAAG,CAC7CC,CAAC,IAAKA,CAAC,GAAGN,QAAQ,GAAG,GAAG,CAC1B,CAAC,CAAC;QAEH,MAAMO,gBAAgB,GAAGH,cAAc,CAAC,CAAC,CAAC;QAC1C,MAAMI,iBAAiB,GAAGJ,cAAc,CAAC,CAAC,CAAC;QAE3C;QACAnB,GAAG,CAACwB,SAAS,GAAG5C,IAAI,CAAC6C,OAAO,IAAI,IAAI,CAACrF,SAAS;QAC9C4D,GAAG,CAAC0B,QAAQ,CACV9C,IAAI,CAAC4B,CAAC,GAAGc,gBAAgB,GAAG,CAAC,EAC7B1C,IAAI,CAAC6B,CAAC,GAAGc,iBAAiB,GAAG,CAAC,EAC9BD,gBAAgB,EAChBC,iBAAiB,CAClB;QAED;QACAvB,GAAG,CAACG,WAAW,GAAG,SAAS;QAC3BH,GAAG,CAACI,SAAS,GAAG,CAAC,GAAGH,WAAW;QAE/BD,GAAG,CAAC2B,UAAU,CACZ/C,IAAI,CAAC4B,CAAC,GAAGc,gBAAgB,GAAG,CAAC,EAC7B1C,IAAI,CAAC6B,CAAC,GAAGc,iBAAiB,GAAG,CAAC,EAC9BD,gBAAgB,EAChBC,iBAAiB,CAClB;QAED;QACAvB,GAAG,CAACwB,SAAS,GAAG5C,IAAI,CAAC3C,YAAY,IAAI,IAAI,CAACA,YAAY;QACtD+D,GAAG,CAACI,SAAS,GAAG,CAAC,GAAGH,WAAW;QAC/BD,GAAG,CAAC0B,QAAQ,CACV9C,IAAI,CAAC4B,CAAC,GAAGc,gBAAgB,GAAG,CAAC,EAC7B1C,IAAI,CAAC6B,CAAC,GAAGc,iBAAiB,GAAG,CAAC,EAC9B,CAAC,GAAGtB,WAAW,EACfsB,iBAAiB,CAClB;QAED;QACAvB,GAAG,CAAC4B,SAAS,GAAG,QAAQ;QACxB5B,GAAG,CAAC6B,YAAY,GAAG,QAAQ;QAC3B7B,GAAG,CAACwB,SAAS,GAAG5C,IAAI,CAACe,KAAK,IAAI,IAAI,CAACxD,aAAa;QAChD6D,GAAG,CAAC8B,QAAQ,CAAChB,KAAK,EAAElC,IAAI,CAAC4B,CAAC,EAAE5B,IAAI,CAAC6B,CAAC,CAAC;QACnC7B,IAAI,CAACmD,gBAAgB,GAAGZ,cAAc,CAAC,CAAC;MAC1C,CAAC,CAAC,CACDa,oBAAoB,CAAC,CAACnB,UAAU,EAAElB,KAAK,EAAEK,GAAG,KAAI;QAC/C,MAAMpB,IAAI,GAAGiC,UAAwB;QACrCb,GAAG,CAACwB,SAAS,GAAG7B,KAAK;QACrB,MAAMwB,cAAc,GAAGvC,IAAI,CAACmD,gBAAgB;QAC5CZ,cAAc,IACZnB,GAAG,CAAC0B,QAAQ,CACV9C,IAAI,CAAC4B,CAAC,GAAGW,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,EAC9BvC,IAAI,CAAC6B,CAAC,GAAGU,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,EAC9BA,cAAc,CAAC,CAAC,CAAC,EACjBA,cAAc,CAAC,CAAC,CAAC,CAClB;MACL,CAAC,CAAC;MAEJ,IAAI,IAAI,CAACxE,iBAAiB,EAAE;QAC1BmB,KAAK,CAACmE,wBAAwB,CAAC,IAAI,CAACtF,iBAAiB,CAAC;QAEtD,IAAI,IAAI,CAACD,aAAa,EAAE;UACtBoB,KAAK,CAACoE,4BAA4B,CAAC,IAAI,CAACxF,aAAa,CAAC;QACxD;QAEA,IAAI,IAAI,CAACE,aAAa,EAAE;UACtB,IAAI,OAAO,IAAI,CAACA,aAAa,KAAK,QAAQ,EAAE;YAC1CkB,KAAK,CAACqE,4BAA4B,CAAC,MAAM,IAAI,CAACvF,aAAa,CAAC;UAC9D,CAAC,MAAM,IAAI,OAAO,IAAI,CAACA,aAAa,KAAK,UAAU,EAAE;YACnDkB,KAAK,CAACqE,4BAA4B,CAAC,IAAI,CAACvF,aAAa,CAAC;UACxD;QACF;MACF;MACA,IAAI,IAAI,CAACG,SAAS,EAAE;QAClBe,KAAK,CAACsE,YAAY,CAAC,MAAMtE,KAAK,CAACf,SAAS,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;MACpD;IACF;EACF;ADzFF;AC9NEzC,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,YAAY;EAAEC,IAAI,EAAEC;AAAM,CAAE,CAAC,CDkOrD,EAAE9G,YAAY,CAAC+G,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CCjO3B;AAMjBlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,oBAAoB;EAAEC,IAAI,EAAEC;AAAM,CAAE,CAAC,CD+N7D,EAAE9G,YAAY,CAAC+G,SAAS,EAAE,kBAAkB,EAAE,KAAK,CAAC,CC9N3B;AAMxBlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,OAAO;EAAEC,IAAI,EAAEG;AAAM,CAAE,CAAC,CD4NhD,EAAEhH,YAAY,CAAC+G,SAAS,EAAE,aAAa,EAAE,KAAK,CAAC,CC3NlC;AAMZlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,QAAQ;EAAEC,IAAI,EAAEG;AAAM,CAAE,CAAC,CDyNjD,EAAEhH,YAAY,CAAC+G,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC,CCxNlC;AAMblI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,UAAU;EAAEC,IAAI,EAAEG;AAAM,CAAE,CAAC,CDsNnD,EAAEhH,YAAY,CAAC+G,SAAS,EAAE,aAAa,EAAE,KAAK,CAAC,CCrN9B;AAMhBlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,UAAU;EAAEC,IAAI,EAAEG;AAAM,CAAE,CAAC,CDmNnD,EAAEhH,YAAY,CAAC+G,SAAS,EAAE,aAAa,EAAE,KAAK,CAAC,CClN3B;AAMnBlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,YAAY;EAAEC,IAAI,EAAEC;AAAM,CAAE,CAAC,CDgNrD,EAAE9G,YAAY,CAAC+G,SAAS,EAAE,eAAe,EAAE,KAAK,CAAC,CC/MlB;AAM9BlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,YAAY;EAAEC,IAAI,EAAEC;AAAM,CAAE,CAAC,CD6MrD,EAAE9G,YAAY,CAAC+G,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CC5MzB;AAMnBlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,0BAA0B;EAAEC,IAAI,EAAEC;AAAM,CAAE,CAAC,CD0MnE,EAAE9G,YAAY,CAAC+G,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC,CCzMtB;AAMzBlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,YAAY;EAAEC,IAAI,EAAEG;AAAM,CAAE,CAAC,CDuMrD,EAAEhH,YAAY,CAAC+G,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CCtM9B;AAMdlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,iBAAiB;EAAEC,IAAI,EAAEC;AAAM,CAAE,CAAC,CDoM1D,EAAE9G,YAAY,CAAC+G,SAAS,EAAE,eAAe,EAAE,KAAK,CAAC,CCnMzB;AAMvBlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,eAAe;EAAEC,IAAI,EAAEC;AAAM,CAAE,CAAC,CDiMxD,EAAE9G,YAAY,CAAC+G,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CChMtB;AAMtBlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,WAAW;EAAEC,IAAI,EAAEG;AAAM,CAAE,CAAC,CD8LpD,EAAEhH,YAAY,CAAC+G,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CC7L7B;AAMdlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,UAAU;EAAEC,IAAI,EAAEI;AAAQ,CAAE,CAAC,CD2LrD,EAAEjH,YAAY,CAAC+G,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CC1LlC;AAMTlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE+G,IAAI,EAAEK;AAAO,CAAE,CAAC,CDwL7B,EAAElH,YAAY,CAAC+G,SAAS,EAAE,iBAAiB,EAAE,KAAK,CAAC,CCvL3B;AAMvBlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE+G,IAAI,EAAEK;AAAO,CAAE,CAAC,CDqL7B,EAAElH,YAAY,CAAC+G,SAAS,EAAE,kBAAkB,EAAE,KAAK,CAAC,CCpL3B;AAMxBlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE+G,IAAI,EAAEK;AAAO,CAAE,CAAC,CDkL7B,EAAElH,YAAY,CAAC+G,SAAS,EAAE,mBAAmB,EAAE,KAAK,CAAC,CCjL3B;AAMzBlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE+G,IAAI,EAAEK;AAAO,CAAE,CAAC,CD+K7B,EAAElH,YAAY,CAAC+G,SAAS,EAAE,sBAAsB,EAAE,KAAK,CAAC,CC9K3B;AAM5BlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,gBAAgB;EAAEC,IAAI,EAAEG,MAAM,IAAIC;AAAQ,CAAE,CAAC,CD4KrE,EAAEjH,YAAY,CAAC+G,SAAS,EAAE,eAAe,EAAE,KAAK,CAAC,CC3K9B;AAMlBlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,oBAAoB;EAAEC,IAAI,EAAEG,MAAM,IAAIC;AAAQ,CAAE,CAAC,CDyKzE,EAAEjH,YAAY,CAAC+G,SAAS,EAAE,mBAAmB,EAAE,KAAK,CAAC,CCxK9B;AAMtBlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE,gBAAgB;EAAEC,IAAI,EAAEC,MAAM,IAAIG;AAAQ,CAAE,CAAC,CDsKrE,EAAEjH,YAAY,CAAC+G,SAAS,EAAE,eAAe,EAAE,KAAK,CAAC,CCrKtB;AAM1BlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE;AAAM,CAAE,CAAC,CDmKjC,EAAE5G,YAAY,CAAC+G,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC,CClKT;AAM9BlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE8G,SAAS,EAAE;AAAe,CAAE,CAAC,CDgK1C,EAAE5G,YAAY,CAAC+G,SAAS,EAAE,eAAe,EAAE,KAAK,CAAC,CC/J3B;AAMrBlI,UAAA,CAAA,CADCiB,QAAQ,CAAC;EAAE+G,IAAI,EAAEK;AAAO,CAAE,CAAC,CD6J7B,EAAElH,YAAY,CAAC+G,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CC5J3B","file":"network-graph.js","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport ForceGraph2D from 'force-graph';\n/**\n * Graph component to render graph based on nodes and links\n */\nexport class NetworkGraph extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Property name from the graph data which user wants to display as node label\n         */\n        this.nodeLabel = 'id';\n        /**\n         * Property name from the graph data which user wants to display as node tooltip label\n         */\n        this.nodeTooltipLabel = 'id';\n        /**\n         * Minimum zoom which can be done on graph\n         */\n        this.minimumZoom = 1;\n        /**\n         * Maximum zoom which can be done on graph\n         */\n        this.maximumZoom = 1000;\n        /**\n         * Background color for the canvas\n         */\n        this.canvasBgColor = 'transparent';\n        /**\n         * Link color for the graph link\n         */\n        this.linkColor = '#fff';\n        /**\n         * Left border color for the nodes (by default set to yellow)\n         */\n        this.borderAccent = '#F1C21B';\n        /**\n         * Link Width\n         */\n        this.linkWidth = 1;\n        /**\n         * Color of label text inside the node\n         */\n        this.nodeTextColor = '#fff';\n        /**\n         * Color of the nodes\n         */\n        this.nodeColor = '#262626';\n        /**\n         * Textsize of label text inside the node\n         */\n        this.textSize = 12;\n        /**\n         * Boolean to enable or disable dragging of nodes\n         */\n        this.isNodeDraggable = true;\n        /**\n         * Boolean to enable or disable Pan Interaction on canvas\n         */\n        this.isPanInteraction = true;\n        /**\n         * Boolean to enable or disable zoom-in or zoom-out on canvas\n         */\n        this.isZoomInteraction = true;\n        /**\n         * Boolean to enable or disable pointer interaction on canvas\n         */\n        this.isPointerInteraction = true;\n        /**\n         * Link Particle Width\n         */\n        this.particleWidth = 4;\n        /**\n         * Number of particles on link\n         */\n        this.numberOfParticles = 0;\n        /**\n         * particle color\n         */\n        this.particleColor = '#F1C21B';\n        /**\n         * Object to take graph data\n         */\n        this.data = null;\n        /**\n         * Object to take tooltip styling\n         */\n        this.tooltipStyles = null;\n        /**\n         * Boolean for enabling zoomToFit for canvas\n         */\n        this.zoomToFit = true;\n    }\n    /**\n     * Lifecycles Method used to render nodes and links for the graph network on canvas\n     */\n    firstUpdated() {\n        var _a, _b, _c, _d;\n        const graphContainer = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.getElementById('graph-container');\n        const parentHeight = (_b = graphContainer === null || graphContainer === void 0 ? void 0 : graphContainer.offsetParent) === null || _b === void 0 ? void 0 : _b.clientHeight;\n        const parentWidth = (_c = graphContainer === null || graphContainer === void 0 ? void 0 : graphContainer.offsetParent) === null || _c === void 0 ? void 0 : _c.clientHeight;\n        const canvasHeight = this.canvasHeight\n            ? this.canvasHeight\n            : parentHeight\n                ? parentHeight\n                : null;\n        const canvasWidth = this.canvasWidth\n            ? this.canvasWidth\n            : parentWidth\n                ? parentWidth\n                : null;\n        if (this.data && ((_d = this.shadowRoot) === null || _d === void 0 ? void 0 : _d.getElementById('graph-container'))) {\n            const graph = ForceGraph2D();\n            if (canvasWidth) {\n                graph.width(canvasWidth);\n            }\n            if (canvasHeight) {\n                graph.height(canvasHeight);\n            }\n            graph(this.shadowRoot.getElementById('graph-container'))\n                .nodeId(this.nodeLabel)\n                .nodeLabel(this.nodeTooltipLabel)\n                .graphData(this.data)\n                .minZoom(this.minimumZoom)\n                .maxZoom(this.maximumZoom)\n                .backgroundColor(this.canvasBgColor)\n                .enableNodeDrag(this.isNodeDraggable)\n                .enablePanInteraction(this.isPanInteraction)\n                .cooldownTicks(100)\n                .enableZoomInteraction(this.isZoomInteraction)\n                .enablePointerInteraction(this.isPointerInteraction)\n                .onNodeClick((node) => {\n                const event = new CustomEvent('on-node-click', {\n                    detail: node,\n                });\n                this.dispatchEvent(event);\n            })\n                .onNodeRightClick((node) => {\n                const event = new CustomEvent('on-node-right-click', {\n                    detail: node,\n                });\n                this.dispatchEvent(event);\n            })\n                .onNodeDrag(this.nodeDrag)\n                .onNodeHover((node, prevNode) => {\n                var _a;\n                const tooltip = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.graph-tooltip');\n                if (tooltip) {\n                    tooltip.style.position = 'absolute';\n                    tooltip.style.backgroundColor = '#fff';\n                    tooltip.style.padding = '8px';\n                    tooltip.style.color = '#000';\n                    if (this.tooltipStyles) {\n                        for (const [key, value] of Object.entries(this.tooltipStyles)) {\n                            tooltip.style[key] = value;\n                        }\n                    }\n                }\n                const event = new CustomEvent('on-node-hover', {\n                    detail: { node, prevNode },\n                });\n                this.dispatchEvent(event);\n            })\n                .linkCanvasObject((actualLink, ctx, globalScale) => {\n                const link = actualLink;\n                ctx.strokeStyle = this.linkColor;\n                ctx.lineWidth = this.linkWidth / globalScale;\n                if (link.source && link.target) {\n                    ctx.beginPath();\n                    ctx.moveTo(link.source.x, link.source.y);\n                    ctx.lineTo(link.target.x, link.target.y);\n                    ctx.stroke();\n                }\n            })\n                .nodeColor('red')\n                .nodeCanvasObject((actualNode, ctx, globalScale) => {\n                const node = actualNode;\n                const label = node[this.nodeLabel];\n                const fontSize = this.textSize / globalScale;\n                ctx.font = `${fontSize}px Sans-Serif`;\n                const textWidth = ctx.measureText(label).width;\n                const bckgDimensions = [textWidth, fontSize].map((n) => n + fontSize * 0.8); // some padding\n                const widthWithPadding = bckgDimensions[0];\n                const heightWithPadding = bckgDimensions[1];\n                //   Node Background\n                ctx.fillStyle = node.bgColor || this.nodeColor;\n                ctx.fillRect(node.x - widthWithPadding / 2, node.y - heightWithPadding / 2, widthWithPadding, heightWithPadding);\n                //   Node Border\n                ctx.strokeStyle = '#525252';\n                ctx.lineWidth = 2 / globalScale;\n                ctx.strokeRect(node.x - widthWithPadding / 2, node.y - heightWithPadding / 2, widthWithPadding, heightWithPadding);\n                //   Node Left Border\n                ctx.fillStyle = node.borderAccent || this.borderAccent;\n                ctx.lineWidth = 4 / globalScale;\n                ctx.fillRect(node.x - widthWithPadding / 2, node.y - heightWithPadding / 2, 2 / globalScale, heightWithPadding);\n                //   Node Text\n                ctx.textAlign = 'center';\n                ctx.textBaseline = 'middle';\n                ctx.fillStyle = node.color || this.nodeTextColor;\n                ctx.fillText(label, node.x, node.y);\n                node.__bckgDimensions = bckgDimensions; // to re-use in nodePointerAreaPaint\n            })\n                .nodePointerAreaPaint((actualNode, color, ctx) => {\n                const node = actualNode;\n                ctx.fillStyle = color;\n                const bckgDimensions = node.__bckgDimensions;\n                bckgDimensions &&\n                    ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, bckgDimensions[0], bckgDimensions[1]);\n            });\n            if (this.numberOfParticles) {\n                graph.linkDirectionalParticles(this.numberOfParticles);\n                if (this.particleWidth) {\n                    graph.linkDirectionalParticleWidth(this.particleWidth);\n                }\n                if (this.particleColor) {\n                    if (typeof this.particleColor === 'string') {\n                        graph.linkDirectionalParticleColor(() => this.particleColor);\n                    }\n                    else if (typeof this.particleColor === 'function') {\n                        graph.linkDirectionalParticleColor(this.particleColor);\n                    }\n                }\n            }\n            if (this.zoomToFit) {\n                graph.onEngineStop(() => graph.zoomToFit(400, 20));\n            }\n        }\n    }\n}\n__decorate([\n    property({ attribute: 'node-label', type: String })\n], NetworkGraph.prototype, \"nodeLabel\", void 0);\n__decorate([\n    property({ attribute: 'node-tooltip-label', type: String })\n], NetworkGraph.prototype, \"nodeTooltipLabel\", void 0);\n__decorate([\n    property({ attribute: 'width', type: Number })\n], NetworkGraph.prototype, \"canvasWidth\", void 0);\n__decorate([\n    property({ attribute: 'height', type: Number })\n], NetworkGraph.prototype, \"canvasHeight\", void 0);\n__decorate([\n    property({ attribute: 'min-zoom', type: Number })\n], NetworkGraph.prototype, \"minimumZoom\", void 0);\n__decorate([\n    property({ attribute: 'max-zoom', type: Number })\n], NetworkGraph.prototype, \"maximumZoom\", void 0);\n__decorate([\n    property({ attribute: 'background', type: String })\n], NetworkGraph.prototype, \"canvasBgColor\", void 0);\n__decorate([\n    property({ attribute: 'link-color', type: String })\n], NetworkGraph.prototype, \"linkColor\", void 0);\n__decorate([\n    property({ attribute: 'node-border-accent-color', type: String })\n], NetworkGraph.prototype, \"borderAccent\", void 0);\n__decorate([\n    property({ attribute: 'link-width', type: Number })\n], NetworkGraph.prototype, \"linkWidth\", void 0);\n__decorate([\n    property({ attribute: 'node-text-color', type: String })\n], NetworkGraph.prototype, \"nodeTextColor\", void 0);\n__decorate([\n    property({ attribute: 'node-bg-color', type: String })\n], NetworkGraph.prototype, \"nodeColor\", void 0);\n__decorate([\n    property({ attribute: 'text-size', type: Number })\n], NetworkGraph.prototype, \"textSize\", void 0);\n__decorate([\n    property({ attribute: 'nodeDrag', type: Function })\n], NetworkGraph.prototype, \"nodeDrag\", void 0);\n__decorate([\n    property({ type: Boolean })\n], NetworkGraph.prototype, \"isNodeDraggable\", void 0);\n__decorate([\n    property({ type: Boolean })\n], NetworkGraph.prototype, \"isPanInteraction\", void 0);\n__decorate([\n    property({ type: Boolean })\n], NetworkGraph.prototype, \"isZoomInteraction\", void 0);\n__decorate([\n    property({ type: Boolean })\n], NetworkGraph.prototype, \"isPointerInteraction\", void 0);\n__decorate([\n    property({ attribute: 'particle-width', type: Number || Function })\n], NetworkGraph.prototype, \"particleWidth\", void 0);\n__decorate([\n    property({ attribute: 'number-of-particle', type: Number || Function })\n], NetworkGraph.prototype, \"numberOfParticles\", void 0);\n__decorate([\n    property({ attribute: 'particle-color', type: String || Function })\n], NetworkGraph.prototype, \"particleColor\", void 0);\n__decorate([\n    property({ attribute: 'data' })\n], NetworkGraph.prototype, \"data\", void 0);\n__decorate([\n    property({ attribute: 'tooltipStyles' })\n], NetworkGraph.prototype, \"tooltipStyles\", void 0);\n__decorate([\n    property({ type: Boolean })\n], NetworkGraph.prototype, \"zoomToFit\", void 0);\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport ForceGraph2D, { GraphData } from 'force-graph';\nimport { CustomLinks, CustomNode } from '../defs';\n\n/**\n * Graph component to render graph based on nodes and links\n */\nexport class NetworkGraph extends LitElement {\n  /**\n   * Property name from the graph data which user wants to display as node label\n   */\n  @property({ attribute: 'node-label', type: String })\n  nodeLabel = 'id';\n\n  /**\n   * Property name from the graph data which user wants to display as node tooltip label\n   */\n  @property({ attribute: 'node-tooltip-label', type: String })\n  nodeTooltipLabel = 'id';\n\n  /**\n   * Canvas width\n   */\n  @property({ attribute: 'width', type: Number })\n  canvasWidth;\n\n  /**\n   * Canvas height\n   */\n  @property({ attribute: 'height', type: Number })\n  canvasHeight;\n\n  /**\n   * Minimum zoom which can be done on graph\n   */\n  @property({ attribute: 'min-zoom', type: Number })\n  minimumZoom = 1;\n\n  /**\n   * Maximum zoom which can be done on graph\n   */\n  @property({ attribute: 'max-zoom', type: Number })\n  maximumZoom = 1000;\n\n  /**\n   * Background color for the canvas\n   */\n  @property({ attribute: 'background', type: String })\n  canvasBgColor = 'transparent';\n\n  /**\n   * Link color for the graph link\n   */\n  @property({ attribute: 'link-color', type: String })\n  linkColor = '#fff';\n\n  /**\n   * Left border color for the nodes (by default set to yellow)\n   */\n  @property({ attribute: 'node-border-accent-color', type: String })\n  borderAccent = '#F1C21B';\n\n  /**\n   * Link Width\n   */\n  @property({ attribute: 'link-width', type: Number })\n  linkWidth = 1;\n\n  /**\n   * Color of label text inside the node\n   */\n  @property({ attribute: 'node-text-color', type: String })\n  nodeTextColor = '#fff';\n\n  /**\n   * Color of the nodes\n   */\n  @property({ attribute: 'node-bg-color', type: String })\n  nodeColor = '#262626';\n\n  /**\n   * Textsize of label text inside the node\n   */\n  @property({ attribute: 'text-size', type: Number })\n  textSize = 12;\n\n  /**\n   * Callback function executed when node is dragged\n   */\n  @property({ attribute: 'nodeDrag', type: Function })\n  nodeDrag;\n\n  /**\n   * Boolean to enable or disable dragging of nodes\n   */\n  @property({ type: Boolean })\n  isNodeDraggable = true;\n\n  /**\n   * Boolean to enable or disable Pan Interaction on canvas\n   */\n  @property({ type: Boolean })\n  isPanInteraction = true;\n\n  /**\n   * Boolean to enable or disable zoom-in or zoom-out on canvas\n   */\n  @property({ type: Boolean })\n  isZoomInteraction = true;\n\n  /**\n   * Boolean to enable or disable pointer interaction on canvas\n   */\n  @property({ type: Boolean })\n  isPointerInteraction = true;\n\n  /**\n   * Link Particle Width\n   */\n  @property({ attribute: 'particle-width', type: Number || Function })\n  particleWidth = 4;\n\n  /**\n   * Number of particles on link\n   */\n  @property({ attribute: 'number-of-particle', type: Number || Function })\n  numberOfParticles = 0;\n\n  /**\n   * particle color\n   */\n  @property({ attribute: 'particle-color', type: String || Function })\n  particleColor = '#F1C21B';\n\n  /**\n   * Object to take graph data\n   */\n  @property({ attribute: 'data' })\n  data: GraphData | null = null;\n\n  /**\n   * Object to take tooltip styling\n   */\n  @property({ attribute: 'tooltipStyles' })\n  tooltipStyles = null;\n\n  /**\n   * Boolean for enabling zoomToFit for canvas\n   */\n  @property({ type: Boolean })\n  zoomToFit = true;\n\n  /**\n   * Lifecycles Method used to render nodes and links for the graph network on canvas\n   */\n  firstUpdated() {\n    const graphContainer = this.shadowRoot?.getElementById('graph-container');\n    const parentHeight = graphContainer?.offsetParent?.clientHeight;\n    const parentWidth = graphContainer?.offsetParent?.clientHeight;\n\n    const canvasHeight = this.canvasHeight\n      ? this.canvasHeight\n      : parentHeight\n      ? parentHeight\n      : null;\n    const canvasWidth = this.canvasWidth\n      ? this.canvasWidth\n      : parentWidth\n      ? parentWidth\n      : null;\n\n    if (this.data && this.shadowRoot?.getElementById('graph-container')) {\n      const graph = ForceGraph2D();\n      if (canvasWidth) {\n        graph.width(canvasWidth);\n      }\n      if (canvasHeight) {\n        graph.height(canvasHeight);\n      }\n\n      graph(this.shadowRoot.getElementById('graph-container') as HTMLElement)\n        .nodeId(this.nodeLabel)\n        .nodeLabel(this.nodeTooltipLabel)\n        .graphData(this.data)\n        .minZoom(this.minimumZoom)\n        .maxZoom(this.maximumZoom)\n        .backgroundColor(this.canvasBgColor)\n        .enableNodeDrag(this.isNodeDraggable)\n        .enablePanInteraction(this.isPanInteraction)\n        .cooldownTicks(100)\n        .enableZoomInteraction(this.isZoomInteraction)\n        .enablePointerInteraction(this.isPointerInteraction)\n        .onNodeClick((node) => {\n          const event = new CustomEvent('on-node-click', {\n            detail: node,\n          });\n\n          this.dispatchEvent(event);\n        })\n        .onNodeRightClick((node) => {\n          const event = new CustomEvent('on-node-right-click', {\n            detail: node,\n          });\n\n          this.dispatchEvent(event);\n        })\n        .onNodeDrag(this.nodeDrag)\n        .onNodeHover((node, prevNode) => {\n          const tooltip = this.shadowRoot?.querySelector(\n            '.graph-tooltip'\n          ) as HTMLElement;\n          if (tooltip) {\n            tooltip.style.position = 'absolute';\n            tooltip.style.backgroundColor = '#fff';\n            tooltip.style.padding = '8px';\n            tooltip.style.color = '#000';\n            if (this.tooltipStyles) {\n              for (const [key, value] of Object.entries(this.tooltipStyles)) {\n                tooltip.style[key] = value;\n              }\n            }\n          }\n          const event = new CustomEvent('on-node-hover', {\n            detail: { node, prevNode },\n          });\n\n          this.dispatchEvent(event);\n        })\n        .linkCanvasObject((actualLink, ctx, globalScale) => {\n          const link = actualLink as CustomLinks;\n          ctx.strokeStyle = this.linkColor;\n          ctx.lineWidth = this.linkWidth / globalScale;\n\n          if (link.source && link.target) {\n            ctx.beginPath();\n            ctx.moveTo(link.source.x, link.source.y);\n            ctx.lineTo(link.target.x, link.target.y);\n            ctx.stroke();\n          }\n        })\n        .nodeColor('red')\n        .nodeCanvasObject((actualNode, ctx, globalScale) => {\n          const node = actualNode as CustomNode;\n          const label = node[this.nodeLabel] as string;\n          const fontSize = this.textSize / globalScale;\n          ctx.font = `${fontSize}px Sans-Serif`;\n          const textWidth = ctx.measureText(label).width;\n          const bckgDimensions = [textWidth, fontSize].map(\n            (n) => n + fontSize * 0.8\n          ); // some padding\n\n          const widthWithPadding = bckgDimensions[0];\n          const heightWithPadding = bckgDimensions[1];\n\n          //   Node Background\n          ctx.fillStyle = node.bgColor || this.nodeColor;\n          ctx.fillRect(\n            node.x - widthWithPadding / 2,\n            node.y - heightWithPadding / 2,\n            widthWithPadding,\n            heightWithPadding\n          );\n\n          //   Node Border\n          ctx.strokeStyle = '#525252';\n          ctx.lineWidth = 2 / globalScale;\n\n          ctx.strokeRect(\n            node.x - widthWithPadding / 2,\n            node.y - heightWithPadding / 2,\n            widthWithPadding,\n            heightWithPadding\n          );\n\n          //   Node Left Border\n          ctx.fillStyle = node.borderAccent || this.borderAccent;\n          ctx.lineWidth = 4 / globalScale;\n          ctx.fillRect(\n            node.x - widthWithPadding / 2,\n            node.y - heightWithPadding / 2,\n            2 / globalScale,\n            heightWithPadding\n          );\n\n          //   Node Text\n          ctx.textAlign = 'center';\n          ctx.textBaseline = 'middle';\n          ctx.fillStyle = node.color || this.nodeTextColor;\n          ctx.fillText(label, node.x, node.y);\n          node.__bckgDimensions = bckgDimensions; // to re-use in nodePointerAreaPaint\n        })\n        .nodePointerAreaPaint((actualNode, color, ctx) => {\n          const node = actualNode as CustomNode;\n          ctx.fillStyle = color;\n          const bckgDimensions = node.__bckgDimensions;\n          bckgDimensions &&\n            ctx.fillRect(\n              node.x - bckgDimensions[0] / 2,\n              node.y - bckgDimensions[1] / 2,\n              bckgDimensions[0],\n              bckgDimensions[1]\n            );\n        });\n\n      if (this.numberOfParticles) {\n        graph.linkDirectionalParticles(this.numberOfParticles);\n\n        if (this.particleWidth) {\n          graph.linkDirectionalParticleWidth(this.particleWidth);\n        }\n\n        if (this.particleColor) {\n          if (typeof this.particleColor === 'string') {\n            graph.linkDirectionalParticleColor(() => this.particleColor);\n          } else if (typeof this.particleColor === 'function') {\n            graph.linkDirectionalParticleColor(this.particleColor);\n          }\n        }\n      }\n      if (this.zoomToFit) {\n        graph.onEngineStop(() => graph.zoomToFit(400, 20));\n      }\n    }\n  }\n}\n"]}