{"version":3,"sources":["components/ux-control/src/ux-control.template.ts","components/ux-control/src/ux-control.template.js"],"names":["html","settings","stablePrefix","clabsPrefix","Edit16","TrashCan16","Add16","RequestQuote16","Close16","Checkmark16","getHTMLRows","customElementClass","promptSamples","_onEditButtonClick","onEditButtonClick","onDeleteButtonClick","map","item","input","Object","keys","context_variables","length","entries","output","view_id","parameters","bind","getSelectViews","viewList","views","view","getEditModal","_currentPrompt","currentPrompt","_currentContextVariables","currentContextVariables","_currentResponse","currentResponse","_currentResponseView","currentResponseView","_currentParameters","currentParameters","isEditModalOpen","_onEditModalClose","onEditModalClose","_onEditModalCancel","onEditModalCancel","onSavePrompt","triggerSubmit","_isNewPrompt","isNewPrompt","currentView","modalHeader","selectedView","contextVariables","name","variable","parameter","key","value","uxControlTemplate","open","_onListModalClose","onListModalClose","_showRename","showRename","_showAddContextVariable","showAddContextVariable","_showAddParameter","showAddParameter","_toggleRename","toggleRename","_toggleAddContextVariable","toggleAddContextVariable","_toggleAddParameter","toggleAddParameter","addContextVariable","addParameter","_handleContextVariableInput","handleContextVariableInput","_handleParameterInput","handleParameterInput","onSaveRename","_handleNameInput","handleNameInput","onChangeView","_onNewPrompt","onNewPrompt","handleCloseTag","slot"],"mappings":"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","file":"ux-control.template.js","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { html } from 'lit';\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nconst { stablePrefix: clabsPrefix } = settings;\nimport '@carbon/web-components/es/components/modal/index.js';\nimport '@carbon/web-components/es/components/data-table/index.js';\nimport '@carbon/web-components/es/components/button/index.js';\nimport '@carbon/web-components/es/components/form-group/index.js';\nimport Edit16 from '@carbon/web-components/es/icons/edit/16.js';\nimport TrashCan16 from '@carbon/web-components/es/icons/trash-can/16.js';\nimport Add16 from '@carbon/web-components/es/icons/add/16.js';\nimport RequestQuote16 from '@carbon/web-components/es/icons/request-quote/16.js';\nimport Close16 from '@carbon/web-components/es/icons/close/16.js';\nimport Checkmark16 from '@carbon/web-components/es/icons/checkmark/16.js';\n\nimport '@carbon/web-components/es/components/tag/index.js';\n\nimport '@carbon/web-components/es/components/text-input/index.js';\nimport '@carbon/web-components/es/components/select/index.js';\nimport '@carbon/web-components/es/components/form/index.js';\nimport '@carbon/web-components/es/components/tooltip/index.js';\n\n/**\n * Render HTML rows\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nfunction getHTMLRows(customElementClass) {\n  const {\n    promptSamples: promptSamples,\n    _onEditButtonClick: onEditButtonClick,\n    onDeleteButtonClick: onDeleteButtonClick,\n  } = customElementClass;\n\n  return html`\n    ${promptSamples.map(\n      (item) =>\n        html`<cds-table-row>\n          <cds-table-cell\n            >${item.input.input}\n            ${Object.keys(item.input.context_variables).length > 0\n              ? html`${Object.entries(item.input.context_variables).map(\n                  (item) =>\n                    item.length > 0\n                      ? html`\n                          <cds-tooltip align=\"bottom\">\n                            <div\n                              class=\"sb-tooltip-trigger\"\n                              aria-labelledby=\"content\">\n                              <cds-tag type=\"gray\"\n                                ><span>${item[1]}</span></cds-tag\n                              >\n                            </div>\n                            <cds-tooltip-content id=\"content\">\n                              ${item[0]}: ${item[1]}\n                            </cds-tooltip-content>\n                          </cds-tooltip>\n                        `\n                      : html``\n                )}`\n              : html``}\n          </cds-table-cell>\n          <cds-table-cell>${item.output.output}</cds-table-cell>\n          <cds-table-cell\n            >${item.output.view_id}\n            ${Object.keys(item.output.parameters).length > 0\n              ? html`${Object.entries(item.output.parameters).map((item) =>\n                  item.length > 0\n                    ? html`\n                        <cds-tooltip align=\"bottom\">\n                          <div\n                            class=\"sb-tooltip-trigger\"\n                            aria-labelledby=\"content\">\n                            <cds-tag type=\"gray\"\n                              ><span>${item[1]}</span></cds-tag\n                            >\n                          </div>\n                          <cds-tooltip-content id=\"content\">\n                            ${item[0]}: ${item[1]}\n                          </cds-tooltip-content>\n                        </cds-tooltip>\n                      `\n                    : html``\n                )}`\n              : html``}\n          </cds-table-cell>\n          <cds-table-cell class=\"${clabsPrefix}--table-actions\"\n            ><cds-button\n              @click=${onEditButtonClick.bind(\n                customElementClass,\n                item.input.input,\n                item.input.context_variables,\n                item.output.output,\n                item.output.view_id,\n                item.output.parameters\n              )}\n              kind=\"ghost\">\n              ${Edit16()} </cds-button\n            ><cds-button\n              @click=${onDeleteButtonClick.bind(\n                customElementClass,\n                item.input.input,\n                item.input.context_variables,\n                item.output.output,\n                item.output.view_id,\n                item.output.parameters\n              )}\n              kind=\"danger--ghost\">\n              ${TrashCan16()}\n            </cds-button></cds-table-cell\n          >\n        </cds-table-row>`\n    )}\n  `;\n}\n\n/**\n * Render views for select\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nfunction getSelectViews(customElementClass) {\n  const { viewList: viewList } = customElementClass;\n\n  const views = viewList.map((view) => {\n    return html`<cds-select-item value=\"${view}\">${view}</cds-select-item>`;\n  });\n\n  return views;\n}\n\n/**\n * Render HTML rows\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nfunction getEditModal(customElementClass) {\n  const {\n    viewList: viewList,\n    _currentPrompt: currentPrompt,\n    _currentContextVariables: currentContextVariables,\n    _currentResponse: currentResponse,\n    _currentResponseView: currentResponseView,\n    _currentParameters: currentParameters,\n    isEditModalOpen,\n    _onEditModalClose: onEditModalClose,\n    _onEditModalCancel: onEditModalCancel,\n    onSavePrompt: onSavePrompt,\n    triggerSubmit: triggerSubmit,\n    _isNewPrompt: isNewPrompt,\n    currentView: currentView,\n  } = customElementClass;\n\n  let modalHeader, selectedView, contextVariables, parameters;\n\n  if (isNewPrompt) {\n    modalHeader = `Add new prompt for ${currentView.name}`;\n    selectedView = currentView.name;\n    contextVariables =\n      currentView.contextVariables.length <= 0\n        ? html`<div>\n            This intent/view does not provide any context variables.\n          </div>`\n        : currentView.contextVariables.map(\n            (variable) => html` <cds-text-input\n              class=\"${clabsPrefix}--edit-form-item ${clabsPrefix}--edit-context-variable\"\n              label=${variable}\n              invalid-text=\"Error message\"\n              placeholder=\"Enter sample value...\">\n            </cds-text-input>`\n          );\n    parameters =\n      currentView.parameters.length <= 0\n        ? html`<div>This intent/view does not provide any parameters.</div>`\n        : currentView.parameters.map(\n            (parameter) => html` <cds-text-input\n              class=\"${clabsPrefix}--edit-form-item ${clabsPrefix}--edit-parameter\"\n              label=${parameter}\n              invalid-text=\"Error message\"\n              placeholder=\"Enter expected value...\">\n            </cds-text-input>`\n          );\n  } else {\n    modalHeader = 'Edit prompt';\n    selectedView = currentResponseView;\n    contextVariables =\n      Object.keys(currentContextVariables).length <= 0\n        ? html`<div>\n            This intent/view does not provide any context variables.\n          </div>`\n        : Object.entries(currentContextVariables).map(\n            ([key, value]) => html` <cds-text-input\n              class=\"${clabsPrefix}--edit-form-item ${clabsPrefix}--edit-context-variable\"\n              label=${key}\n              invalid-text=\"Error message\"\n              placeholder=\"Enter sample value...\"\n              value=${value}>\n            </cds-text-input>`\n          );\n    parameters =\n      Object.keys(currentParameters).length <= 0\n        ? html`<div>This intent/view does not provide any parameters.</div>`\n        : Object.entries(currentParameters).map(\n            ([key, value]) => html` <cds-text-input\n              class=\"${clabsPrefix}--edit-form-item ${clabsPrefix}--edit-parameter\"\n              label=${key}\n              invalid-text=\"Error message\"\n              placeholder=\"Enter expected value...\"\n              value=${value}>\n            </cds-text-input>`\n          );\n  }\n\n  return html`<cds-modal\n    id=\"modal-edit-prompt\"\n    size=\"lg\"\n    ?open=${isEditModalOpen}\n    @cds-modal-closed=${onEditModalClose}>\n    <cds-modal-header>\n      <cds-modal-close-button></cds-modal-close-button>\n      <cds-modal-heading>${modalHeader}</cds-modal-heading>\n    </cds-modal-header>\n    <cds-modal-body>\n      <cds-form-group\n        id=\"${clabsPrefix}--edit-prompt-form\"\n        @submit=${onSavePrompt}>\n        <cds-stack gap=\"10\">\n          <div class=\"${clabsPrefix}--prompt-edit-form\">\n            <div class=\"${clabsPrefix}--edit-input\">\n              <cds-text-input\n                class=\"${clabsPrefix}--edit-form-item\"\n                label=\"Sample prompt\"\n                invalid-text=\"Error message\"\n                placeholder=\"Enter sample prompt...\"\n                helper-text=\" \"\n                value=${currentPrompt}>\n              </cds-text-input>\n\n              <h4>Context variables</h4>\n              ${contextVariables}\n            </div>\n            <div class=\"${clabsPrefix}--edit-output\">\n              <cds-text-input\n                class=\"${clabsPrefix}--edit-form-item\"\n                label=\"Expected message\"\n                invalid-text=\"Error message\"\n                placeholder=\"Enter expected generated message...\"\n                value=${currentResponse}>\n              </cds-text-input>\n\n              <cds-select\n                class=\"${clabsPrefix}--edit-form-item\"\n                helper-text=\" \"\n                label-text=\"Intent/View\"\n                value=${selectedView}>\n                ${viewList.map(\n                  (view) =>\n                    html`<cds-select-item value=\"${view}\"\n                      >${view}</cds-select-item\n                    >`\n                )}\n              </cds-select>\n\n              <h4>Expected intent/view parameters</h4>\n              ${parameters}\n            </div>\n          </div>\n        </cds-stack>\n      </cds-form-group>\n    </cds-modal-body>\n    <cds-modal-footer>\n      <cds-modal-footer-button kind=\"secondary\" @click=${onEditModalCancel}\n        >Cancel</cds-modal-footer-button\n      >\n      <cds-modal-footer-button @click=${triggerSubmit} kind=\"primary\"\n        >Save</cds-modal-footer-button\n      >\n    </cds-modal-footer>\n  </cds-modal>`;\n}\n\n/**\n * Lit template for UX Control\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nexport function uxControlTemplate(customElementClass) {\n  const {\n    currentView: currentView,\n    open,\n    _onListModalClose: onListModalClose,\n    _showRename: showRename,\n    _showAddContextVariable: showAddContextVariable,\n    _showAddParameter: showAddParameter,\n    _toggleRename: toggleRename,\n    _toggleAddContextVariable: toggleAddContextVariable,\n    _toggleAddParameter: toggleAddParameter,\n    addContextVariable: addContextVariable,\n    addParameter: addParameter,\n    _handleContextVariableInput: handleContextVariableInput,\n    _handleParameterInput: handleParameterInput,\n    onSaveRename: onSaveRename,\n    _handleNameInput: handleNameInput,\n    onChangeView: onChangeView,\n    _onNewPrompt: onNewPrompt,\n    handleCloseTag: handleCloseTag,\n  } = customElementClass;\n\n  return html` <div class=\"${clabsPrefix}--ux-control\">\n    <cds-modal\n      id=\"modal-prompt-list\"\n      size=\"lg\"\n      ?has-scrolling-content=${true}\n      ?open=${open}\n      @cds-modal-closed=${onListModalClose}>\n      <cds-modal-header>\n        <cds-modal-close-button></cds-modal-close-button>\n        <cds-modal-heading class=\"${clabsPrefix}--heading-container\">\n          <div class=\"${clabsPrefix}--heading\">\n            <div class=\"${clabsPrefix}--heading-tune-prompts\">\n              Tune prompts for\n            </div>\n            ${!showRename\n              ? html`<cds-select\n                    class=\"${clabsPrefix}--view-dropdown\"\n                    inline=\"true\"\n                    value=${currentView.name}\n                    @cds-select-selected=${onChangeView}>\n                    ${getSelectViews(customElementClass)}\n                  </cds-select>\n\n                  <cds-tooltip align=\"bottom\">\n                    <div class=\"sb-tooltip-trigger\" aria-labelledby=\"content\">\n                      <cds-button @click=${toggleRename} kind=\"ghost\">\n                        ${RequestQuote16()}\n                      </cds-button>\n                    </div>\n                    <cds-tooltip-content id=\"content\">\n                      Rename intent/view</cds-tooltip-content\n                    >\n                  </cds-tooltip>`\n              : html`\n                  <div class=\"${clabsPrefix}--rename\">\n                    <cds-form-item>\n                      <cds-text-input\n                        class=\"${clabsPrefix}--rename-text\"\n                        invalid-text=\"Error message\"\n                        placeholder=\"Enter new view name...\"\n                        value=${currentView.name}\n                        @input=${handleNameInput}>\n                      </cds-text-input>\n                    </cds-form-item>\n                  </div>\n                  <cds-tooltip align=\"bottom\">\n                    <div class=\"sb-tooltip-trigger\" aria-labelledby=\"content\">\n                      <cds-button @click=${toggleRename} kind=\"danger--ghost\">\n                        ${Close16()}\n                      </cds-button>\n                    </div>\n                    <cds-tooltip-content id=\"content\">\n                      Cancel rename</cds-tooltip-content\n                    >\n                  </cds-tooltip>\n                  <cds-tooltip align=\"bottom\">\n                    <div class=\"sb-tooltip-trigger\" aria-labelledby=\"content\">\n                      <cds-button @click=${onSaveRename} kind=\"ghost\">\n                        ${Checkmark16()}\n                      </cds-button>\n                    </div>\n                    <cds-tooltip-content id=\"content\">\n                      Save rename</cds-tooltip-content\n                    >\n                  </cds-tooltip>\n                `}\n          </div>\n\n          <div class=\"${clabsPrefix}--header-view-info\">\n            <div class=\"${clabsPrefix}--header-context-variables\">\n              <h6 style=\"margin:0;\">Context Variables:</h6>\n              ${currentView.contextVariables.length <= 0\n                ? html`<div>\n                    This intent/view does not provide any parameters.\n                  </div>`\n                : currentView.contextVariables.map(\n                    (variable) => html`<cds-tag\n                      filter\n                      type=\"gray\"\n                      title=\"${variable}\"\n                      textContent=\"${variable}\"\n                      aria-label=\"Context variable\"\n                      @cds-tag-closed=${handleCloseTag}>\n                      ${variable}\n                    </cds-tag>`\n                  )}\n              ${!showAddContextVariable\n                ? html` <cds-tag\n                    class=\"${clabsPrefix}--add-context-variable-tag\"\n                    @click=${toggleAddContextVariable}\n                    type=\"gray\">\n                    ${Add16({ slot: 'icon' })} Add context variable\n                  </cds-tag>`\n                : html`\n                    <div class=\"${clabsPrefix}--enter-new\">\n                      <cds-form-item>\n                        <cds-text-input\n                          class=\"${clabsPrefix}--new-context-variable\"\n                          invalid-text=\"Error message\"\n                          placeholder=\"Enter new context variable name...\"\n                          @input=${handleContextVariableInput}>\n                        </cds-text-input>\n                      </cds-form-item>\n                      <cds-tooltip align=\"bottom\">\n                        <div\n                          class=\"sb-tooltip-trigger\"\n                          aria-labelledby=\"content\">\n                          <cds-button\n                            @click=${toggleAddContextVariable}\n                            kind=\"danger--ghost\">\n                            ${Close16()}\n                          </cds-button>\n                        </div>\n                        <cds-tooltip-content id=\"content\">\n                          Cancel</cds-tooltip-content\n                        >\n                      </cds-tooltip>\n                      <cds-tooltip align=\"bottom\">\n                        <div\n                          class=\"sb-tooltip-trigger\"\n                          aria-labelledby=\"content\">\n                          <cds-button @click=${addContextVariable} kind=\"ghost\">\n                            ${Checkmark16()}\n                          </cds-button>\n                        </div>\n                        <cds-tooltip-content id=\"content\">\n                          Save new context variable</cds-tooltip-content\n                        >\n                      </cds-tooltip>\n                    </div>\n                  `}\n            </div>\n            <div class=\"${clabsPrefix}--header-parameters\">\n              <h6 style=\"margin:0;\">Parameters:</h6>\n\n              ${currentView.parameters.length <= 0\n                ? html`<div>\n                    This intent/view does not provide any parameters.\n                  </div>`\n                : currentView.parameters.map(\n                    (parameter) => html`<cds-tag\n                      filter\n                      type=\"gray\"\n                      title=\"${parameter}\"\n                      textContent=\"${parameter}\"\n                      aria-label=\"Parameter\"\n                      @cds-tag-closed=${handleCloseTag}>\n                      ${parameter}\n                    </cds-tag>`\n                  )}\n              ${!showAddParameter\n                ? html`<cds-tag\n                    class=\"${clabsPrefix}--add-parameter-tag\"\n                    @click=${toggleAddParameter}\n                    type=\"gray\"\n                    >${Add16()} Add parameter\n                  </cds-tag>`\n                : html`<div class=\"${clabsPrefix}--enter-new\">\n                    <cds-form-item>\n                      <cds-text-input\n                        class=\"${clabsPrefix}--new-parameter\"\n                        invalid-text=\"Error message\"\n                        placeholder=\"Enter new parameter name...\"\n                        @input=${handleParameterInput}>\n                      </cds-text-input>\n                    </cds-form-item>\n                    <cds-tooltip align=\"bottom\">\n                      <div class=\"sb-tooltip-trigger\" aria-labelledby=\"content\">\n                        <cds-button\n                          @click=${toggleAddParameter}\n                          kind=\"danger--ghost\">\n                          ${Close16()}\n                        </cds-button>\n                      </div>\n                      <cds-tooltip-content id=\"content\">\n                        Cancel</cds-tooltip-content\n                      >\n                    </cds-tooltip>\n                    <cds-tooltip align=\"bottom\">\n                      <div class=\"sb-tooltip-trigger\" aria-labelledby=\"content\">\n                        <cds-button @click=${addParameter} kind=\"ghost\">\n                          ${Checkmark16()}\n                        </cds-button>\n                      </div>\n                      <cds-tooltip-content id=\"content\">\n                        Save new parameter</cds-tooltip-content\n                      >\n                    </cds-tooltip>\n                  </div>`}\n            </div>\n          </div>\n        </cds-modal-heading>\n      </cds-modal-header>\n      <cds-modal-body>\n        <cds-table>\n          <cds-table-head>\n            <cds-table-header-row>\n              <cds-table-header-cell>Prompt</cds-table-header-cell>\n              <cds-table-header-cell>Response</cds-table-header-cell>\n              <cds-table-header-cell>Intent/View</cds-table-header-cell>\n              <cds-table-header-cell>Actions</cds-table-header-cell>\n            </cds-table-header-row>\n          </cds-table-head>\n\n          <cds-table-body> ${getHTMLRows(customElementClass)} </cds-table-body>\n        </cds-table>\n      </cds-modal-body>\n      <cds-modal-footer>\n        <cds-modal-footer-button @click=${onNewPrompt} kind=\"primary\"\n          >Add new prompt</cds-modal-footer-button\n        >\n      </cds-modal-footer>\n    </cds-modal>\n\n    ${getEditModal(customElementClass)}\n  </div>`;\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { html } from 'lit';\nimport { settings } from '@carbon-labs/utilities/es/settings/index.js';\nconst { stablePrefix: clabsPrefix } = settings;\nimport '@carbon/web-components/es/components/modal/index.js';\nimport '@carbon/web-components/es/components/data-table/index.js';\nimport '@carbon/web-components/es/components/button/index.js';\nimport '@carbon/web-components/es/components/form-group/index.js';\nimport Edit16 from '@carbon/web-components/es/icons/edit/16.js';\nimport TrashCan16 from '@carbon/web-components/es/icons/trash-can/16.js';\nimport Add16 from '@carbon/web-components/es/icons/add/16.js';\nimport RequestQuote16 from '@carbon/web-components/es/icons/request-quote/16.js';\nimport Close16 from '@carbon/web-components/es/icons/close/16.js';\nimport Checkmark16 from '@carbon/web-components/es/icons/checkmark/16.js';\nimport '@carbon/web-components/es/components/tag/index.js';\nimport '@carbon/web-components/es/components/text-input/index.js';\nimport '@carbon/web-components/es/components/select/index.js';\nimport '@carbon/web-components/es/components/form/index.js';\nimport '@carbon/web-components/es/components/tooltip/index.js';\n/**\n * Render HTML rows\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nfunction getHTMLRows(customElementClass) {\n    const { promptSamples: promptSamples, _onEditButtonClick: onEditButtonClick, onDeleteButtonClick: onDeleteButtonClick, } = customElementClass;\n    return html `\n    ${promptSamples.map((item) => html `<cds-table-row>\n          <cds-table-cell\n            >${item.input.input}\n            ${Object.keys(item.input.context_variables).length > 0\n        ? html `${Object.entries(item.input.context_variables).map((item) => item.length > 0\n            ? html `\n                          <cds-tooltip align=\"bottom\">\n                            <div\n                              class=\"sb-tooltip-trigger\"\n                              aria-labelledby=\"content\">\n                              <cds-tag type=\"gray\"\n                                ><span>${item[1]}</span></cds-tag\n                              >\n                            </div>\n                            <cds-tooltip-content id=\"content\">\n                              ${item[0]}: ${item[1]}\n                            </cds-tooltip-content>\n                          </cds-tooltip>\n                        `\n            : html ``)}`\n        : html ``}\n          </cds-table-cell>\n          <cds-table-cell>${item.output.output}</cds-table-cell>\n          <cds-table-cell\n            >${item.output.view_id}\n            ${Object.keys(item.output.parameters).length > 0\n        ? html `${Object.entries(item.output.parameters).map((item) => item.length > 0\n            ? html `\n                        <cds-tooltip align=\"bottom\">\n                          <div\n                            class=\"sb-tooltip-trigger\"\n                            aria-labelledby=\"content\">\n                            <cds-tag type=\"gray\"\n                              ><span>${item[1]}</span></cds-tag\n                            >\n                          </div>\n                          <cds-tooltip-content id=\"content\">\n                            ${item[0]}: ${item[1]}\n                          </cds-tooltip-content>\n                        </cds-tooltip>\n                      `\n            : html ``)}`\n        : html ``}\n          </cds-table-cell>\n          <cds-table-cell class=\"${clabsPrefix}--table-actions\"\n            ><cds-button\n              @click=${onEditButtonClick.bind(customElementClass, item.input.input, item.input.context_variables, item.output.output, item.output.view_id, item.output.parameters)}\n              kind=\"ghost\">\n              ${Edit16()} </cds-button\n            ><cds-button\n              @click=${onDeleteButtonClick.bind(customElementClass, item.input.input, item.input.context_variables, item.output.output, item.output.view_id, item.output.parameters)}\n              kind=\"danger--ghost\">\n              ${TrashCan16()}\n            </cds-button></cds-table-cell\n          >\n        </cds-table-row>`)}\n  `;\n}\n/**\n * Render views for select\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nfunction getSelectViews(customElementClass) {\n    const { viewList: viewList } = customElementClass;\n    const views = viewList.map((view) => {\n        return html `<cds-select-item value=\"${view}\">${view}</cds-select-item>`;\n    });\n    return views;\n}\n/**\n * Render HTML rows\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nfunction getEditModal(customElementClass) {\n    const { viewList: viewList, _currentPrompt: currentPrompt, _currentContextVariables: currentContextVariables, _currentResponse: currentResponse, _currentResponseView: currentResponseView, _currentParameters: currentParameters, isEditModalOpen, _onEditModalClose: onEditModalClose, _onEditModalCancel: onEditModalCancel, onSavePrompt: onSavePrompt, triggerSubmit: triggerSubmit, _isNewPrompt: isNewPrompt, currentView: currentView, } = customElementClass;\n    let modalHeader, selectedView, contextVariables, parameters;\n    if (isNewPrompt) {\n        modalHeader = `Add new prompt for ${currentView.name}`;\n        selectedView = currentView.name;\n        contextVariables =\n            currentView.contextVariables.length <= 0\n                ? html `<div>\n            This intent/view does not provide any context variables.\n          </div>`\n                : currentView.contextVariables.map((variable) => html ` <cds-text-input\n              class=\"${clabsPrefix}--edit-form-item ${clabsPrefix}--edit-context-variable\"\n              label=${variable}\n              invalid-text=\"Error message\"\n              placeholder=\"Enter sample value...\">\n            </cds-text-input>`);\n        parameters =\n            currentView.parameters.length <= 0\n                ? html `<div>This intent/view does not provide any parameters.</div>`\n                : currentView.parameters.map((parameter) => html ` <cds-text-input\n              class=\"${clabsPrefix}--edit-form-item ${clabsPrefix}--edit-parameter\"\n              label=${parameter}\n              invalid-text=\"Error message\"\n              placeholder=\"Enter expected value...\">\n            </cds-text-input>`);\n    }\n    else {\n        modalHeader = 'Edit prompt';\n        selectedView = currentResponseView;\n        contextVariables =\n            Object.keys(currentContextVariables).length <= 0\n                ? html `<div>\n            This intent/view does not provide any context variables.\n          </div>`\n                : Object.entries(currentContextVariables).map(([key, value]) => html ` <cds-text-input\n              class=\"${clabsPrefix}--edit-form-item ${clabsPrefix}--edit-context-variable\"\n              label=${key}\n              invalid-text=\"Error message\"\n              placeholder=\"Enter sample value...\"\n              value=${value}>\n            </cds-text-input>`);\n        parameters =\n            Object.keys(currentParameters).length <= 0\n                ? html `<div>This intent/view does not provide any parameters.</div>`\n                : Object.entries(currentParameters).map(([key, value]) => html ` <cds-text-input\n              class=\"${clabsPrefix}--edit-form-item ${clabsPrefix}--edit-parameter\"\n              label=${key}\n              invalid-text=\"Error message\"\n              placeholder=\"Enter expected value...\"\n              value=${value}>\n            </cds-text-input>`);\n    }\n    return html `<cds-modal\n    id=\"modal-edit-prompt\"\n    size=\"lg\"\n    ?open=${isEditModalOpen}\n    @cds-modal-closed=${onEditModalClose}>\n    <cds-modal-header>\n      <cds-modal-close-button></cds-modal-close-button>\n      <cds-modal-heading>${modalHeader}</cds-modal-heading>\n    </cds-modal-header>\n    <cds-modal-body>\n      <cds-form-group\n        id=\"${clabsPrefix}--edit-prompt-form\"\n        @submit=${onSavePrompt}>\n        <cds-stack gap=\"10\">\n          <div class=\"${clabsPrefix}--prompt-edit-form\">\n            <div class=\"${clabsPrefix}--edit-input\">\n              <cds-text-input\n                class=\"${clabsPrefix}--edit-form-item\"\n                label=\"Sample prompt\"\n                invalid-text=\"Error message\"\n                placeholder=\"Enter sample prompt...\"\n                helper-text=\" \"\n                value=${currentPrompt}>\n              </cds-text-input>\n\n              <h4>Context variables</h4>\n              ${contextVariables}\n            </div>\n            <div class=\"${clabsPrefix}--edit-output\">\n              <cds-text-input\n                class=\"${clabsPrefix}--edit-form-item\"\n                label=\"Expected message\"\n                invalid-text=\"Error message\"\n                placeholder=\"Enter expected generated message...\"\n                value=${currentResponse}>\n              </cds-text-input>\n\n              <cds-select\n                class=\"${clabsPrefix}--edit-form-item\"\n                helper-text=\" \"\n                label-text=\"Intent/View\"\n                value=${selectedView}>\n                ${viewList.map((view) => html `<cds-select-item value=\"${view}\"\n                      >${view}</cds-select-item\n                    >`)}\n              </cds-select>\n\n              <h4>Expected intent/view parameters</h4>\n              ${parameters}\n            </div>\n          </div>\n        </cds-stack>\n      </cds-form-group>\n    </cds-modal-body>\n    <cds-modal-footer>\n      <cds-modal-footer-button kind=\"secondary\" @click=${onEditModalCancel}\n        >Cancel</cds-modal-footer-button\n      >\n      <cds-modal-footer-button @click=${triggerSubmit} kind=\"primary\"\n        >Save</cds-modal-footer-button\n      >\n    </cds-modal-footer>\n  </cds-modal>`;\n}\n/**\n * Lit template for UX Control\n *\n * @param {object} customElementClass Class functionality for the custom element\n * @returns {TemplateResult<1>} Lit html template\n */\nexport function uxControlTemplate(customElementClass) {\n    const { currentView: currentView, open, _onListModalClose: onListModalClose, _showRename: showRename, _showAddContextVariable: showAddContextVariable, _showAddParameter: showAddParameter, _toggleRename: toggleRename, _toggleAddContextVariable: toggleAddContextVariable, _toggleAddParameter: toggleAddParameter, addContextVariable: addContextVariable, addParameter: addParameter, _handleContextVariableInput: handleContextVariableInput, _handleParameterInput: handleParameterInput, onSaveRename: onSaveRename, _handleNameInput: handleNameInput, onChangeView: onChangeView, _onNewPrompt: onNewPrompt, handleCloseTag: handleCloseTag, } = customElementClass;\n    return html ` <div class=\"${clabsPrefix}--ux-control\">\n    <cds-modal\n      id=\"modal-prompt-list\"\n      size=\"lg\"\n      ?has-scrolling-content=${true}\n      ?open=${open}\n      @cds-modal-closed=${onListModalClose}>\n      <cds-modal-header>\n        <cds-modal-close-button></cds-modal-close-button>\n        <cds-modal-heading class=\"${clabsPrefix}--heading-container\">\n          <div class=\"${clabsPrefix}--heading\">\n            <div class=\"${clabsPrefix}--heading-tune-prompts\">\n              Tune prompts for\n            </div>\n            ${!showRename\n        ? html `<cds-select\n                    class=\"${clabsPrefix}--view-dropdown\"\n                    inline=\"true\"\n                    value=${currentView.name}\n                    @cds-select-selected=${onChangeView}>\n                    ${getSelectViews(customElementClass)}\n                  </cds-select>\n\n                  <cds-tooltip align=\"bottom\">\n                    <div class=\"sb-tooltip-trigger\" aria-labelledby=\"content\">\n                      <cds-button @click=${toggleRename} kind=\"ghost\">\n                        ${RequestQuote16()}\n                      </cds-button>\n                    </div>\n                    <cds-tooltip-content id=\"content\">\n                      Rename intent/view</cds-tooltip-content\n                    >\n                  </cds-tooltip>`\n        : html `\n                  <div class=\"${clabsPrefix}--rename\">\n                    <cds-form-item>\n                      <cds-text-input\n                        class=\"${clabsPrefix}--rename-text\"\n                        invalid-text=\"Error message\"\n                        placeholder=\"Enter new view name...\"\n                        value=${currentView.name}\n                        @input=${handleNameInput}>\n                      </cds-text-input>\n                    </cds-form-item>\n                  </div>\n                  <cds-tooltip align=\"bottom\">\n                    <div class=\"sb-tooltip-trigger\" aria-labelledby=\"content\">\n                      <cds-button @click=${toggleRename} kind=\"danger--ghost\">\n                        ${Close16()}\n                      </cds-button>\n                    </div>\n                    <cds-tooltip-content id=\"content\">\n                      Cancel rename</cds-tooltip-content\n                    >\n                  </cds-tooltip>\n                  <cds-tooltip align=\"bottom\">\n                    <div class=\"sb-tooltip-trigger\" aria-labelledby=\"content\">\n                      <cds-button @click=${onSaveRename} kind=\"ghost\">\n                        ${Checkmark16()}\n                      </cds-button>\n                    </div>\n                    <cds-tooltip-content id=\"content\">\n                      Save rename</cds-tooltip-content\n                    >\n                  </cds-tooltip>\n                `}\n          </div>\n\n          <div class=\"${clabsPrefix}--header-view-info\">\n            <div class=\"${clabsPrefix}--header-context-variables\">\n              <h6 style=\"margin:0;\">Context Variables:</h6>\n              ${currentView.contextVariables.length <= 0\n        ? html `<div>\n                    This intent/view does not provide any parameters.\n                  </div>`\n        : currentView.contextVariables.map((variable) => html `<cds-tag\n                      filter\n                      type=\"gray\"\n                      title=\"${variable}\"\n                      textContent=\"${variable}\"\n                      aria-label=\"Context variable\"\n                      @cds-tag-closed=${handleCloseTag}>\n                      ${variable}\n                    </cds-tag>`)}\n              ${!showAddContextVariable\n        ? html ` <cds-tag\n                    class=\"${clabsPrefix}--add-context-variable-tag\"\n                    @click=${toggleAddContextVariable}\n                    type=\"gray\">\n                    ${Add16({ slot: 'icon' })} Add context variable\n                  </cds-tag>`\n        : html `\n                    <div class=\"${clabsPrefix}--enter-new\">\n                      <cds-form-item>\n                        <cds-text-input\n                          class=\"${clabsPrefix}--new-context-variable\"\n                          invalid-text=\"Error message\"\n                          placeholder=\"Enter new context variable name...\"\n                          @input=${handleContextVariableInput}>\n                        </cds-text-input>\n                      </cds-form-item>\n                      <cds-tooltip align=\"bottom\">\n                        <div\n                          class=\"sb-tooltip-trigger\"\n                          aria-labelledby=\"content\">\n                          <cds-button\n                            @click=${toggleAddContextVariable}\n                            kind=\"danger--ghost\">\n                            ${Close16()}\n                          </cds-button>\n                        </div>\n                        <cds-tooltip-content id=\"content\">\n                          Cancel</cds-tooltip-content\n                        >\n                      </cds-tooltip>\n                      <cds-tooltip align=\"bottom\">\n                        <div\n                          class=\"sb-tooltip-trigger\"\n                          aria-labelledby=\"content\">\n                          <cds-button @click=${addContextVariable} kind=\"ghost\">\n                            ${Checkmark16()}\n                          </cds-button>\n                        </div>\n                        <cds-tooltip-content id=\"content\">\n                          Save new context variable</cds-tooltip-content\n                        >\n                      </cds-tooltip>\n                    </div>\n                  `}\n            </div>\n            <div class=\"${clabsPrefix}--header-parameters\">\n              <h6 style=\"margin:0;\">Parameters:</h6>\n\n              ${currentView.parameters.length <= 0\n        ? html `<div>\n                    This intent/view does not provide any parameters.\n                  </div>`\n        : currentView.parameters.map((parameter) => html `<cds-tag\n                      filter\n                      type=\"gray\"\n                      title=\"${parameter}\"\n                      textContent=\"${parameter}\"\n                      aria-label=\"Parameter\"\n                      @cds-tag-closed=${handleCloseTag}>\n                      ${parameter}\n                    </cds-tag>`)}\n              ${!showAddParameter\n        ? html `<cds-tag\n                    class=\"${clabsPrefix}--add-parameter-tag\"\n                    @click=${toggleAddParameter}\n                    type=\"gray\"\n                    >${Add16()} Add parameter\n                  </cds-tag>`\n        : html `<div class=\"${clabsPrefix}--enter-new\">\n                    <cds-form-item>\n                      <cds-text-input\n                        class=\"${clabsPrefix}--new-parameter\"\n                        invalid-text=\"Error message\"\n                        placeholder=\"Enter new parameter name...\"\n                        @input=${handleParameterInput}>\n                      </cds-text-input>\n                    </cds-form-item>\n                    <cds-tooltip align=\"bottom\">\n                      <div class=\"sb-tooltip-trigger\" aria-labelledby=\"content\">\n                        <cds-button\n                          @click=${toggleAddParameter}\n                          kind=\"danger--ghost\">\n                          ${Close16()}\n                        </cds-button>\n                      </div>\n                      <cds-tooltip-content id=\"content\">\n                        Cancel</cds-tooltip-content\n                      >\n                    </cds-tooltip>\n                    <cds-tooltip align=\"bottom\">\n                      <div class=\"sb-tooltip-trigger\" aria-labelledby=\"content\">\n                        <cds-button @click=${addParameter} kind=\"ghost\">\n                          ${Checkmark16()}\n                        </cds-button>\n                      </div>\n                      <cds-tooltip-content id=\"content\">\n                        Save new parameter</cds-tooltip-content\n                      >\n                    </cds-tooltip>\n                  </div>`}\n            </div>\n          </div>\n        </cds-modal-heading>\n      </cds-modal-header>\n      <cds-modal-body>\n        <cds-table>\n          <cds-table-head>\n            <cds-table-header-row>\n              <cds-table-header-cell>Prompt</cds-table-header-cell>\n              <cds-table-header-cell>Response</cds-table-header-cell>\n              <cds-table-header-cell>Intent/View</cds-table-header-cell>\n              <cds-table-header-cell>Actions</cds-table-header-cell>\n            </cds-table-header-row>\n          </cds-table-head>\n\n          <cds-table-body> ${getHTMLRows(customElementClass)} </cds-table-body>\n        </cds-table>\n      </cds-modal-body>\n      <cds-modal-footer>\n        <cds-modal-footer-button @click=${onNewPrompt} kind=\"primary\"\n          >Add new prompt</cds-modal-footer-button\n        >\n      </cds-modal-footer>\n    </cds-modal>\n\n    ${getEditModal(customElementClass)}\n  </div>`;\n}\n"]}