{"version":3,"file":"8121.40818458.iframe.bundle.js","mappings":";;;AAgKA;;;AAGA;;AAEA;AACA;AACA;AACA;AAIA;AACA;;;AAGA;AACA;;;;AAKA;ACpFA;AACA;AACA;;AAGA;AAOA;AAEA;;;;AAUA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;ACnEA;;AAEA;;AAKA;AACA;;;AAGA;AAGA;ACqFA;AACA;;;AAIA;AC5DA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AAGA;AAEA;AC6KA;AACA;;AAcA;AAGA;AAEA;AAEA;AACA;;AAEA;AAEA;AAEA;;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;;AAGA;AAEA;AACA;AAGA;AAFA;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAjEA;AACA;AACA;AACA;AACA;;AA+DA;AAEA;AAGA;;;AAGA;AACA;;;AAIA;AC7JA;AACA;AACA;;;AASA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAOA;ACpPA;AACA;AAEA;AC4GA;AAGA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;;AAGA;AAEA;ACkDA;AAEA;;ACpIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AAQA;AC2CA;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;;;AAGA;;;;AAKA;;AC7DA;AACA;AACA;;AAEA;;;;;AAKA;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;AAMA;;;;ACjBA;;;AAGA;AACA;AACA;AACA;;AAEA;;;;;AAKA;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;;;;AAMA","sources":["webpack://@carbon-labs/react/../../node_modules/@carbon/web-components/es/components/accordion/accordion-item.js","webpack://@carbon-labs/react/../../node_modules/@carbon/web-components/es/components/link/link.js","webpack://@carbon-labs/react/../../node_modules/@carbon/web-components/es/components/popover/popover-content.js","webpack://@carbon-labs/react/../../node_modules/@carbon/web-components/es/components/popover/popover.js","webpack://@carbon-labs/react/../../node_modules/@carbon/web-components/es/components/progress-bar/progress-bar.js","webpack://@carbon-labs/react/../../node_modules/@carbon/web-components/es/components/text-input/text-input.js","webpack://@carbon-labs/react/../../node_modules/@carbon/web-components/es/components/search/search.js","webpack://@carbon-labs/react/../../node_modules/@carbon/web-components/es/components/search/search-skeleton.js","webpack://@carbon-labs/react/../../node_modules/@carbon/web-components/es/components/tag/tag.js","webpack://@carbon-labs/react/../../node_modules/@carbon/web-components/es/components/tooltip/tooltip.js","webpack://@carbon-labs/react/../../node_modules/@carbon/web-components/es/components/tooltip/definition-tooltip.js","webpack://@carbon-labs/react/../../node_modules/@carbon/web-components/es/components/tag/dismissible-tag.js","webpack://@carbon-labs/react/../../node_modules/@carbon/web-components/es/components/tag/selectable-tag.js","webpack://@carbon-labs/react/../../node_modules/@carbon/web-components/es/components/tag/operational-tag.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { __decorate } from 'tslib';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { html, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings.js';\nimport ChevronRight16 from '@carbon/icons/es/chevron--right/16.js';\nimport { iconLoader } from '../../globals/internal/icon-loader.js';\nimport FocusMixin from '../../globals/mixins/focus.js';\nimport { ACCORDION_ITEM_BREAKPOINT } from './defs.js';\nimport styles from './accordion.scss.js';\nimport { carbonElement } from '../../globals/decorators/carbon-element.js';\n\n/**\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * Observes resize of the given element with the given resize observer.\n *\n * @param observer The resize observer.\n * @param elem The element to observe the resize.\n */\nconst observeResize = (observer, elem) => {\n    if (!elem) {\n        return null;\n    }\n    observer.observe(elem);\n    return {\n        release() {\n            observer.unobserve(elem);\n            return null;\n        },\n    };\n};\n/**\n * Accordion item.\n *\n * @element cds-accordion-item\n * @fires cds-accordion-item-beingtoggled\n *   The custom event fired before this accordion item is being toggled upon a user gesture.\n *   Cancellation of this event stops the user-initiated action of toggling this accordion item.\n * @fires cds-accordion-item-toggled - The custom event fired after this accordion item is toggled upon a user gesture.\n * @csspart title The title.\n * @csspart content The content.\n */\nlet CDSAccordionItem = class CDSAccordionItem extends FocusMixin(LitElement) {\n    constructor() {\n        super(...arguments);\n        /**\n         * The handle for observing resize of the parent element of this element.\n         */\n        this._hObserveResize = null;\n        /**\n         * Handler for the `keydown` event on the expando button.\n         */\n        this._handleKeydownExpando = ({ key }) => {\n            if (this.open && (key === 'Esc' || key === 'Escape')) {\n                this._handleUserInitiatedToggle(false);\n            }\n        };\n        /**\n         * The `ResizeObserver` instance for observing element resizes for re-positioning floating menu position.\n         */\n        // TODO: Wait for `.d.ts` update to support `ResizeObserver`\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- https://github.com/carbon-design-system/carbon/issues/20452\n        // @ts-ignore\n        this._resizeObserver = new ResizeObserver((records) => {\n            const { width } = records[records.length - 1].contentRect;\n            const { _sizesBreakpoints: sizesBreakpoints } = this\n                .constructor;\n            this._currentBreakpoint = Object.keys(sizesBreakpoints)\n                .sort((lhs, rhs) => sizesBreakpoints[rhs] - sizesBreakpoints[lhs])\n                .find((size) => width >= sizesBreakpoints[size]);\n            this.requestUpdate();\n        });\n        /**\n         * `true` if the accordion item should be disabled.\n         */\n        this.disabled = false;\n        /**\n         * `true` if the accordion item should be open.\n         */\n        this.open = false;\n        /**\n         * The title text.\n         */\n        this.title = '';\n    }\n    /**\n     * Handles user-initiated toggle request of this accordion item.\n     *\n     * @param open The new open state.\n     */\n    _handleUserInitiatedToggle(open = !this.open) {\n        const init = {\n            bubbles: true,\n            cancelable: true,\n            composed: true,\n            detail: {\n                open,\n            },\n        };\n        if (this.dispatchEvent(new CustomEvent(this.constructor.eventBeforeToggle, init))) {\n            const { selectorAccordionContent } = this\n                .constructor;\n            // eslint-disable-next-line  @typescript-eslint/no-unused-expressions -- https://github.com/carbon-design-system/carbon/issues/20452\n            !this.open\n                ? this.setAttribute('expanding', '')\n                : this.setAttribute('collapsing', '');\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- https://github.com/carbon-design-system/carbon/issues/20452\n            this.shadowRoot.querySelector(selectorAccordionContent).addEventListener('animationend', () => {\n                this.removeAttribute('expanding');\n                this.removeAttribute('collapsing');\n            });\n            this.open = open;\n            this.dispatchEvent(new CustomEvent(this.constructor.eventToggle, init));\n        }\n    }\n    /**\n     * Handler for the `click` event on the expando button.\n     */\n    _handleClickExpando() {\n        this._handleUserInitiatedToggle();\n    }\n    connectedCallback() {\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'listitem');\n        }\n        super.connectedCallback();\n        if (this._hObserveResize) {\n            this._hObserveResize = this._hObserveResize.release();\n        }\n        this._hObserveResize = observeResize(this._resizeObserver, this);\n    }\n    disconnectedCallback() {\n        if (this._hObserveResize) {\n            this._hObserveResize = this._hObserveResize.release();\n        }\n    }\n    render() {\n        const { disabled, title, open, _currentBreakpoint: currentBreakpoint, _handleClickExpando: handleClickExpando, _handleKeydownExpando: handleKeydownExpando, } = this;\n        const { _classesBreakpoints: classesBreakpoints } = this\n            .constructor;\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- https://github.com/carbon-design-system/carbon/issues/20452\n        const { [currentBreakpoint]: classBreakpoint } = classesBreakpoints;\n        const contentClasses = classMap({\n            [classBreakpoint]: classBreakpoint,\n            [`${prefix}--accordion__content`]: true,\n        });\n        return html `\n      <button\n        ?disabled=\"${disabled}\"\n        type=\"button\"\n        part=\"expando\"\n        class=\"${prefix}--accordion__heading\"\n        aria-controls=\"content\"\n        aria-expanded=\"${open}\"\n        @click=\"${handleClickExpando}\"\n        @keydown=\"${handleKeydownExpando}\">\n        ${iconLoader(ChevronRight16, {\n            part: 'expando-icon',\n            class: `${prefix}--accordion__arrow`,\n        })}\n        <div part=\"title\" class=\"${prefix}--accordion__title\">\n          <slot name=\"title\">${title}</slot>\n        </div>\n      </button>\n      <div class=\"${prefix}--accordion__wrapper\" part=\"wrapper\">\n        <div id=\"content\" part=\"content\" class=\"${contentClasses}\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n    }\n    /**\n     * The CSS classes for breakpoints.\n     *\n     * @private\n     */\n    static get _classesBreakpoints() {\n        return {\n            [ACCORDION_ITEM_BREAKPOINT.SMALL]: `${prefix}-ce--accordion__content--${ACCORDION_ITEM_BREAKPOINT.SMALL}`,\n            [ACCORDION_ITEM_BREAKPOINT.MEDIUM]: `${prefix}-ce--accordion__content--${ACCORDION_ITEM_BREAKPOINT.MEDIUM}`,\n        };\n    }\n    /**\n     * The breakpoints.\n     *\n     * @private\n     */\n    static get _sizesBreakpoints() {\n        return {\n            [ACCORDION_ITEM_BREAKPOINT.SMALL]: 480,\n            [ACCORDION_ITEM_BREAKPOINT.MEDIUM]: 640,\n        };\n    }\n    /**\n     * The name of the custom event fired before this accordion item is being toggled upon a user gesture.\n     * Cancellation of this event stops the user-initiated action of toggling this accordion item.\n     */\n    static get eventBeforeToggle() {\n        return `${prefix}-accordion-item-beingtoggled`;\n    }\n    /**\n     * The name of the custom event fired after this accordion item is toggled upon a user gesture.\n     */\n    static get eventToggle() {\n        return `${prefix}-accordion-item-toggled`;\n    }\n    static get selectorAccordionContent() {\n        return `.${prefix}--accordion__content`;\n    }\n};\nCDSAccordionItem.styles = styles;\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSAccordionItem.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSAccordionItem.prototype, \"open\", void 0);\n__decorate([\n    property({ attribute: 'title' })\n], CDSAccordionItem.prototype, \"title\", void 0);\nCDSAccordionItem = __decorate([\n    carbonElement(`${prefix}-accordion-item`)\n], CDSAccordionItem);\nvar CDSAccordionItem$1 = CDSAccordionItem;\n\nexport { ACCORDION_ITEM_BREAKPOINT, CDSAccordionItem$1 as default };\n//# sourceMappingURL=accordion-item.js.map\n","/**\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { __decorate } from 'tslib';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { LitElement, html } from 'lit';\nimport { query, property } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings.js';\nimport FocusMixin from '../../globals/mixins/focus.js';\nimport styles from './link.scss.js';\nimport { carbonElement } from '../../globals/decorators/carbon-element.js';\n\n/**\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * Link size.\n */\nconst LINK_SIZE = {\n    MEDIUM: 'md',\n    SMALL: 'sm',\n    LARGE: 'lg',\n};\n/**\n * Link.\n *\n * @element cds-link\n * @csspart link The link.\n */\nlet CDSLink = class CDSLink extends FocusMixin(LitElement) {\n    constructor() {\n        super(...arguments);\n        /**\n         * `true` if there is an icon.\n         */\n        this._hasIcon = false;\n        /**\n         * `true` if the link should be disabled.\n         */\n        this.disabled = false;\n        /**\n         * `true` if the link should be inline.\n         */\n        this.inline = false;\n        /**\n         * Link size.\n         */\n        this.size = LINK_SIZE.MEDIUM;\n        /**\n         * `true` if the link has been visited.\n         */\n        this.visited = false;\n    }\n    /**\n     * Handles `slotchange` event.\n     */\n    _handleSlotChange({ target }) {\n        const { name } = target;\n        const hasContent = target.assignedNodes().some(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- https://github.com/carbon-design-system/carbon/issues/20452\n        (node) => node.nodeType !== Node.TEXT_NODE || node.textContent.trim());\n        this[name === 'icon' ? '_hasIcon' : ''] = hasContent;\n        this.requestUpdate();\n    }\n    /**\n     * The CSS class list for the link node.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- https://github.com/carbon-design-system/carbon/issues/20452\n    get _classes() {\n        const { disabled, size, inline, visited, _hasIcon } = this;\n        return classMap({\n            [`${prefix}--link`]: true,\n            [`${prefix}--link--disabled`]: disabled,\n            [`${prefix}--link--icon`]: _hasIcon,\n            [`${prefix}--link--inline`]: inline,\n            [`${prefix}--link--${size}`]: size,\n            [`${prefix}--link--visited`]: visited,\n        });\n    }\n    /**\n     * Handles `click` event on the `<a>`.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _handleClick(_) { }\n    /**\n     * @returns The inner content.\n     */\n    _renderInner() {\n        const { _hasIcon: hasIcon, _handleSlotChange: handleSlotChange } = this;\n        return html `\n      <slot @slotchange=\"${handleSlotChange}\"></slot>\n      <div ?hidden=\"${!hasIcon}\" class=\"${prefix}--link__icon\">\n        <slot name=\"icon\" @slotchange=\"${handleSlotChange}\"></slot>\n      </div>\n    `;\n    }\n    /**\n     * @returns The disabled link content.\n     */\n    _renderDisabledLink() {\n        const { _classes: classes } = this;\n        return html `\n      <p id=\"link\" part=\"link\" class=\"${classes}\">${this._renderInner()}</p>\n    `;\n    }\n    /**\n     * @returns The link content.\n     */\n    _renderLink() {\n        const { download, href, hreflang, linkRole, ping, rel, target, type, _classes: classes, _handleClick: handleClick, } = this;\n        return html `\n      <a\n        tabindex=\"0\"\n        id=\"link\"\n        role=\"${ifDefined(linkRole)}\"\n        class=\"${classes}\"\n        part=\"link\"\n        download=\"${ifDefined(download)}\"\n        href=\"${ifDefined(href)}\"\n        hreflang=\"${ifDefined(hreflang)}\"\n        ping=\"${ifDefined(ping)}\"\n        rel=\"${ifDefined(rel)}\"\n        target=\"${ifDefined(target)}\"\n        type=\"${ifDefined(type)}\"\n        @click=\"${handleClick}\">\n        ${this._renderInner()}\n      </a>\n    `;\n    }\n    render() {\n        const { disabled } = this;\n        return disabled ? this._renderDisabledLink() : this._renderLink();\n    }\n};\nCDSLink.shadowRootOptions = Object.assign(Object.assign({}, LitElement.shadowRootOptions), { delegatesFocus: true });\nCDSLink.styles = styles;\n__decorate([\n    query('#link')\n], CDSLink.prototype, \"_linkNode\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSLink.prototype, \"disabled\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSLink.prototype, \"download\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSLink.prototype, \"href\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSLink.prototype, \"hreflang\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSLink.prototype, \"inline\", void 0);\n__decorate([\n    property({ attribute: 'link-role' })\n], CDSLink.prototype, \"linkRole\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSLink.prototype, \"ping\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSLink.prototype, \"rel\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSLink.prototype, \"size\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSLink.prototype, \"target\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSLink.prototype, \"type\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSLink.prototype, \"visited\", void 0);\nCDSLink = __decorate([\n    carbonElement(`${prefix}-link`)\n], CDSLink);\nvar CDSLink$1 = CDSLink;\n\nexport { LINK_SIZE, CDSLink$1 as default };\n//# sourceMappingURL=link.js.map\n","/**\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { __decorate } from 'tslib';\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { carbonElement } from '../../globals/decorators/carbon-element.js';\nimport { prefix } from '../../globals/settings.js';\nimport styles from './popover.scss.js';\nimport { POPOVER_BACKGROUND_TOKEN } from './defs.js';\n\n/**\n * Copyright IBM Corp. 2019, 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * Popover.\n *\n * @element cds-popover-content\n */\nlet CDSPopoverContent = class CDSPopoverContent extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Specify the popover alignment\n         */\n        this.align = '';\n        /**\n         * Specify whether a auto align functionality should be applied\n         */\n        this.autoalign = false;\n        /**\n         * Specify whether a dropShadow should be rendered\n         */\n        this.dropShadow = true;\n        /**\n         * Specify whether a border should be rendered on the popover\n         */\n        this.border = false;\n        /**\n         * Render the component using the high-contrast variant\n         */\n        this.highContrast = false;\n        /**\n         * Specify whether the component is currently open or closed\n         */\n        this.open = false;\n        /**\n         * Render the component using the tab tip variant\n         */\n        this.tabTip = false;\n        /**\n         * Specify the background token to use. Default is 'layer'.\n         */\n        this.backgroundToken = POPOVER_BACKGROUND_TOKEN.LAYER;\n        /**\n         * The shadow slot this popover content should be in.\n         */\n        this.slot = 'content';\n    }\n    render() {\n        if (this.autoalign) {\n            return html `\n        <span class=\"${prefix}--popover-content\" part=\"content\">\n          <slot> </slot>\n          <span class=\"${prefix}--popover-caret\"></span>\n        </span>\n      `;\n        }\n        else {\n            return html `\n        <span class=\"${prefix}--popover-content\" part=\"content\">\n          <slot> </slot>\n        </span>\n        <span class=\"${prefix}--popover-caret\"></span>\n      `;\n        }\n    }\n};\nCDSPopoverContent.styles = styles;\n__decorate([\n    property({ reflect: true, type: String })\n], CDSPopoverContent.prototype, \"align\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSPopoverContent.prototype, \"autoalign\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSPopoverContent.prototype, \"caret\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSPopoverContent.prototype, \"dropShadow\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSPopoverContent.prototype, \"border\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSPopoverContent.prototype, \"highContrast\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSPopoverContent.prototype, \"open\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSPopoverContent.prototype, \"tabTip\", void 0);\n__decorate([\n    property({ reflect: true, type: String })\n], CDSPopoverContent.prototype, \"backgroundToken\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSPopoverContent.prototype, \"slot\", void 0);\nCDSPopoverContent = __decorate([\n    carbonElement(`${prefix}-popover-content`)\n], CDSPopoverContent);\nvar CDSPopoverContent$1 = CDSPopoverContent;\n\nexport { CDSPopoverContent$1 as default };\n//# sourceMappingURL=popover-content.js.map\n","/**\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { __decorate } from 'tslib';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { LitElement, html } from 'lit';\nimport { query, property } from 'lit/decorators.js';\nimport { carbonElement } from '../../globals/decorators/carbon-element.js';\nimport { prefix } from '../../globals/settings.js';\nimport styles from './popover.scss.js';\nimport HostListener from '../../globals/decorators/host-listener.js';\nimport HostListenerMixin from '../../globals/mixins/host-listener.js';\nimport FloatingController from '../../globals/controllers/floating-controller.js';\nimport { POPOVER_BACKGROUND_TOKEN } from './defs.js';\n\n/**\n * Copyright IBM Corp. 2019, 2025\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar CDSPopover_1;\n/**\n * Popover.\n *\n * @element cds-popover\n */\nlet CDSPopover = CDSPopover_1 = class CDSPopover extends HostListenerMixin(LitElement) {\n    /**\n     * Handles `slotchange` event.\n     */\n    _handleSlotChange({ target }) {\n        if (this.tabTip) {\n            const component = target.assignedNodes().filter((node) => \n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- https://github.com/carbon-design-system/carbon/issues/20452\n            node.nodeType !== Node.TEXT_NODE || node.textContent.trim());\n            component[0].classList.add(`${prefix}--popover--tab-tip__button`);\n        }\n        this.requestUpdate();\n    }\n    _handleFocusOut(event) {\n        const relatedTarget = event.relatedTarget;\n        if (!this.contains(relatedTarget)) {\n            this.open = false;\n        }\n    }\n    _handleOutsideClick(event) {\n        const target = event.target;\n        if (this.open && target && !this.contains(target)) {\n            this.open = false;\n        }\n    }\n    constructor() {\n        super();\n        /**\n         * Create popover controller instance\n         */\n        this.popoverController = new FloatingController(this);\n        /**\n         * Specify direction of alignment\n         */\n        this.align = '';\n        /**\n         * Specify whether a auto align functionality should be applied\n         */\n        this.autoalign = false;\n        /**\n         * Specify whether a caret should be rendered\n         */\n        this.caret = true;\n        /**\n         * Specify whether a dropShadow should be rendered\n         */\n        this.dropShadow = true;\n        /**\n         * Specify whether a border should be rendered on the popover\n         */\n        this.border = false;\n        /**\n         * Render the component using the high-contrast variant\n         */\n        this.highContrast = false;\n        /**\n         * Specify whether the component is currently open or closed\n         */\n        this.open = false;\n        /**\n         * Render the component using the tab tip variant\n         */\n        this.tabTip = false;\n        /**\n         * Specify the background token to use. Default is 'layer'.\n         */\n        this.backgroundToken = POPOVER_BACKGROUND_TOKEN.LAYER;\n        this._handleOutsideClick = this._handleOutsideClick.bind(this);\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        document.addEventListener('click', this._handleOutsideClick);\n    }\n    disconnectedCallback() {\n        document.removeEventListener('click', this._handleOutsideClick);\n    }\n    updated(changedProperties) {\n        var _a, _b, _c;\n        const { selectorPopoverContent } = this.constructor;\n        [\n            'open',\n            'align',\n            'autoalign',\n            'caret',\n            'dropShadow',\n            'border',\n            'tabTip',\n            'highContrast',\n            'backgroundToken',\n        ].forEach((name) => {\n            if (changedProperties.has(name)) {\n                const { [name]: value } = this;\n                if (this.querySelector(selectorPopoverContent)) {\n                    this.querySelector(selectorPopoverContent)[name] = value;\n                }\n            }\n        });\n        if (this.autoalign && this.open) {\n            // auto align functionality with @floating-ui/dom library\n            const button = this._triggerSlotNode.assignedElements()[0];\n            const content = this._contentSlotNode.assignedElements()[0];\n            const tooltip = (_a = content === null || content === void 0 ? void 0 : content.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(CDSPopover_1.selectorPopoverContentClass);\n            const arrowElement = (_b = content === null || content === void 0 ? void 0 : content.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector(CDSPopover_1.selectorPopoverCaret);\n            if (button && tooltip) {\n                (_c = this.popoverController) === null || _c === void 0 ? void 0 : _c.setPlacement({\n                    trigger: button,\n                    target: tooltip,\n                    arrowElement: this.caret && arrowElement\n                        ? arrowElement\n                        : undefined,\n                    caret: this.caret,\n                    flipArguments: { fallbackAxisSideDirection: 'start' },\n                    alignment: this.align,\n                    open: this.open,\n                });\n            }\n        }\n    }\n    render() {\n        const { dropShadow, border, highContrast, open, tabTip, _handleSlotChange: handleSlotChange, } = this;\n        if (tabTip) {\n            this.caret = tabTip ? false : true;\n        }\n        this.align = this.align ? this.align : tabTip ? 'bottom-left' : 'bottom';\n        const classes = classMap({\n            [`${prefix}--popover-container`]: true,\n            [`${prefix}--popover--caret`]: this.caret,\n            [`${prefix}--popover--drop-shadow`]: dropShadow,\n            [`${prefix}--popover--border`]: border,\n            [`${prefix}--popover--high-contrast`]: highContrast,\n            [`${prefix}--popover--open`]: open,\n            [`${prefix}--popover--${this.align}`]: true,\n            [`${prefix}--popover--tab-tip`]: tabTip,\n            [`${prefix}--popover--background-token__background`]: this.backgroundToken === POPOVER_BACKGROUND_TOKEN.BACKGROUND &&\n                !highContrast,\n        });\n        return html `\n      <span class=\"${classes}\" part=\"popover-container\">\n        <slot @slotchange=\"${handleSlotChange}\"></slot>\n        <slot name=\"content\"></slot>\n      </span>\n    `;\n    }\n    /**\n     * A selector that will return popover content element within\n     * CDSPopoverContent's shadowRoot.\n     */\n    static get selectorPopoverContentClass() {\n        return `.${prefix}--popover-content`;\n    }\n    /**\n     * A selector that will return popover caret element within\n     * CDSPopoverContent's shadowRoot.\n     */\n    static get selectorPopoverCaret() {\n        return `.${prefix}--popover-caret`;\n    }\n    /**\n     * A selector that will return the CDSPopoverContent.\n     */\n    static get selectorPopoverContent() {\n        return `${prefix}-popover-content`;\n    }\n};\nCDSPopover.styles = styles;\n__decorate([\n    query('slot')\n], CDSPopover.prototype, \"_triggerSlotNode\", void 0);\n__decorate([\n    query('slot[name=\"content\"]')\n], CDSPopover.prototype, \"_contentSlotNode\", void 0);\n__decorate([\n    property({ reflect: true, type: String })\n], CDSPopover.prototype, \"align\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSPopover.prototype, \"autoalign\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSPopover.prototype, \"caret\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSPopover.prototype, \"dropShadow\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSPopover.prototype, \"border\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSPopover.prototype, \"highContrast\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSPopover.prototype, \"open\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSPopover.prototype, \"tabTip\", void 0);\n__decorate([\n    property({ reflect: true, type: String })\n], CDSPopover.prototype, \"backgroundToken\", void 0);\n__decorate([\n    HostListener('focusout')\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- https://github.com/carbon-design-system/carbon/issues/20452\n    // @ts-ignore\n], CDSPopover.prototype, \"_handleFocusOut\", null);\nCDSPopover = CDSPopover_1 = __decorate([\n    carbonElement(`${prefix}-popover`)\n], CDSPopover);\nvar CDSPopover$1 = CDSPopover;\n\nexport { CDSPopover$1 as default };\n//# sourceMappingURL=popover.js.map\n","/**\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { __decorate } from 'tslib';\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { carbonElement } from '../../globals/decorators/carbon-element.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { PROGRESS_BAR_SIZE, PROGRESS_BAR_STATUS, PROGRESS_BAR_TYPE } from './defs.js';\nimport { prefix } from '../../globals/settings.js';\nimport ErrorFilled16 from '@carbon/icons/es/error--filled/16.js';\nimport CheckmarkFilled16 from '@carbon/icons/es/checkmark--filled/16.js';\nimport { iconLoader } from '../../globals/internal/icon-loader.js';\nimport styles from './progress-bar.scss.js';\n\n/**\n * Copyright IBM Corp. 2019, 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * Progress bar.\n *\n * @element cds-progress-bar\n */\nlet CDSProgressBar = class CDSProgressBar extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * The maximum value.\n         */\n        this.max = 100;\n        /**\n         * Specify the size of the ProgressBar.\n         */\n        this.size = PROGRESS_BAR_SIZE.BIG;\n        /**\n         * Specify the status.\n         */\n        this.status = PROGRESS_BAR_STATUS.ACTIVE;\n        /**\n         * Defines the alignment variant of the progress bar.\n         */\n        this.type = PROGRESS_BAR_TYPE.DEFAULT;\n    }\n    get _cappedValue() {\n        const { value, max, status } = this;\n        let cappedValue = value;\n        if (cappedValue > max) {\n            cappedValue = max;\n        }\n        if (cappedValue < 0) {\n            cappedValue = 0;\n        }\n        if (status === PROGRESS_BAR_STATUS.ERROR) {\n            cappedValue = 0;\n        }\n        else if (status === PROGRESS_BAR_STATUS.FINISHED) {\n            cappedValue = max;\n        }\n        return cappedValue;\n    }\n    updated(changedProperties) {\n        if (changedProperties.has('value') ||\n            changedProperties.has('max') ||\n            changedProperties.has('status')) {\n            const { _cappedValue: cappedValue, max, status } = this;\n            const percentage = cappedValue / max;\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- https://github.com/carbon-design-system/carbon/issues/20452\n            const bar = this.shadowRoot.querySelector(`.${prefix}--progress-bar__bar`);\n            if (status != PROGRESS_BAR_STATUS.ERROR &&\n                status != PROGRESS_BAR_STATUS.FINISHED) {\n                bar.style.transform = `scaleX(${percentage})`;\n            }\n            else {\n                bar.style.transform = 'none';\n            }\n        }\n    }\n    render() {\n        const { _cappedValue: cappedValue, helperText, hideLabel, label, max, size, status, type, value, } = this;\n        const isFinished = status === PROGRESS_BAR_STATUS.FINISHED;\n        const isError = status === PROGRESS_BAR_STATUS.ERROR;\n        const indeterminate = !isFinished && !isError && (value === null || value === undefined);\n        let statusIcon = null;\n        if (isError) {\n            statusIcon = iconLoader(ErrorFilled16, {\n                class: `${prefix}--progress-bar__status-icon`,\n            });\n        }\n        else if (isFinished) {\n            statusIcon = iconLoader(CheckmarkFilled16, {\n                class: `${prefix}--progress-bar__status-icon`,\n            });\n        }\n        const wrapperClasses = classMap({\n            [`${prefix}--progress-bar`]: true,\n            [`${prefix}--progress-bar--${size}`]: true,\n            [`${prefix}--progress-bar--${type}`]: true,\n            [`${prefix}--progress-bar--indeterminate`]: indeterminate,\n            [`${prefix}--progress-bar--finished`]: isFinished,\n            [`${prefix}--progress-bar--error`]: isError,\n        });\n        const labelClasses = classMap({\n            [`${prefix}--progress-bar__label`]: true,\n            [`${prefix}--visually-hidden`]: hideLabel,\n        });\n        return html ` <div class=\"${wrapperClasses}\">\n      <div class=\"${labelClasses}\">\n        <span class=\"${prefix}--progress-bar__label-text\">${label}</span>\n        ${statusIcon}\n      </div>\n      <div\n        class=\"${prefix}--progress-bar__track\"\n        role=\"progressbar\"\n        aria-busy=\"${!isFinished}\"\n        aria-invalid=\"${isError}\"\n        aria-valuemin=\"${!indeterminate ? 0 : null}\"\n        aria-valuemax=\"${!indeterminate ? max : null}\"\n        aria-valuenow=\"${!indeterminate ? cappedValue : null}\">\n        <div class=\"${prefix}--progress-bar__bar\"></div>\n      </div>\n      ${helperText\n            ? html `<div class=\"${prefix}--progress-bar__helper-text\">\n            ${helperText}\n            <div class=\"${prefix}--visually-hidden\" aria-live=\"polite\">\n              ${isFinished ? 'Done' : 'Loading'}\n            </div>\n          </div>`\n            : null}\n    </div>`;\n    }\n};\nCDSProgressBar.styles = styles;\n__decorate([\n    property({ type: String, attribute: 'helper-text', reflect: true })\n], CDSProgressBar.prototype, \"helperText\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'hide-label', reflect: true })\n], CDSProgressBar.prototype, \"hideLabel\", void 0);\n__decorate([\n    property({ type: String })\n], CDSProgressBar.prototype, \"label\", void 0);\n__decorate([\n    property({ type: Number, reflect: true })\n], CDSProgressBar.prototype, \"max\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CDSProgressBar.prototype, \"size\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CDSProgressBar.prototype, \"status\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CDSProgressBar.prototype, \"type\", void 0);\n__decorate([\n    property({ type: Number, reflect: true })\n], CDSProgressBar.prototype, \"value\", void 0);\nCDSProgressBar = __decorate([\n    carbonElement(`${prefix}-progress-bar`)\n], CDSProgressBar);\nvar CDSProgressBar$1 = CDSProgressBar;\n\nexport { PROGRESS_BAR_SIZE, PROGRESS_BAR_STATUS, PROGRESS_BAR_TYPE, CDSProgressBar$1 as default };\n//# sourceMappingURL=progress-bar.js.map\n","/**\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { __decorate } from 'tslib';\nimport { LitElement, html } from 'lit';\nimport { query, property } from 'lit/decorators.js';\nimport { carbonElement } from '../../globals/decorators/carbon-element.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { prefix } from '../../globals/settings.js';\nimport { iconLoader } from '../../globals/internal/icon-loader.js';\nimport ifNonEmpty from '../../globals/directives/if-non-empty.js';\nimport WarningFilled16 from '@carbon/icons/es/warning--filled/16.js';\nimport WarningAltFilled16 from '@carbon/icons/es/warning--alt--filled/16.js';\nimport View16 from '@carbon/icons/es/view/16.js';\nimport ViewOff16 from '@carbon/icons/es/view--off/16.js';\nimport FormMixin from '../../globals/mixins/form.js';\nimport ValidityMixin from '../../globals/mixins/validity.js';\nimport { INPUT_SIZE, INPUT_TOOLTIP_ALIGNMENT, INPUT_TOOLTIP_DIRECTION, INPUT_TYPE } from './defs.js';\nimport styles from './text-input.scss.js';\nexport { FORM_ELEMENT_COLOR_SCHEME as INPUT_COLOR_SCHEME } from '../../globals/shared-enums.js';\n\n/**\n * Copyright IBM Corp. 2019, 2025\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * Text Input element. Supports all the usual attributes for textual input types\n *\n * @element cds-text-input\n * @slot helper-text - The helper text.\n * @slot label-text - The label text.\n * @slot validity-message - The validity message. If present and non-empty, this input shows the UI of its invalid state.\n */\nlet CDSTextInput = class CDSTextInput extends ValidityMixin(FormMixin(LitElement)) {\n    constructor() {\n        super(...arguments);\n        /**\n         * `true` if there is an AI Label.\n         */\n        this._hasAILabel = false;\n        /**\n         * The internal value.\n         */\n        this._value = '';\n        /**\n         * May be any of the standard HTML autocomplete options\n         */\n        this.autocomplete = '';\n        /**\n         * Sets the input to be focussed automatically on page load. Defaults to false\n         */\n        this.autofocus = false;\n        /**\n         * Controls the disabled state of the input\n         */\n        this.disabled = false;\n        /**\n         * Specify whether to display the character counter\n         */\n        this.enableCounter = false;\n        /**\n         * The helper text.\n         */\n        this.helperText = '';\n        /**\n         * Specify if the currently value is invalid.\n         */\n        this.invalid = false;\n        /**\n         * Message which is displayed if the value is invalid.\n         */\n        this.invalidText = '';\n        /**\n         * Specify whether the control is currently in warning state\n         */\n        this.warn = false;\n        /**\n         * Provide the text that is displayed when the control is in warning state\n         */\n        this.warnText = '';\n        /**\n         * Specify whether you want the underlying label to be visually hidden\n         */\n        this.hideLabel = false;\n        /**\n         * Generic label that will be used as the textual representation of what this field is for\n         */\n        this.label = '';\n        /**\n         * Name for the input in the `FormData`\n         */\n        this.name = '';\n        /**\n         * Pattern to validate the input against for HTML validity checking\n         */\n        this.pattern = '';\n        /**\n         * Value to display when the input has an empty `value`\n         */\n        this.placeholder = '';\n        /**\n         * Specify if the component should be read-only\n         */\n        this.readonly = false;\n        /**\n         * Boolean property to set the required status\n         */\n        this.required = false;\n        /**\n         * The special validity message for `required`.\n         */\n        this.requiredValidityMessage = 'Please fill out this field.';\n        /**\n         * \"Hide password\" tooltip text on password visibility toggle\n         *\n         * @deprecated will be removed in the next major version, use `cds-password-input` instead\n         */\n        this.hidePasswordLabel = 'Hide password';\n        /**\n         * \"Show password\" tooltip text on password visibility toggle\n         *\n         * @deprecated will be removed in the next major version, use `cds-password-input` instead\n         */\n        this.showPasswordLabel = 'Show password';\n        /**\n         * Boolean property to render password visibility toggle\n         *\n         * @deprecated will be removed in the next major version, use `cds-password-input` instead\n         */\n        this.showPasswordVisibilityToggle = false;\n        /**\n         * The input box size.\n         */\n        this.size = INPUT_SIZE.MEDIUM;\n        this.isFluid = false;\n        /**\n         * true to use the inline version.\n         */\n        this.inline = false;\n        /**\n         * Specify the alignment of the tooltip to the icon-only button.\n         * Can be one of: start, center, or end.\n         */\n        this.tooltipAlignment = INPUT_TOOLTIP_ALIGNMENT.CENTER;\n        /**\n         * Specify the direction of the tooltip for icon-only buttons.\n         * Can be either top, right, bottom, or left.\n         */\n        this.tooltipDirection = INPUT_TOOLTIP_DIRECTION.BOTTOM;\n        /**\n         * The type of the input. Can be one of the types listed in the INPUT_TYPE enum\n         */\n        this.type = INPUT_TYPE.TEXT;\n        /**\n         * The validity message. If present and non-empty, this input shows the UI of its invalid state.\n         */\n        this.validityMessage = '';\n    }\n    /**\n     * Handles `slotchange` event.\n     */\n    _handleSlotChange({ target }) {\n        const hasContent = target\n            .assignedNodes()\n            .filter((elem) => elem.matches !== undefined\n            ? elem.matches(this.constructor.aiLabelItem) ||\n                // remove reference to slug in v12\n                elem.matches(this.constructor.slugItem)\n            : false);\n        this._hasAILabel = Boolean(hasContent);\n        hasContent[0].setAttribute('size', 'mini');\n        this.requestUpdate();\n    }\n    /**\n     * Handles `oninput` event on the `input`.\n     *\n     * @param event The event.\n     * @param event.target The event target.\n     */\n    _handleInput({ target }) {\n        this.value = target.value;\n    }\n    _handleFormdata(event) {\n        const { formData } = event;\n        const { disabled, name, value } = this;\n        if (!disabled) {\n            formData.append(name, value);\n        }\n    }\n    /**\n     * The value of the input.\n     */\n    get value() {\n        // FIXME: Figure out how to deal with TS2611\n        // once we have the input we can directly query for the value\n        if (this._input) {\n            return this._input.value;\n        }\n        // but before then _value will work fine\n        return this._value;\n    }\n    set value(value) {\n        const oldValue = this._value;\n        this._value = value;\n        // make sure that lit-element updates the right properties\n        this.requestUpdate('value', oldValue);\n        // we set the value directly on the input (when available)\n        // so that programatic manipulation updates the UI correctly\n        if (this._input) {\n            this._input.value = value;\n        }\n    }\n    /**\n     * Handles password visibility toggle button click\n     *\n     * @deprecated will be removed in the next major version, use `cds-password-input` instead\n     */\n    togglePasswordVisibility() {\n        this.type =\n            this.type === INPUT_TYPE.PASSWORD ? INPUT_TYPE.TEXT : INPUT_TYPE.PASSWORD;\n    }\n    render() {\n        const { disabled, enableCounter, helperText, hideLabel, inline, isFluid, invalid, invalidText, label, maxCount, readonly, required, size, type, warn, warnText, value, _handleInput: handleInput, _hasAILabel: hasAILabel, _handleSlotChange: handleSlotChange, } = this;\n        const invalidIcon = iconLoader(WarningFilled16, {\n            class: `${prefix}--text-input__invalid-icon`,\n        });\n        const warnIcon = iconLoader(WarningAltFilled16, {\n            class: `${prefix}--text-input__invalid-icon ${prefix}--text-input__invalid-icon--warning`,\n        });\n        const normalizedProps = {\n            disabled: !readonly && disabled,\n            invalid: !readonly && invalid,\n            warn: !readonly && !invalid && warn,\n            'slot-name': '',\n            'slot-text': '',\n            icon: null,\n        };\n        if (normalizedProps.invalid) {\n            normalizedProps.icon = invalidIcon;\n            normalizedProps['slot-name'] = 'invalid-text';\n            normalizedProps['slot-text'] = invalidText;\n        }\n        else if (normalizedProps.warn) {\n            normalizedProps.icon = warnIcon;\n            normalizedProps['slot-name'] = 'warn-text';\n            normalizedProps['slot-text'] = warnText;\n        }\n        const counterClasses = classMap({\n            [`${prefix}--label`]: true,\n            [`${prefix}--text-input__label-counter`]: true,\n            [`${prefix}--label--disabled`]: disabled,\n        });\n        const inputWrapperClasses = classMap({\n            [`${prefix}--form-item`]: true,\n            [`${prefix}--text-input-wrapper`]: true,\n            [`${prefix}--text-input-wrapper--inline`]: inline,\n            [`${prefix}--text-input-wrapper--readonly`]: readonly,\n            [`${prefix}--text-input-wrapper--inline--invalid`]: inline && normalizedProps.invalid,\n        });\n        const inputClasses = classMap({\n            [`${prefix}--text-input`]: true,\n            [`${prefix}--text-input--invalid`]: normalizedProps.invalid,\n            [`${prefix}--text-input--warning`]: normalizedProps.warn,\n            [`${prefix}--text-input--${size}`]: size,\n            [`${prefix}--layout--size-${size}`]: size,\n            [`${prefix}--password-input`]: type === INPUT_TYPE.PASSWORD, //TODO deprecated, remove in v12\n            [`${prefix}--text-input__field-wrapper--decorator`]: hasAILabel,\n        });\n        const fieldOuterWrapperClasses = classMap({\n            [`${prefix}--text-input__field-outer-wrapper`]: true,\n            [`${prefix}--text-input__field-outer-wrapper--inline`]: inline,\n        });\n        const fieldWrapperClasses = classMap({\n            [`${prefix}--text-input__field-wrapper`]: true,\n            [`${prefix}--text-input__field-wrapper--warning`]: normalizedProps.warn,\n        });\n        const labelClasses = classMap({\n            [`${prefix}--label`]: true,\n            [`${prefix}--visually-hidden`]: hideLabel,\n            [`${prefix}--label--disabled`]: normalizedProps.disabled,\n        });\n        const helperTextClasses = classMap({\n            [`${prefix}--form__helper-text`]: true,\n            [`${prefix}--form__helper-text--disabled`]: normalizedProps.disabled,\n        });\n        //TODO deprecated, remove in v12\n        const passwordIsVisible = type !== INPUT_TYPE.PASSWORD;\n        const passwordVisibilityIcon = passwordIsVisible\n            ? iconLoader(ViewOff16, { class: `${prefix}--icon-visibility-off` })\n            : iconLoader(View16, { class: `${prefix}--icon-visibility-on` });\n        //TODO deprecated, remove in v12\n        const passwordVisibilityToggleClasses = classMap({\n            [`${prefix}--text-input--password__visibility__toggle`]: true,\n            [`${prefix}--btn`]: true,\n            [`${prefix}--btn--icon-only`]: true,\n            [`${prefix}--tooltip__trigger`]: true,\n            [`${prefix}--tooltip--a11y`]: true,\n            [`${prefix}--btn--disabled`]: normalizedProps.disabled,\n            [`${prefix}--tooltip--${this.tooltipDirection}`]: this.tooltipDirection,\n            [`${prefix}--tooltip--align-${this.tooltipAlignment}`]: this.tooltipAlignment,\n        });\n        //TODO deprecated, remove in v12\n        const passwordButtonLabel = html `\n      <span class=\"${prefix}--assistive-text\">\n        ${passwordIsVisible ? this.hidePasswordLabel : this.showPasswordLabel}\n      </span>\n    `;\n        //TODO deprecated, remove in v12\n        const passwordVisibilityButton = () => html `\n      <button\n        type=\"button\"\n        class=\"${passwordVisibilityToggleClasses}\"\n        ?disabled=\"${normalizedProps.disabled}\"\n        @click=\"${this.togglePasswordVisibility}\">\n        ${!normalizedProps.disabled ? passwordButtonLabel : null}\n        ${passwordVisibilityIcon}\n      </button>\n    `;\n        const textCount = value === null || value === void 0 ? void 0 : value.length;\n        const counter = enableCounter && maxCount\n            ? html ` <label class=\"${counterClasses}\">\n            <slot name=\"label-text\">${textCount}/${maxCount}</slot>\n          </label>`\n            : null;\n        const labelWrapper = html `<div class=\"${prefix}--text-input__label-wrapper\">\n      <label class=\"${labelClasses}\">\n        <slot name=\"label-text\">${label}</slot>\n      </label>\n      ${counter}\n    </div>`;\n        const helper = helperText\n            ? html `<div\n          class=\"${helperTextClasses}\"\n          id=\"helper-text\"\n          ?hidden=\"${normalizedProps.invalid || normalizedProps.warn}\">\n          <slot name=\"helper-text\"> ${helperText} </slot>\n        </div>`\n            : null;\n        const validationMessage = normalizedProps.invalid || normalizedProps.warn\n            ? html `<div\n            class=\"${prefix}--form-requirement\"\n            ?hidden=\"${!normalizedProps.invalid && !normalizedProps.warn}\">\n            <slot name=\"${normalizedProps['slot-name']}\">\n              ${normalizedProps['slot-text']}\n            </slot>\n          </div>`\n            : null;\n        return html `\n      <div class=\"${inputWrapperClasses}\">\n        ${!inline\n            ? labelWrapper\n            : html `<div class=\"${prefix}--text-input__label-helper-wrapper\">\n              ${labelWrapper} ${!isFluid ? validationMessage || helper : null}\n            </div>`}\n        <div class=\"${fieldOuterWrapperClasses}\">\n          <div class=\"${fieldWrapperClasses}\" ?data-invalid=\"${invalid}\">\n            ${normalizedProps.icon}\n            <input\n              autocomplete=\"${this.autocomplete}\"\n              ?autofocus=\"${this.autofocus}\"\n              class=\"${inputClasses}\"\n              ?data-invalid=\"${invalid}\"\n              ?disabled=\"${disabled}\"\n              aria-describedby=\"helper-text\"\n              id=\"input\"\n              name=\"${ifNonEmpty(this.name)}\"\n              pattern=\"${ifNonEmpty(this.pattern)}\"\n              placeholder=\"${ifNonEmpty(this.placeholder)}\"\n              ?readonly=\"${readonly}\"\n              ?required=\"${required}\"\n              type=\"${ifNonEmpty(type)}\"\n              .value=\"${this._value}\"\n              maxlength=\"${ifNonEmpty(maxCount)}\"\n              @input=\"${handleInput}\" />\n            <slot name=\"ai-label\" @slotchange=\"${handleSlotChange}\"></slot>\n            <slot name=\"slug\" @slotchange=\"${handleSlotChange}\"></slot>\n            ${this.showPasswordVisibilityToggle &&\n            (type === INPUT_TYPE.PASSWORD || type === INPUT_TYPE.TEXT)\n            ? passwordVisibilityButton()\n            : null}\n            ${isFluid\n            ? html `<hr class=\"${prefix}--text-input__divider\" />`\n            : null}\n            ${isFluid && !inline ? validationMessage : null}\n          </div>\n\n          ${ /* Non-fluid: validation and helper outside field wrapper */''}\n          ${!isFluid && !inline ? validationMessage || helper : null}\n        </div>\n      </div>\n    `;\n    }\n    updated() {\n        var _a, _b, _c, _d, _e;\n        this.toggleAttribute('ai-label', this._hasAILabel);\n        const label = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(\"slot[name='ai-label']\");\n        if (label) {\n            label === null || label === void 0 ? void 0 : label.classList.toggle(`${prefix}--slug--revert`, (_b = this.querySelector(`${prefix}-ai-label`)) === null || _b === void 0 ? void 0 : _b.hasAttribute('revert-active'));\n        }\n        else {\n            (_d = (_c = this.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelector(\"slot[name='slug']\")) === null || _d === void 0 ? void 0 : _d.classList.toggle(`${prefix}--slug--revert`, (_e = this.querySelector(`${prefix}-slug`)) === null || _e === void 0 ? void 0 : _e.hasAttribute('revert-active'));\n        }\n    }\n    /**\n     * A selector that will return the slug item.\n     *\n     * remove in v12\n     */\n    static get slugItem() {\n        return `${prefix}-slug`;\n    }\n    /**\n     * A selector that will return the AI Label item.\n     */\n    static get aiLabelItem() {\n        return `${prefix}-ai-label`;\n    }\n};\nCDSTextInput.shadowRootOptions = Object.assign(Object.assign({}, LitElement.shadowRootOptions), { delegatesFocus: true });\nCDSTextInput.styles = styles;\n__decorate([\n    query('input')\n], CDSTextInput.prototype, \"_input\", void 0);\n__decorate([\n    property()\n], CDSTextInput.prototype, \"autocomplete\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CDSTextInput.prototype, \"autofocus\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSTextInput.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'enable-counter', reflect: true })\n], CDSTextInput.prototype, \"enableCounter\", void 0);\n__decorate([\n    property({ attribute: 'helper-text' })\n], CDSTextInput.prototype, \"helperText\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSTextInput.prototype, \"invalid\", void 0);\n__decorate([\n    property({ attribute: 'invalid-text' })\n], CDSTextInput.prototype, \"invalidText\", void 0);\n__decorate([\n    property({ type: Number, attribute: 'max-count', reflect: true })\n], CDSTextInput.prototype, \"maxCount\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSTextInput.prototype, \"warn\", void 0);\n__decorate([\n    property({ attribute: 'warn-text' })\n], CDSTextInput.prototype, \"warnText\", void 0);\n__decorate([\n    property({ attribute: 'hide-label', type: Boolean, reflect: true })\n], CDSTextInput.prototype, \"hideLabel\", void 0);\n__decorate([\n    property({ attribute: 'label' })\n], CDSTextInput.prototype, \"label\", void 0);\n__decorate([\n    property()\n], CDSTextInput.prototype, \"name\", void 0);\n__decorate([\n    property()\n], CDSTextInput.prototype, \"pattern\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSTextInput.prototype, \"placeholder\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSTextInput.prototype, \"readonly\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSTextInput.prototype, \"required\", void 0);\n__decorate([\n    property({ attribute: 'required-validity-message' })\n], CDSTextInput.prototype, \"requiredValidityMessage\", void 0);\n__decorate([\n    property()\n], CDSTextInput.prototype, \"hidePasswordLabel\", void 0);\n__decorate([\n    property()\n], CDSTextInput.prototype, \"showPasswordLabel\", void 0);\n__decorate([\n    property({\n        type: Boolean,\n        attribute: 'show-password-visibility-toggle',\n        reflect: true,\n    })\n], CDSTextInput.prototype, \"showPasswordVisibilityToggle\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSTextInput.prototype, \"size\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CDSTextInput.prototype, \"isFluid\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSTextInput.prototype, \"inline\", void 0);\n__decorate([\n    property()\n], CDSTextInput.prototype, \"tooltipAlignment\", void 0);\n__decorate([\n    property()\n], CDSTextInput.prototype, \"tooltipDirection\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSTextInput.prototype, \"type\", void 0);\n__decorate([\n    property({ attribute: 'validity-message' })\n], CDSTextInput.prototype, \"validityMessage\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSTextInput.prototype, \"value\", null);\nCDSTextInput = __decorate([\n    carbonElement(`${prefix}-text-input`)\n], CDSTextInput);\nvar CDSTextInput$1 = CDSTextInput;\n\nexport { INPUT_SIZE, INPUT_TOOLTIP_ALIGNMENT, INPUT_TOOLTIP_DIRECTION, INPUT_TYPE, CDSTextInput$1 as default };\n//# sourceMappingURL=text-input.js.map\n","/**\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { __decorate } from 'tslib';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings.js';\nimport Search16 from '@carbon/icons/es/search/16.js';\nimport Close16 from '@carbon/icons/es/close/16.js';\nimport ifNonEmpty from '../../globals/directives/if-non-empty.js';\nimport FocusMixin from '../../globals/mixins/focus.js';\nimport FormMixin from '../../globals/mixins/form.js';\nimport '../text-input/text-input.js';\nimport HostListener from '../../globals/decorators/host-listener.js';\nimport HostListenerMixin from '../../globals/mixins/host-listener.js';\nimport styles from './search.scss.js';\nimport { carbonElement } from '../../globals/decorators/carbon-element.js';\nimport { iconLoader } from '../../globals/internal/icon-loader.js';\nimport { INPUT_SIZE } from '../text-input/defs.js';\n\n/**\n * Copyright IBM Corp. 2019, 2025\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * Search box.\n *\n * @element cds-search\n * @csspart search-icon The search icon.\n * @csspart label-text The label text.\n * @csspart input The input box.\n * @csspart close-button The close button.\n * @csspart close-icon The close icon.\n * @fires cds-search-input - The custom event fired after the search content is changed upon a user gesture.\n */\nlet CDSSearch = class CDSSearch extends HostListenerMixin(FocusMixin(FormMixin(LitElement))) {\n    constructor() {\n        super(...arguments);\n        /**\n         * Specify an optional value for the autocomplete property on the underlying <input>,\n         * defaults to \"off\"\n         */\n        this.autoComplete = 'off';\n        /**\n         * Specify a label to be read by screen readers on the \"close\" button\n         */\n        this.closeButtonLabelText = '';\n        /**\n         * `true` if the search box should be disabled.\n         */\n        this.disabled = false;\n        /**\n         * `true` if the search bar can be expandable\n         */\n        this.expandable = false;\n        /**\n         * `true` if the expandable search has been expanded\n         */\n        this.expanded = false;\n        this.hasCustomIcon = false;\n        /**\n         * The label text.\n         */\n        this.labelText = '';\n        /**\n         * The form name in `FormData`.\n         */\n        this.name = '';\n        /**\n         * Specify the role for the underlying <input>, defaults to searchbox\n         */\n        this.role = '';\n        /**\n         * The placeholder text.\n         */\n        this.placeholder = 'Search';\n        /**\n         * The search box size.\n         */\n        this.size = INPUT_SIZE.MEDIUM;\n        /**\n         * The `<input>` name.\n         */\n        this.type = '';\n        /**\n         * The value.\n         */\n        this.value = '';\n    }\n    /**\n     * Handles `input` event on the `<input>` in the shadow DOM.\n     */\n    _handleInput(event) {\n        const { target } = event;\n        const { value } = target;\n        this.dispatchEvent(new CustomEvent(this.constructor.eventInput, {\n            bubbles: true,\n            composed: true,\n            cancelable: false,\n            detail: {\n                value,\n            },\n        }));\n        this.value = value;\n    }\n    /**\n     * Handles `click` event on the button to clear search box content.\n     */\n    _handleClearInputButtonClick() {\n        if (this.value) {\n            this.dispatchEvent(new CustomEvent(this.constructor.eventInput, {\n                bubbles: true,\n                composed: true,\n                cancelable: false,\n                detail: {\n                    value: '',\n                },\n            }));\n            this.value = '';\n            // set focus on back to input once search is cleared\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- https://github.com/carbon-design-system/carbon/issues/20452\n            const input = this.shadowRoot.querySelector('input');\n            input.focus();\n        }\n    }\n    /**\n     * Expand only when the magnifier icon is clicked\n     */\n    _handleExpand(e) {\n        // Check if the click came from the magnifier area\n        const path = (e.composedPath && e.composedPath()) || [];\n        const isMagnifierClick = path.some((n) => { var _a; return (_a = n === null || n === void 0 ? void 0 : n.classList) === null || _a === void 0 ? void 0 : _a.contains(`${prefix}--search-magnifier`); });\n        if (isMagnifierClick && this.expandable && !this.expanded) {\n            this._expandAndFocus();\n        }\n    }\n    _expandAndFocus() {\n        var _a, _b;\n        this.setAttribute('expanded', '');\n        // Focus the input after expanding\n        (_b = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.getElementById('input')) === null || _b === void 0 ? void 0 : _b.focus();\n    }\n    /**\n     * Handle keyboard interactions:\n     * - Enter/Space: expand when collapsed and focus the input\n     * - Esc: if input has text: clear it | if empty: collapse and move focus back to magnifier\n     */\n    _handleKeys(event) {\n        var _a, _b, _c;\n        const key = event.key;\n        // Esc only works when the input is the active element\n        if (key === 'Escape') {\n            const inputEl = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.getElementById('input');\n            if (((_b = this.shadowRoot) === null || _b === void 0 ? void 0 : _b.activeElement) === inputEl) {\n                event.stopPropagation();\n                event.preventDefault();\n                if ((_c = this.value) === null || _c === void 0 ? void 0 : _c.length) {\n                    // Clear but keep focus in the input\n                    this.dispatchEvent(new CustomEvent(this.constructor.eventInput, {\n                        bubbles: true,\n                        composed: true,\n                        cancelable: false,\n                        detail: { value: '' },\n                    }));\n                    this.value = '';\n                }\n                else {\n                    if (this.expandable && this.expanded) {\n                        this.removeAttribute('expanded');\n                    }\n                    this._focusMagnifier();\n                }\n            }\n            return;\n        }\n        if (!this.expandable || this.expanded) {\n            return;\n        }\n        // Enter/Space: expand if collapsed\n        if (key === 'Enter' || key === ' ') {\n            event.preventDefault();\n            this._expandAndFocus();\n        }\n    }\n    /**\n     * Handles `focusout` event on the component to be closed after being expanded\n     * Will not close if there is a value typed within.\n     */\n    _handleClose() {\n        if (this.expandable && this.expanded && !this.value) {\n            this.removeAttribute('expanded');\n        }\n    }\n    /**\n     * Handler for @slotchange, will only be ran if user sets an element under the \"icon\" slot.\n     *\n     * @private\n     */\n    _handleSlotChange() {\n        const icon = this.querySelector('svg');\n        icon === null || icon === void 0 ? void 0 : icon.setAttribute('part', 'search-icon');\n        icon === null || icon === void 0 ? void 0 : icon.setAttribute('class', `${prefix}--search-magnifier-icon`);\n        icon === null || icon === void 0 ? void 0 : icon.setAttribute('role', `img`);\n        this.hasCustomIcon = true;\n    }\n    _handleFormdata(event) {\n        const { formData } = event;\n        const { disabled, name, value } = this;\n        if (!disabled) {\n            formData.append(name, value);\n        }\n    }\n    /**\n     * Move focus back to the magnifier element.\n     * Adds tabindex=\"-1\" if it is not focusable yet.\n     */\n    _focusMagnifier() {\n        var _a;\n        const magnifier = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(`.${prefix}--search-magnifier`);\n        if (magnifier) {\n            if (!magnifier.hasAttribute('tabindex')) {\n                magnifier.tabIndex = -1;\n            }\n            magnifier.focus();\n        }\n    }\n    render() {\n        const { autoComplete, closeButtonLabelText, disabled, hasCustomIcon, labelText, name, placeholder, role, type, value = '', _handleInput: handleInput, _handleClearInputButtonClick: handleClearInputButtonClick, _handleSlotChange: handleSlotChange, } = this;\n        const clearClasses = classMap({\n            [`${prefix}--search-close`]: true,\n            [`${prefix}--search-close--hidden`]: !this.value,\n        });\n        return html `\n      <div class=\"${prefix}--search-magnifier\">\n        <slot name=\"icon\" @slotchange=${handleSlotChange}>\n          ${hasCustomIcon\n            ? html ``\n            : iconLoader(Search16, {\n                part: 'search-icon',\n                class: `${prefix}--search-magnifier-icon`,\n                role: 'img',\n            })}\n        </slot>\n      </div>\n      <label for=\"input\" part=\"label-text\" class=\"${prefix}--label\">\n        <slot>${labelText}</slot>\n      </label>\n      <input\n        autocomplete=\"${autoComplete}\"\n        id=\"input\"\n        part=\"input\"\n        type=\"${ifNonEmpty(type)}\"\n        class=\"${prefix}--search-input\"\n        ?disabled=\"${disabled}\"\n        name=\"${ifNonEmpty(name)}\"\n        placeholder=\"${ifNonEmpty(placeholder)}\"\n        role=\"${role}\"\n        .value=\"${value}\"\n        @input=\"${handleInput}\" />\n      <button\n        part=\"close-button\"\n        class=\"${clearClasses}\"\n        @click=\"${handleClearInputButtonClick}\"\n        type=\"button\"\n        aria-label=\"${closeButtonLabelText}\">\n        ${iconLoader(Close16, {\n            part: 'close-icon',\n            'aria-label': closeButtonLabelText,\n            role: 'img',\n        })}\n      </button>\n    `;\n    }\n    /**\n     * The name of the custom event fired after the search content is changed upon a user gesture.\n     */\n    static get eventInput() {\n        return `${prefix}-search-input`;\n    }\n};\nCDSSearch.shadowRootOptions = Object.assign(Object.assign({}, LitElement.shadowRootOptions), { delegatesFocus: true });\nCDSSearch.styles = styles;\n__decorate([\n    HostListener('click')\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- https://github.com/carbon-design-system/carbon/issues/20452\n    // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n], CDSSearch.prototype, \"_handleExpand\", null);\n__decorate([\n    HostListener('keydown')\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- https://github.com/carbon-design-system/carbon/issues/20452\n    // @ts-ignore\n], CDSSearch.prototype, \"_handleKeys\", null);\n__decorate([\n    HostListener('focusout')\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- https://github.com/carbon-design-system/carbon/issues/20452\n    // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n], CDSSearch.prototype, \"_handleClose\", null);\n__decorate([\n    property({ attribute: 'autocomplete' })\n], CDSSearch.prototype, \"autoComplete\", void 0);\n__decorate([\n    property({ attribute: 'close-button-label-text' })\n], CDSSearch.prototype, \"closeButtonLabelText\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSSearch.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSSearch.prototype, \"expandable\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSSearch.prototype, \"expanded\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CDSSearch.prototype, \"hasCustomIcon\", void 0);\n__decorate([\n    property({ attribute: 'label-text' })\n], CDSSearch.prototype, \"labelText\", void 0);\n__decorate([\n    property()\n], CDSSearch.prototype, \"name\", void 0);\n__decorate([\n    property()\n], CDSSearch.prototype, \"role\", void 0);\n__decorate([\n    property()\n], CDSSearch.prototype, \"placeholder\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSSearch.prototype, \"size\", void 0);\n__decorate([\n    property()\n], CDSSearch.prototype, \"type\", void 0);\n__decorate([\n    property({ type: String })\n], CDSSearch.prototype, \"value\", void 0);\nCDSSearch = __decorate([\n    carbonElement(`${prefix}-search`)\n], CDSSearch);\nvar CDSSearch$1 = CDSSearch;\n\nexport { CDSSearch$1 as default };\n//# sourceMappingURL=search.js.map\n","/**\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { __decorate } from 'tslib';\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings.js';\nimport '../text-input/text-input.js';\nimport styles from './search.scss.js';\nimport { carbonElement } from '../../globals/decorators/carbon-element.js';\nimport { INPUT_SIZE } from '../text-input/defs.js';\n\n/**\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * Skeleton of search.\n */\nlet CDSSearchSkeleton = class CDSSearchSkeleton extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * The search box size. Corresponds to the attribute with the same name.\n         */\n        this.size = INPUT_SIZE.MEDIUM;\n    }\n    render() {\n        return html `\n      <span class=\"${prefix}--label\"></span>\n      <div class=\"${prefix}--search-input\"></div>\n    `;\n    }\n};\nCDSSearchSkeleton.styles = styles;\n__decorate([\n    property({ reflect: true })\n], CDSSearchSkeleton.prototype, \"size\", void 0);\nCDSSearchSkeleton = __decorate([\n    carbonElement(`${prefix}-search-skeleton`)\n], CDSSearchSkeleton);\nvar CDSSearchSkeleton$1 = CDSSearchSkeleton;\n\nexport { CDSSearchSkeleton$1 as default };\n//# sourceMappingURL=search-skeleton.js.map\n","/**\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { __decorate } from 'tslib';\nimport { LitElement, html } from 'lit';\nimport { query, property, state } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings.js';\nimport { iconLoader } from '../../globals/internal/icon-loader.js';\nimport Close16 from '@carbon/icons/es/close/16.js';\nimport FocusMixin from '../../globals/mixins/focus.js';\nimport HostListener from '../../globals/decorators/host-listener.js';\nimport HostListenerMixin from '../../globals/mixins/host-listener.js';\nimport { TAG_SIZE, TAG_TYPE } from './defs.js';\nimport styles from './tag.scss.js';\nimport { carbonElement } from '../../globals/decorators/carbon-element.js';\n\n/**\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * Tag.\n * @element cds-tag\n * @fires cds-tag-beingclosed - The custom event fired as the element is being closed\n * @fires cds-tag-closed - The custom event fired after the element has been closed\n */\nlet CDSTag = class CDSTag extends HostListenerMixin(FocusMixin(LitElement)) {\n    constructor() {\n        super(...arguments);\n        /**\n         * Handles `click` event on this element.\n         *\n         * @param event The event.\n         */\n        this._handleClick = (event) => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- https://github.com/carbon-design-system/carbon/issues/20452\n            if (event.composedPath().indexOf(this._buttonNode) >= 0) {\n                if (this.disabled) {\n                    event.stopPropagation();\n                }\n                else if (this.open) {\n                    const init = {\n                        bubbles: true,\n                        cancelable: true,\n                        composed: true,\n                        detail: {\n                            triggeredBy: event.target,\n                        },\n                    };\n                    if (this.dispatchEvent(new CustomEvent(this.constructor.eventBeforeClose, init))) {\n                        this.open = false;\n                        this.dispatchEvent(new CustomEvent(this.constructor.eventClose, init));\n                    }\n                }\n            }\n        };\n        /**\n         * Text to show on filter tag \"clear\" buttons. Corresponds to the attribute with the same name\n         *\n         * @deprecated The `title` property has been deprecated and will be removed in the next major version. Use cds-dismissible-tag instead.\n         */\n        this.title = 'Clear filter';\n        /**\n         * `true` if the tag should be disabled\n         */\n        this.disabled = false;\n        /**\n         * Determine if is a filter/chip\n         *\n         * @deprecated The `filter` property has been deprecated and will be removed in the next major version. Use cds-dismissible-tag instead.\n         */\n        this.filter = false;\n        /**\n         * `true` if there is a custom icon.\n         */\n        this.hasCustomIcon = false;\n        /**\n         * `true` if the tag should be open.\n         */\n        this.open = true;\n        /**\n         * The size of the tag.\n         */\n        this.size = TAG_SIZE.MEDIUM;\n        /**\n         * The type of the tag.\n         */\n        this.type = TAG_TYPE.GRAY;\n        /**\n         * true if the tag text has ellipsis applied\n         */\n        this._hasEllipsisApplied = false;\n    }\n    /**\n     * Handles `slotchange` event.\n     */\n    _handleAILabelSlotChange({ target }) {\n        const hasContent = target\n            .assignedNodes()\n            .filter((elem) => elem.matches !== undefined\n            ? elem.matches(this.constructor.aiLabelItem) ||\n                // remove reference of slug in v12\n                elem.matches(this.constructor.slugItem)\n            : false);\n        if (hasContent.length > 0) {\n            hasContent[0].setAttribute('tag', `${this.type}`);\n            hasContent[0].setAttribute('size', 'sm');\n            hasContent[0].setAttribute('kind', 'inline');\n        }\n        this.requestUpdate();\n    }\n    /**\n     * Handles `slotchange` event.\n     */\n    _handleIconSlotChange({ target }) {\n        const hasIcon = target.assignedNodes();\n        this.hasCustomIcon = Boolean(hasIcon.length > 0);\n        this.requestUpdate();\n    }\n    updated() {\n        var _a;\n        const textContainer = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(`.${prefix}--tag__label`);\n        if (!textContainer || this._hasEllipsisApplied === true)\n            return;\n        this._hasEllipsisApplied =\n            textContainer.scrollWidth > textContainer.clientWidth;\n        const root = this.getRootNode();\n        // Check if the root is a shadow root and get its host\n        if (root instanceof ShadowRoot) {\n            const parent = root.host.tagName.toLowerCase();\n            if (parent === `${prefix}-selectable-tag` ||\n                parent === `${prefix}-operational-tag`) {\n                this.setAttribute('role', 'button');\n                this.tabIndex = this.disabled ? -1 : 0;\n            }\n        }\n    }\n    render() {\n        const { disabled, filter, _handleAILabelSlotChange: handleAILabelSlotChange, _handleIconSlotChange: handleIconSlotChange, size, title, } = this;\n        return html `\n      ${size !== TAG_SIZE.SMALL\n            ? html `<slot name=\"icon\" @slotchange=\"${handleIconSlotChange}\"></slot>`\n            : ''}\n      <span class=\"${prefix}--tag__label\">\n        <slot></slot>\n      </span>\n      <slot name=\"decorator\" @slotchange=\"${handleAILabelSlotChange}\"></slot>\n      <slot name=\"ai-label\" @slotchange=\"${handleAILabelSlotChange}\"></slot>\n      <slot name=\"slug\" @slotchange=\"${handleAILabelSlotChange}\"></slot>\n      ${filter\n            ? html `\n            <button class=\"${prefix}--tag__close-icon\" ?disabled=${disabled}>\n              ${iconLoader(Close16, { 'aria-label': title })}\n            </button>\n          `\n            : ``}\n    `;\n    }\n    /**\n     * A selector that will return the slug item.\n     *\n     * remove in v12\n     */\n    static get slugItem() {\n        return `${prefix}-slug`;\n    }\n    /**\n     * A selector that will return the AI Label item.\n     */\n    static get aiLabelItem() {\n        return `${prefix}-ai-label`;\n    }\n    /**\n     * The name of the custom event fired before this tag is being closed upon a user gesture.\n     * Cancellation of this event stops the user-initiated action of closing this tag.\n     */\n    static get eventBeforeClose() {\n        return `${prefix}-tag-beingclosed`;\n    }\n    /**\n     * The name of the custom event fired after this tag is closed upon a user gesture.\n     */\n    static get eventClose() {\n        return `${prefix}-tag-closed`;\n    }\n};\nCDSTag.styles = styles;\n__decorate([\n    query('button')\n], CDSTag.prototype, \"_buttonNode\", void 0);\n__decorate([\n    HostListener('shadowRoot:click')\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- https://github.com/carbon-design-system/carbon/issues/20452\n    // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n], CDSTag.prototype, \"_handleClick\", void 0);\n__decorate([\n    property({ type: String })\n], CDSTag.prototype, \"title\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSTag.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSTag.prototype, \"filter\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'has-custom-icon', reflect: true })\n], CDSTag.prototype, \"hasCustomIcon\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSTag.prototype, \"open\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSTag.prototype, \"size\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSTag.prototype, \"type\", void 0);\n__decorate([\n    state()\n], CDSTag.prototype, \"_hasEllipsisApplied\", void 0);\nCDSTag = __decorate([\n    carbonElement(`${prefix}-tag`)\n], CDSTag);\nvar CDSTag$1 = CDSTag;\n\nexport { TAG_SIZE, TAG_TYPE, CDSTag$1 as default };\n//# sourceMappingURL=tag.js.map\n","/**\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { __decorate } from 'tslib';\nimport { css } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings.js';\nimport HostListener from '../../globals/decorators/host-listener.js';\nimport HostListenerMixin from '../../globals/mixins/host-listener.js';\nimport CDSPopover from '../popover/popover.js';\nimport '../popover/popover-content.js';\nimport styles from './tooltip.scss.js';\nimport { carbonElement } from '../../globals/decorators/carbon-element.js';\n\n/**\n * Copyright IBM Corp. 2019, 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * Trigger button of tooltip.\n *\n * @element cds-tooltip\n */\nlet CDSTooltip = class CDSTooltip extends HostListenerMixin(CDSPopover) {\n    constructor() {\n        super(...arguments);\n        /**\n         * Specify how the trigger should align with the tooltip\n         */\n        this.align = 'top';\n        /**\n         * Specify whether a auto align functionality should be applied\n         */\n        this.autoalign = false;\n        /**\n         * `true` if this tooltip is in a data table row\n         */\n        this.dataTable = false;\n        /**\n         * Specify whether the tooltip should be closed when clicked\n         */\n        this.closeOnActivation = false;\n        /**\n         * Specify whether the tooltip should be open when it first renders\n         */\n        this.defaultOpen = false;\n        /**\n         * Specify the duration in milliseconds to delay before displaying the tooltip\n         */\n        this.enterDelayMs = 100;\n        /**\n         * Specify the duration in milliseconds to delay before hiding the tooltip\n         */\n        this.leaveDelayMs = 300;\n        /**\n         * Only open tooltip on keyboard interactions, this is used for interactive tags\n         * (ie. operational-tag, selectable-tag)\n         */\n        this.keyboardOnly = false;\n        /**\n         * Specify the size of the tooltip\n         */\n        this.size = false;\n        /**\n         * Specify the timeout reference for the tooltip\n         */\n        this.timeoutId = 0;\n        /**\n         * Specify whether the tooltip should be open when it first renders\n         */\n        this.toolbarAction = false;\n        /**\n         * Track if last interaction was a keyboard interaction\n         */\n        this.lastInteractionWasKeyboard = false;\n        /**\n         * Handles opening of tooltip\n         */\n        this._showTooltip = async () => {\n            window.clearTimeout(this.timeoutId);\n            this.timeoutId = window.setTimeout(async () => {\n                var _a;\n                this.open = true;\n                const { open, updateComplete } = this;\n                if (open) {\n                    await updateComplete;\n                    const { selectorTooltipContent } = this\n                        .constructor;\n                    (_a = this.querySelector(selectorTooltipContent)) === null || _a === void 0 ? void 0 : _a.focus();\n                }\n            }, this.enterDelayMs);\n        };\n        /**\n         * Handles `mouseover` event on this element.\n         */\n        this._handleHover = (event) => {\n            if (this.keyboardOnly) {\n                if (event instanceof FocusEvent && this.lastInteractionWasKeyboard) {\n                    this._showTooltip();\n                }\n            }\n            else {\n                this._showTooltip();\n            }\n        };\n        /**\n         * Handles `mouseleave` event on this element.\n         */\n        this._handleHoverOut = async () => {\n            window.clearTimeout(this.timeoutId);\n            this.timeoutId = window.setTimeout(async () => {\n                const { open } = this;\n                if (open) {\n                    this.open = false;\n                }\n            }, this.leaveDelayMs);\n        };\n        /**\n         * Handles `click` event on this element.\n         */\n        this._handleClick = async () => {\n            this.lastInteractionWasKeyboard = false;\n            if (this.closeOnActivation) {\n                this._handleHoverOut();\n            }\n        };\n        /**\n         * Handles `keydown` event on this element.\n         */\n        this._handleKeydown = async (event) => {\n            // needed for interactive tags for when the tag is focused from tabbing into it\n            // tooltip is expected to open only from keyboard interaction\n            if (event.key === 'Tab') {\n                this.lastInteractionWasKeyboard = true;\n            }\n            if (event.key === ' ' || event.key === 'Enter' || event.key === 'Escape') {\n                this.lastInteractionWasKeyboard = true;\n                if (this.closeOnActivation) {\n                    this._handleHoverOut();\n                }\n            }\n        };\n    }\n    /**\n     * Handles `slotchange` event.\n     */\n    _handleSlotChange({ target }) {\n        const component = target.assignedNodes().filter((node) => node.nodeType !== Node.TEXT_NODE || node.textContent.trim() // eslint-disable-line @typescript-eslint/no-non-null-assertion -- https://github.com/carbon-design-system/carbon/issues/20452\n        );\n        if (!component[0]) {\n            return;\n        }\n        component[0].addEventListener('focus', this._handleHover);\n        component[0].addEventListener('focusout', this._handleHoverOut);\n        if (!this.keyboardOnly) {\n            component[0].addEventListener('mouseover', this._handleHover);\n            component[0].addEventListener('mouseleave', this._handleHoverOut);\n        }\n        this.requestUpdate();\n    }\n    connectedCallback() {\n        if (!this.hasAttribute('highContrast')) {\n            this.setAttribute('highContrast', '');\n        }\n        if (!this.shadowRoot) {\n            this.attachShadow({ mode: 'open' });\n        }\n        window.addEventListener('keydown', this._handleKeydown, true);\n        super.connectedCallback();\n    }\n    disconnectedCallback() {\n        window.removeEventListener('keydown', this._handleKeydown, true);\n        super.disconnectedCallback();\n    }\n    updated(changedProperties) {\n        var _a, _b;\n        const { selectorTooltipContent } = this.constructor;\n        const toolTipContent = this.querySelector(selectorTooltipContent);\n        if (changedProperties.has('defaultOpen')) {\n            this.open = this.defaultOpen;\n        }\n        if (changedProperties.has('open')) {\n            // eslint-disable-next-line  @typescript-eslint/no-unused-expressions -- https://github.com/carbon-design-system/carbon/issues/20452\n            this.open\n                ? toolTipContent === null || toolTipContent === void 0 ? void 0 : toolTipContent.setAttribute('open', '')\n                : toolTipContent === null || toolTipContent === void 0 ? void 0 : toolTipContent.removeAttribute('open');\n        }\n        ['align', 'caret', 'autoalign'].forEach((name) => {\n            if (changedProperties.has(name)) {\n                const { [name]: value } = this;\n                toolTipContent[name] = value;\n            }\n        });\n        if (this.hasAttribute('highcontrast')) {\n            toolTipContent === null || toolTipContent === void 0 ? void 0 : toolTipContent.setAttribute('highcontrast', '');\n        }\n        (_b = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(`.${prefix}--popover-container`)) === null || _b === void 0 ? void 0 : _b.classList.add(`${prefix}--tooltip`);\n        super.updated(changedProperties);\n    }\n    /**\n     * A selector that will return the CDSTooltipContent.\n     */\n    static get selectorTooltipContent() {\n        return `${prefix}-tooltip-content`;\n    }\n    static get styles() {\n        return css `\n      ${super.styles}${styles}\n    `;\n    }\n};\n__decorate([\n    property({ reflect: true, type: String })\n], CDSTooltip.prototype, \"align\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSTooltip.prototype, \"autoalign\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true, attribute: 'data-table' })\n], CDSTooltip.prototype, \"dataTable\", void 0);\n__decorate([\n    property({ reflect: true, type: Boolean })\n], CDSTooltip.prototype, \"closeOnActivation\", void 0);\n__decorate([\n    property({ reflect: true, type: Boolean })\n], CDSTooltip.prototype, \"defaultOpen\", void 0);\n__decorate([\n    property({ attribute: 'enter-delay-ms', type: Number })\n], CDSTooltip.prototype, \"enterDelayMs\", void 0);\n__decorate([\n    property({ attribute: 'leave-delay-ms', type: Number })\n], CDSTooltip.prototype, \"leaveDelayMs\", void 0);\n__decorate([\n    property({ attribute: 'keyboard-only', type: Boolean })\n], CDSTooltip.prototype, \"keyboardOnly\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSTooltip.prototype, \"size\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSTooltip.prototype, \"timeoutId\", void 0);\n__decorate([\n    property({ reflect: true, attribute: 'toolbar-action', type: Boolean })\n], CDSTooltip.prototype, \"toolbarAction\", void 0);\n__decorate([\n    HostListener('click')\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- https://github.com/carbon-design-system/carbon/issues/20452\n    // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n], CDSTooltip.prototype, \"_handleClick\", void 0);\n__decorate([\n    HostListener('keydown')\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- https://github.com/carbon-design-system/carbon/issues/20452\n    // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n], CDSTooltip.prototype, \"_handleKeydown\", void 0);\nCDSTooltip = __decorate([\n    carbonElement(`${prefix}-tooltip`)\n], CDSTooltip);\nvar CDSTooltip$1 = CDSTooltip;\n\nexport { CDSTooltip$1 as default };\n//# sourceMappingURL=tooltip.js.map\n","/**\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { __decorate } from 'tslib';\nimport { LitElement, html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings.js';\nimport { POPOVER_ALIGNMENT } from '../popover/defs.js';\nimport '../popover/popover.js';\nimport '../popover/popover-content.js';\nimport styles from './tooltip.scss.js';\nimport { carbonElement } from '../../globals/decorators/carbon-element.js';\n\n/**\n * Copyright IBM Corp. 2019, 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * Definition tooltip.\n *\n * @element cds-definition-tooltip\n */\nlet CDSDefinitionTooltip = class CDSDefinitionTooltip extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Specify how the trigger should align with the tooltip\n         */\n        this.align = 'bottom';\n        /**\n         * Will auto-align Definition Tooltip. This prop is currently experimental and is subject to future changes.\n         */\n        this.autoalign = false;\n        /**\n         * Specify whether the tooltip should be open when it first renders\n         */\n        this.defaultOpen = false;\n        /**\n         * Specifies whether the `DefinitionTooltip` should open on hover or not\n         */\n        this.openOnHover = false;\n        this.open = false;\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.hasAttribute('default-open')) {\n            this.open = true;\n        }\n    }\n    _handleBlur() {\n        this.open = false;\n    }\n    _handleMouseDown() {\n        this.open = !this.open;\n    }\n    _handleKeyDown(event) {\n        const { key } = event;\n        if (this.open && (key === 'Esc' || key === 'Escape')) {\n            event.stopPropagation();\n            this.open = false;\n        }\n    }\n    _handleHover() {\n        if (this.openOnHover && !this.open) {\n            this.open = true;\n        }\n        else {\n            this.open = false;\n        }\n    }\n    _handleFocus() {\n        this.open = true;\n    }\n    render() {\n        const { align, open } = this;\n        return html `\n      <cds-popover\n        @mouseenter=${this._handleHover}\n        @mouseleave=${this._handleHover}\n        highContrast\n        dropShadow=${false}\n        align=${align}\n        .open=${open}>\n        <button\n          @focus=${this._handleFocus}\n          @blur=${this._handleBlur}\n          @mousedown=${this._handleMouseDown}\n          @keydown=${this._handleKeyDown}\n          aria-expanded=${open}\n          part=\"definition-term\"\n          class=\"${prefix}--definition-term\">\n          <slot></slot>\n        </button>\n        <cds-popover-content>\n          <slot name=\"definition\"></slot>\n        </cds-popover-content>\n      </cds-popover>\n    `;\n    }\n};\nCDSDefinitionTooltip.styles = styles;\n__decorate([\n    property({ reflect: true, type: POPOVER_ALIGNMENT })\n], CDSDefinitionTooltip.prototype, \"align\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSDefinitionTooltip.prototype, \"autoalign\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true, attribute: 'default-open' })\n], CDSDefinitionTooltip.prototype, \"defaultOpen\", void 0);\n__decorate([\n    property({ reflect: true, type: Boolean, attribute: 'open-on-hover' })\n], CDSDefinitionTooltip.prototype, \"openOnHover\", void 0);\n__decorate([\n    state()\n], CDSDefinitionTooltip.prototype, \"open\", void 0);\nCDSDefinitionTooltip = __decorate([\n    carbonElement(`${prefix}-definition-tooltip`)\n], CDSDefinitionTooltip);\nvar CDSDefinitionTooltip$1 = CDSDefinitionTooltip;\n\nexport { CDSDefinitionTooltip$1 as default };\n//# sourceMappingURL=definition-tooltip.js.map\n","/**\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { __decorate } from 'tslib';\nimport { html } from 'lit';\nimport { query, property } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings.js';\nimport { iconLoader } from '../../globals/internal/icon-loader.js';\nimport Close16 from '@carbon/icons/es/close/16.js';\nimport FocusMixin from '../../globals/mixins/focus.js';\nimport HostListener from '../../globals/decorators/host-listener.js';\nimport HostListenerMixin from '../../globals/mixins/host-listener.js';\nimport { TAG_SIZE, TAG_TYPE } from './defs.js';\nimport CDSTag from './tag.js';\nimport '../tooltip/tooltip.js';\nimport '../tooltip/tooltip-content.js';\nimport '../tooltip/definition-tooltip.js';\nimport styles from './tag.scss.js';\nimport { carbonElement } from '../../globals/decorators/carbon-element.js';\n\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2025\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * Dismissible Tag.\n *\n * @element cds-dismissible-tag\n *\n * @fires cds-dismissible-tag-beingclosed - The custom event fired as the element is being closed\n * @fires cds-dismissible-tag-closed - The custom event fired after the element has been closed\n */\nlet CDSDismissibleTag = class CDSDismissibleTag extends HostListenerMixin(FocusMixin(CDSTag)) {\n    constructor() {\n        super(...arguments);\n        /**\n         * Handles `click` event on this element.\n         *\n         * @param event The event.\n         */\n        this._handleClick = (event) => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- https://github.com/carbon-design-system/carbon/issues/20452\n            if (event.composedPath().indexOf(this._buttonNode) >= 0) {\n                if (this.disabled) {\n                    event.stopPropagation();\n                }\n                else if (this.open) {\n                    const nextFocusableTag = this._findNextFocusableTag();\n                    const init = {\n                        bubbles: true,\n                        cancelable: true,\n                        composed: true,\n                        detail: {\n                            triggeredBy: event.target,\n                        },\n                    };\n                    if (this.dispatchEvent(new CustomEvent(this.constructor.eventBeforeClose, init))) {\n                        this.open = false;\n                        if (nextFocusableTag) {\n                            const nextCloseIcon = nextFocusableTag\n                                ._buttonNode;\n                            if (nextCloseIcon) {\n                                nextCloseIcon.focus();\n                            }\n                        }\n                        this.dispatchEvent(new CustomEvent(this.constructor.eventClose, init));\n                    }\n                }\n            }\n        };\n        /**\n         * `true` if the tag should be disabled\n         */\n        this.disabled = false;\n        /**\n         * Specify the tooltip alignment for the dismiss button\n         */\n        this.dismissTooltipAlignment = 'bottom';\n        /**\n         * `true` if the tag should be open.\n         */\n        this.open = true;\n        /**\n         * The size of the tag.\n         */\n        this.size = TAG_SIZE.MEDIUM;\n        /**\n         * Provide a custom `title` to be inserted in the tag.\n         */\n        this.tagTitle = '';\n        /**\n         * Provide text to be rendered inside of a the tag.\n         */\n        this.text = '';\n        /**\n         * The type of the tag.\n         */\n        this.type = TAG_TYPE.GRAY;\n    }\n    /**\n     * Finds the next focusable dismissible tag sibling\n     * @returns {HTMLElement|null} The next focusable dismissible tag or null\n     */\n    _findNextFocusableTag() {\n        let nextElement = this.nextElementSibling;\n        while (nextElement) {\n            if (nextElement.tagName.toLowerCase() === `${prefix}-dismissible-tag` &&\n                !nextElement.hasAttribute('disabled') &&\n                nextElement.getAttribute('open') !== 'false') {\n                return nextElement;\n            }\n            nextElement = nextElement.nextElementSibling;\n        }\n        return null;\n    }\n    /**\n     * Handles `slotchange` event.\n     */\n    _handleAILabelSlotChange({ target }) {\n        const hasContent = target\n            .assignedNodes()\n            .filter((elem) => elem.matches !== undefined\n            ? // remove reference of slug in v12\n                elem.matches(this.constructor.aiLabelItem) ||\n                    // remove reference of slug in v12\n                    elem.matches(this.constructor.slugItem)\n            : false);\n        if (hasContent.length > 0) {\n            hasContent[0].setAttribute('tag', `${this.type}`);\n            hasContent[0].setAttribute('size', 'sm');\n            hasContent[0].setAttribute('kind', 'inline');\n        }\n        this.requestUpdate();\n    }\n    render() {\n        const { disabled, _handleAILabelSlotChange: handleAILabelSlotChange, _handleIconSlotChange: handleIconSlotChange, _hasEllipsisApplied: hasEllipsisApplied, size, tagTitle, text, dismissTooltipLabel, dismissTooltipAlignment, } = this;\n        const dismissLabel = `Dismiss \"${text}\"`;\n        const dismissActionLabel = dismissTooltipLabel || (hasEllipsisApplied ? dismissLabel : 'Dismiss');\n        return html `\n      ${size !== TAG_SIZE.SMALL\n            ? html `<slot name=\"icon\" @slotchange=\"${handleIconSlotChange}\"></slot>`\n            : ''}\n      <div class=\"${prefix}--interactive--tag-children\">\n        <span\n          title=\"${tagTitle ? tagTitle : text}\"\n          class=\"${prefix}--tag__label\">\n          ${text}\n        </span>\n        <slot name=\"decorator\" @slotchange=\"${handleAILabelSlotChange}\"></slot>\n        <slot name=\"ai-label\" @slotchange=\"${handleAILabelSlotChange}\"></slot>\n        <slot name=\"slug\" @slotchange=\"${handleAILabelSlotChange}\"></slot>\n        <cds-tooltip align=${dismissTooltipAlignment} enter-delay-ms=${0}>\n          <button\n            class=\"sb-tooltip-trigger\"\n            role=\"button\"\n            aria-labelledby=\"content\"\n            class=\"${prefix}--tag__close-icon\"\n            ?disabled=${disabled}>\n            ${iconLoader(Close16)}\n          </button>\n          <cds-tooltip-content id=\"content\">\n            ${dismissActionLabel}\n          </cds-tooltip-content>\n        </cds-tooltip>\n      </div>\n    `;\n    }\n    /**\n     * A selector that will return the slug item.\n     *\n     * remove in v12\n     */\n    static get slugItem() {\n        return `${prefix}-slug`;\n    }\n    /**\n     * A selector that will return the AI Label item.\n     */\n    static get aiLabelItem() {\n        return `${prefix}-ai-label`;\n    }\n    /**\n     * The name of the custom event fired before this tag is being closed upon a user gesture.\n     * Cancellation of this event stops the user-initiated action of closing this tag.\n     */\n    static get eventBeforeClose() {\n        return `${prefix}-dismissible-tag-beingclosed`;\n    }\n    /**\n     * The name of the custom event fired after this tag is closed upon a user gesture.\n     */\n    static get eventClose() {\n        return `${prefix}-dismissible-tag-closed`;\n    }\n};\nCDSDismissibleTag.styles = styles;\n__decorate([\n    query('button')\n], CDSDismissibleTag.prototype, \"_buttonNode\", void 0);\n__decorate([\n    HostListener('shadowRoot:click')\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- https://github.com/carbon-design-system/carbon/issues/20452\n    // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n], CDSDismissibleTag.prototype, \"_handleClick\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSDismissibleTag.prototype, \"disabled\", void 0);\n__decorate([\n    property({\n        type: String,\n        attribute: 'dismiss-tooltip-alignment',\n        reflect: true,\n    })\n], CDSDismissibleTag.prototype, \"dismissTooltipAlignment\", void 0);\n__decorate([\n    property({ type: String, attribute: 'dismiss-tooltip-label', reflect: true })\n], CDSDismissibleTag.prototype, \"dismissTooltipLabel\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSDismissibleTag.prototype, \"open\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CDSDismissibleTag.prototype, \"size\", void 0);\n__decorate([\n    property({ type: String, attribute: 'tag-title', reflect: true })\n], CDSDismissibleTag.prototype, \"tagTitle\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CDSDismissibleTag.prototype, \"text\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSDismissibleTag.prototype, \"type\", void 0);\nCDSDismissibleTag = __decorate([\n    carbonElement(`${prefix}-dismissible-tag`)\n], CDSDismissibleTag);\nvar CDSDismissibleTag$1 = CDSDismissibleTag;\n\nexport { TAG_SIZE, TAG_TYPE, CDSDismissibleTag$1 as default };\n//# sourceMappingURL=dismissible-tag.js.map\n","/**\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { __decorate } from 'tslib';\nimport { LitElement, html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings.js';\nimport FocusMixin from '../../globals/mixins/focus.js';\nimport HostListener from '../../globals/decorators/host-listener.js';\nimport HostListenerMixin from '../../globals/mixins/host-listener.js';\nimport { TAG_SIZE } from './defs.js';\nexport { TAG_TYPE } from './defs.js';\nimport './tag.js';\nimport '../tooltip/tooltip.js';\nimport '../tooltip/tooltip-content.js';\nimport '../tooltip/definition-tooltip.js';\nimport styles from './tag.scss.js';\nimport { carbonElement } from '../../globals/decorators/carbon-element.js';\n\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2025\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * Selectable tag.\n *\n * @element cds-selectable-tag\n *\n * @fires cds-selectable-tag-beforeselected - The custom event fired as the element is being selected\n * @fires cds-selectable-tag-selected - The custom event fired after the element has been selected\n */\nlet CDSSelectableTag = class CDSSelectableTag extends HostListenerMixin(FocusMixin(LitElement)) {\n    constructor() {\n        super(...arguments);\n        /**\n         * Custom events to be triggered\n         * @param event Event object\n         */\n        this.triggerEvents = (event) => {\n            if (this.disabled) {\n                event.stopPropagation();\n            }\n            else {\n                const init = {\n                    bubbles: true,\n                    cancelable: true,\n                    composed: true,\n                    detail: {\n                        triggeredBy: event.target,\n                    },\n                };\n                if (this.dispatchEvent(new CustomEvent(this.constructor.eventBeforeSelected, init))) {\n                    this.selected = !this.selected;\n                    this.dispatchEvent(new CustomEvent(this.constructor.eventSelected, init));\n                }\n            }\n        };\n        /**\n         * Handles `click` event on this element.\n         *\n         * @param event The event.\n         */\n        this._handleClick = (event) => {\n            this.triggerEvents(event);\n        };\n        this._handleKeyDown = (event) => {\n            if (event.key === 'Enter' || event.key === ' ') {\n                this.triggerEvents(event);\n            }\n        };\n        /**\n         * `true` if the tag should be disabled\n         */\n        this.disabled = false;\n        /**\n         * Specify the state of the selectable tag.\n         */\n        this.selected = false;\n        /**\n         * The size of the tag.\n         */\n        this.size = TAG_SIZE.MEDIUM;\n        /**\n         * Provide text to be rendered inside of a the tag.\n         */\n        this.text = '';\n        /**\n         * true if the tag text has ellipsis applied\n         */\n        this._hasEllipsisApplied = false;\n    }\n    async updated() {\n        var _a, _b, _c;\n        await this.updateComplete;\n        const textContainer = (_c = (_b = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(`${prefix}-tag`)) === null || _b === void 0 ? void 0 : _b.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelector(`.${prefix}--tag__label`);\n        if (!textContainer)\n            return;\n        const hasEllipsis = textContainer.scrollWidth > textContainer.clientWidth;\n        this._hasEllipsisApplied = hasEllipsis;\n    }\n    render() {\n        const { disabled, selected, size, text, _hasEllipsisApplied: hasEllipsisApplied, } = this;\n        return html ` ${hasEllipsisApplied\n            ? html ` <cds-tooltip align=\"bottom\" keyboard-only leave-delay-ms=${0}>\n          <cds-tag\n            ?aria-pressed=\"${selected}\"\n            size=\"${size}\"\n            ?disabled=\"${disabled}\">\n            <slot name=\"icon\" slot=\"icon\"></slot>\n            ${text}\n            <slot name=\"decorator\" slot=\"decorator\"></slot>\n            <slot name=\"ai-label\" slot=\"ai-label\"></slot>\n            <slot name=\"slug\" slot=\"slug\"></slot>\n          </cds-tag>\n          <cds-tooltip-content id=\"content\"> ${text} </cds-tooltip-content>\n        </cds-tooltip>`\n            : html `\n          <cds-tag\n            ?aria-pressed=\"${selected}\"\n            size=\"${size}\"\n            ?disabled=\"${disabled}\">\n            <slot name=\"icon\" slot=\"icon\"></slot>\n            ${text}\n            <slot name=\"decorator\" slot=\"decorator\"></slot>\n            <slot name=\"ai-label\" slot=\"ai-label\"></slot>\n            <slot name=\"slug\" slot=\"slug\"></slot>\n          </cds-tag>\n        `}`;\n    }\n    /**\n     * The name of the custom event before this tag is selected.\n     */\n    static get eventBeforeSelected() {\n        return `${prefix}-selectable-tag-beingselected`;\n    }\n    /**\n     * The name of the custom event fired after this tag is selected.\n     */\n    static get eventSelected() {\n        return `${prefix}-selectable-tag-selected`;\n    }\n};\nCDSSelectableTag.styles = styles;\n__decorate([\n    HostListener('shadowRoot:click')\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- https://github.com/carbon-design-system/carbon/issues/20452\n    // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n], CDSSelectableTag.prototype, \"_handleClick\", void 0);\n__decorate([\n    HostListener('shadowRoot:keydown')\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- https://github.com/carbon-design-system/carbon/issues/20452\n    // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n], CDSSelectableTag.prototype, \"_handleKeyDown\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSSelectableTag.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSSelectableTag.prototype, \"selected\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CDSSelectableTag.prototype, \"size\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CDSSelectableTag.prototype, \"text\", void 0);\n__decorate([\n    state()\n], CDSSelectableTag.prototype, \"_hasEllipsisApplied\", void 0);\nCDSSelectableTag = __decorate([\n    carbonElement(`${prefix}-selectable-tag`)\n], CDSSelectableTag);\nvar CDSSelectableTag$1 = CDSSelectableTag;\n\nexport { TAG_SIZE, CDSSelectableTag$1 as default };\n//# sourceMappingURL=selectable-tag.js.map\n","/**\n * Copyright IBM Corp. 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { __decorate } from 'tslib';\nimport { LitElement, html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings.js';\nimport FocusMixin from '../../globals/mixins/focus.js';\nimport HostListener from '../../globals/decorators/host-listener.js';\nimport HostListenerMixin from '../../globals/mixins/host-listener.js';\nimport { TAG_SIZE, TAG_TYPE } from './defs.js';\nimport './tag.js';\nimport '../tooltip/tooltip.js';\nimport '../tooltip/tooltip-content.js';\nimport '../tooltip/definition-tooltip.js';\nimport styles from './tag.scss.js';\nimport { carbonElement } from '../../globals/decorators/carbon-element.js';\n\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2025\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * Operational tag.\n *\n * @element cds-operational-tag\n *\n * @fires cds-operational-tag-beforeselected - The custom event fired as the element is being selected\n * @fires cds-operational-tag-selected - The custom event fired after the element has been selected\n */\nlet CDSOperationalTag = class CDSOperationalTag extends HostListenerMixin(FocusMixin(LitElement)) {\n    constructor() {\n        super(...arguments);\n        /**\n         * Custom events to be triggered\n         *\n         * @param event Event object\n         */\n        this.triggerEvents = (event) => {\n            if (this.disabled) {\n                event.stopPropagation();\n            }\n            else {\n                const init = {\n                    bubbles: true,\n                    cancelable: true,\n                    composed: true,\n                    detail: {\n                        triggeredBy: event.target,\n                    },\n                };\n                if (this.dispatchEvent(new CustomEvent(this.constructor.eventBeforeSelected, init))) {\n                    this.selected = !this.selected;\n                    this.dispatchEvent(new CustomEvent(this.constructor.eventSelected, init));\n                }\n            }\n        };\n        /**\n         * Handles `click` event on this element.\n         *\n         * @param event The event.\n         */\n        this._handleClick = (event) => {\n            this.triggerEvents(event);\n        };\n        this._handleKeyDown = (event) => {\n            if (event.key === 'Enter' || event.key === ' ') {\n                this.triggerEvents(event);\n            }\n        };\n        /**\n         * `true` if the tag should be disabled\n         */\n        this.disabled = false;\n        /**\n         * Specify the state of the selectable tag.\n         */\n        this.selected = false;\n        /**\n         * The size of the tag.\n         */\n        this.size = TAG_SIZE.MEDIUM;\n        /**\n         * Provide text to be rendered inside of a the tag.\n         */\n        this.text = '';\n        /**\n         * The type of the tag.\n         */\n        this.type = TAG_TYPE.GRAY;\n        /**\n         * true if the tag text has ellipsis applied\n         */\n        this._hasEllipsisApplied = false;\n    }\n    async updated() {\n        var _a, _b, _c;\n        await this.updateComplete;\n        const textContainer = (_c = (_b = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(`${prefix}-tag`)) === null || _b === void 0 ? void 0 : _b.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelector(`.${prefix}--tag__label`);\n        if (!textContainer)\n            return;\n        const hasEllipsis = textContainer.scrollWidth > textContainer.clientWidth;\n        this._hasEllipsisApplied = hasEllipsis;\n    }\n    render() {\n        const { disabled, selected, size, text, type, _hasEllipsisApplied: hasEllipsisApplied, } = this;\n        return html ` ${hasEllipsisApplied\n            ? html ` <cds-tooltip\n          align=\"bottom\"\n          keyboard-only\n          closeOnActivation\n          leave-delay-ms=${0}>\n          <cds-tag\n            part=\"tag\"\n            ?aria-pressed=\"${selected}\"\n            size=\"${size}\"\n            ?disabled=\"${disabled}\"\n            type=\"${type}\">\n            <slot name=\"icon\" slot=\"icon\"></slot>\n            ${text}\n            <slot name=\"decorator\" slot=\"decorator\"></slot>\n            <slot name=\"ai-label\" slot=\"ai-label\"></slot>\n            <slot name=\"slug\" slot=\"slug\"></slot>\n          </cds-tag>\n          <cds-tooltip-content id=\"content\"> ${text} </cds-tooltip-content>\n        </cds-tooltip>`\n            : html `\n          <cds-tag\n            part=\"tag\"\n            ?aria-pressed=\"${selected}\"\n            size=\"${size}\"\n            ?disabled=\"${disabled}\"\n            type=\"${type}\">\n            <slot name=\"icon\" slot=\"icon\"></slot>\n            ${text}\n            <slot name=\"decorator\" slot=\"decorator\"></slot>\n            <slot name=\"ai-label\" slot=\"ai-label\"></slot>\n            <slot name=\"slug\" slot=\"slug\"></slot>\n          </cds-tag>\n        `}`;\n    }\n    /**\n     * The name of the custom event before this tag is selected.\n     */\n    static get eventBeforeSelected() {\n        return `${prefix}-operational-tag-beingselected`;\n    }\n    /**\n     * The name of the custom event fired after this tag is selected.\n     */\n    static get eventSelected() {\n        return `${prefix}-operational-tag-selected`;\n    }\n};\nCDSOperationalTag.styles = styles;\n__decorate([\n    HostListener('shadowRoot:click')\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- https://github.com/carbon-design-system/carbon/issues/20452\n    // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n], CDSOperationalTag.prototype, \"_handleClick\", void 0);\n__decorate([\n    HostListener('shadowRoot:keydown')\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- https://github.com/carbon-design-system/carbon/issues/20452\n    // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n], CDSOperationalTag.prototype, \"_handleKeyDown\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSOperationalTag.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CDSOperationalTag.prototype, \"selected\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CDSOperationalTag.prototype, \"size\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CDSOperationalTag.prototype, \"text\", void 0);\n__decorate([\n    property({ reflect: true })\n], CDSOperationalTag.prototype, \"type\", void 0);\n__decorate([\n    state()\n], CDSOperationalTag.prototype, \"_hasEllipsisApplied\", void 0);\nCDSOperationalTag = __decorate([\n    carbonElement(`${prefix}-operational-tag`)\n], CDSOperationalTag);\nvar CDSOperationalTag$1 = CDSOperationalTag;\n\nexport { TAG_SIZE, TAG_TYPE, CDSOperationalTag$1 as default };\n//# sourceMappingURL=operational-tag.js.map\n"],"names":[],"sourceRoot":""}