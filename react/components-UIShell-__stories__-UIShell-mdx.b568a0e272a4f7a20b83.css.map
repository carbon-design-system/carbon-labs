{"version":3,"file":"components-UIShell-__stories__-UIShell-mdx.b568a0e272a4f7a20b83.css","mappings":"AAwIA","sources":["webpack://@carbon-labs/react/../../node_modules/@carbon/grid/scss/_breakpoint.scss","webpack://@carbon-labs/react/./src/components/UIShell/__stories__/UIShell.scss"],"sourcesContent":["//\n// Copyright IBM Corp. 2018, 2023\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n@use '@carbon/layout/scss/convert';\n@use 'config' as *;\n\n/// Provide a map and index, and get back the relevant key value\n/// @access public\n/// @param {Map} $map - Map\n/// @param {Integer} $index - Key chain\n/// @return {String} Desired value\n/// @group @carbon/layout\n@function -key-by-index($map, $index) {\n  $keys: map.keys($map);\n  @return list.nth($keys, $index);\n}\n\n/// Get the value of the next breakpoint, or null for the last breakpoint\n/// @param {String} $name - The name of the breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name of the breakpoint and the value is the values for the breakpoint\n/// @param {List} $breakpoint-names [map-keys($breakpoints)] - A list of names from the `$breakpoints` map\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map.keys($breakpoints)\n) {\n  $n: list.index($breakpoint-names, $name);\n  @if $n != null and $n < list.length($breakpoint-names) {\n    @return list.nth($breakpoint-names, $n + 1);\n  }\n  @return null;\n}\n\n/// Get the value of the previous breakpoint, or null for the first breakpoint\n/// @param {String} $name - The name of the breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name of the breakpoint and the value is the values for the breakpoint\n/// @param {List} $breakpoint-names [map-keys($breakpoints)] - A list of names from the `$breakpoints` map\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function breakpoint-prev(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map.keys($breakpoints)\n) {\n  $n: list.index($breakpoint-names, $name);\n  @if $n != null and $n > 1 {\n    @return list.nth($breakpoint-names, $n - 1);\n  }\n  @return null;\n}\n\n/// Check to see if the given breakpoint name\n/// @param {String} $name - The name of the breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name of the breakpoint and the value is the values for the breakpoint\n/// @return {Bool}\n/// @access public\n/// @group @carbon/layout\n@function is-smallest-breakpoint($name, $breakpoints: $grid-breakpoints) {\n  @return list.index(map.keys($breakpoints), $name) == 1;\n}\n\n/// Returns the largest breakpoint name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function largest-breakpoint-name($breakpoints: $grid-breakpoints) {\n  $total-breakpoints: list.length($breakpoints);\n  @return -key-by-index($breakpoints, $total-breakpoints);\n}\n\n/// Get the infix for a given breakpoint in a list of breakpoints. Useful for generating the size part in a selector, for example: `.prefix--col-sm-2`.\n/// @param {String} $name - The name of the breakpoint\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function breakpoint-infix($name) {\n  @return '-#{$name}';\n}\n\n/// Generate a media query from the width of the given breakpoint to infinity\n/// @param {String | Number} $name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  @if meta.type-of($name) == 'number' {\n    @media (min-width: $name) {\n      @content;\n    }\n  } @else if map.has-key($breakpoints, $name) {\n    $breakpoint: map.get($breakpoints, $name);\n    $width: map.get($breakpoint, width);\n    @if is-smallest-breakpoint($name, $breakpoints) {\n      @content;\n    } @else {\n      @media (min-width: $width) {\n        @content;\n      }\n    }\n  } @else {\n    @error 'Unable to find a breakpoint with name `#{$name}`. Expected one of: (#{map.keys($breakpoints)})';\n  }\n}\n\n/// Generate a media query for the maximum width of the given styles\n/// @param {String | Number} $name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  @if meta.type-of($name) == 'number' {\n    @media (max-width: $name) {\n      @content;\n    }\n  } @else if map.has-key($breakpoints, $name) {\n    // We borrow this logic from bootstrap for specifying the value of the\n    // max-width. The maximum width is calculated by finding the breakpoint and\n    // subtracting .02 from its value. This value is used instead of .01 to\n    // avoid rounding issues in Safari\n    // https://github.com/twbs/bootstrap/blob/c5b1919deaf5393fcca9e9b9d7ce9c338160d99d/scss/mixins/_breakpoints.scss#L34-L46\n    $breakpoint: map.get($breakpoints, $name);\n    $width: map.get($breakpoint, width) - 0.02;\n    @media (max-width: $width) {\n      @content;\n    }\n  } @else {\n    @error 'Unable to find a breakpoint with name `#{$name}`. Expected one of: (#{map.keys($breakpoints)})';\n  }\n}\n\n/// Generate a media query for the range between the lower and upper breakpoints\n/// @param {String | Number} $lower\n/// @param {String | Number} $upper\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $is-number-lower: meta.type-of($lower) == 'number';\n  $is-number-upper: meta.type-of($upper) == 'number';\n  $min: if($is-number-lower, $lower, map.get($breakpoints, $lower));\n  $max: if($is-number-upper, $upper, map.get($breakpoints, $upper));\n\n  @if $min and $max {\n    $min-width: if(not $is-number-lower and $min, map.get($min, width), $min);\n    $max-width: if(not $is-number-upper and $max, map.get($max, width), $max);\n    @media (min-width: $min-width) and (max-width: $max-width) {\n      @content;\n    }\n  } @else if $min != null and $max == null {\n    @include breakpoint-up($lower) {\n      @content;\n    }\n  } @else if $min == null and $max != null {\n    @include breakpoint-down($upper) {\n      @content;\n    }\n  } @else {\n    @error 'Unable to find a breakpoint to satisfy: (#{$lower},#{$upper}). Expected both to be one of (#{map.keys($breakpoints)}).';\n  }\n}\n\n/// Generate media query for the largest breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin largest-breakpoint($breakpoints: $grid-breakpoints) {\n  @include breakpoint(largest-breakpoint-name()) {\n    @content;\n  }\n}\n\n/// Generate a media query for a given breakpoint\n/// @param {String | Number} $name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint($name, $breakpoints: $grid-breakpoints) {\n  @include breakpoint-up($name, $breakpoints) {\n    @content;\n  }\n}\n","/**\n * @license\n *\n * Copyright IBM Corp. 2025\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n@use '@carbon/styles/scss/breakpoint' as *;\n\n$prefix: 'cds' !default;\n\n@include breakpoint-down(lg) {\n  .hide-at-md {\n    display: none;\n  }\n}\n\n@include breakpoint-down(md) {\n  .#{$prefix}--profile {\n    display: none;\n  }\n}\n"],"names":[],"sourceRoot":""}