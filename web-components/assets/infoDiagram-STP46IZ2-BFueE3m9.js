import{_ as a,l as o,K as p,e as s,L as m}from"./diagramElement-Cv2wKtsS.js";import{p as n}from"./treemap-75Q7IDZK-CZzjZ20j.js";import"./property-B3VGEpTR.js";import"./iframe-CXyr773K.js";import"./preload-helper-C1FmrZbK.js";import"./settings-D122vLMR.js";import"./state-gM9o-G2Y.js";import"./timer-B9d541WE.js";import"./loading-BKNgaPFA.js";import"./class-map-BRN1tNms.js";import"./directive-CJw_OlP2.js";import"./carbon-element-D4BpjLHq.js";import"./unsafe-html-DtFHcwRl.js";import"./_baseUniq-B2uhiv8l.js";import"./_basePickBy-DgjB_jIh.js";import"./clone-DxV0192-.js";var g={parse:a(async r=>{const t=await n("info",r);o.debug(t)},"parse")},v={version:m.version+""},d=a(()=>v.version,"getVersion"),c={getVersion:d},l=a((r,t,i)=>{o.debug(`rendering info diagram
`+r);const e=p(t);s(e,100,400,!0),e.append("g").append("text").attr("x",100).attr("y",40).attr("class","version").attr("font-size",32).style("text-anchor","middle").text(`v${i}`)},"draw"),f={draw:l},I={parser:g,db:c,renderer:f};export{I as diagram};
